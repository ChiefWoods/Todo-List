(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>m});var o=n(537),r=n.n(o),a=n(645),i=n.n(a),s=n(667),c=n.n(s),d=new URL(n(748),n.b),l=new URL(n(98),n.b),A=i()(r()),u=c()(d),p=c()(l);A.push([e.id,`@font-face {\n  font-family: Pacifico;\n  src: url(${u}) format('truetype');\n}\n\n@font-face {\n  font-family: Heebo;\n  src: url(${p}) format('truetype');\n}\n\n:root {\n  --tailwind-sky-50: #f0f9ff;\n  --tailwind-sky-200: #bae6fd;\n  --tailwind-sky-400: #38bdf8;\n  --tailwind-sky-500: #0ea5e9;\n  --delete-red: #ef4444;\n  --priority-low-green: #4ade80;\n  --priority-medium-yellow: #fde047;\n  --priority-high-red: #ef4444;\n}\n\n/* Header */\n\nheader {\n  background-color: var(--tailwind-sky-400);\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 7px 20px;\n}\n\n.container-header {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  min-width: max-content;\n}\n\n.logo {\n  height: 52px;\n}\n\n.logo-title {\n  font-family: Pacifico, cursive;\n  font-size: 4.5rem;\n  color: white;\n}\n\nmain {\n  flex: 1;\n  display: flex;\n}\n\n/* Nav */\n\nnav {\n  overflow-y: auto;\n  background-color: var(--tailwind-sky-50);\n  display: flex;\n  flex-direction: column;\n  flex-basis: 300px;\n  padding: 22px;\n  gap: 25px;\n}\n\n.nav-top {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-button {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 6px 14px;\n  gap: 9px;\n  cursor: pointer;\n  height: 40px;\n  border: none;\n  border-radius: 6px;\n  background-color: transparent;\n  min-width: max-content;\n}\n\n.nav-button:hover {\n  background-color: rgb(228, 228, 228);\n}\n\n.selected,\n.selected:hover {\n  background-color: var(--tailwind-sky-200);\n}\n\n.selected > .nav-span {\n  font-weight: 600;\n}\n\n.nav-icon {\n  height: 16px;\n}\n\n.nav-span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 400;\n}\n\n.nav-bottom {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-bottom > h1 {\n  font-family: Heebo, sans-serif;\n  font-size: 2.5rem;\n  font-weight: 500;\n  margin-left: 5px;\n}\n\n.nav-projects {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-button:hover .project-delete{\n  visibility: visible;\n}\n\n.task-count {\n  font-family: Heebo, sans-serif;\n  font-size: 1.2rem;\n  font-weight: 400;\n  color: gray;\n}\n\n.project-delete {\n  margin-left: auto;\n  visibility: hidden;\n}\n\n.project-delete:hover {\n  transform: scale(1.3);\n}\n\n.add-project > .nav-span {\n  font-weight: 500;\n}\n\n.input-project {\n  width: 100%;\n  padding: 6px 12px;\n  height: 40px;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  border: 1px solid black;\n  border-radius: 4px;\n  margin-bottom: 15px;\n}\n\n.container-add-project > div {\n  display: flex;\n  gap: 20px;\n}\n\n.project-add,\n.project-cancel {\n  cursor: pointer;\n  width: 100%;\n  height: 40px;\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 600;\n  border-radius: 6px;\n}\n\n.project-add {\n  border: 3px solid var(--tailwind-sky-400);\n  background-color: var(--tailwind-sky-400);\n  color: white;\n}\n\n.project-add:hover {\n  background-color: white;\n  color: var(--tailwind-sky-400);\n}\n\n.project-cancel {\n  border: 3px solid lightgrey;\n  background-color: transparent;\n  color: lightgrey;\n}\n\n.project-cancel:hover {\n  background-color: lightgrey;\n  color: white;\n}\n\n/* Section */\n\n.container-project {\n  overflow-y: auto;\n  width: 60%;\n  margin: 0 auto;\n  padding: 20px 20px;\n  display: flex;\n  flex-direction: column;\n}\n\n.project-name {\n  font-family: Heebo, sans-serif;\n  font-size: 3.2rem;\n  font-weight: 600;\n  margin-bottom: 20px;\n  align-self: flex-start;\n}\n\n/* Task */\n\n.task-list {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  min-width: max-content;\n}\n\n.task {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 8px 12px;\n  cursor: pointer;\n  background-color: #f3f4f6;\n  border: none;\n  border-radius: 5px 0px 0px 5px;\n}\n\n.task:hover {\n  background-color: #e5e7eb;\n}\n\n.task-high {\n  border-left: 6px solid var(--priority-high-red);\n}\n\n.task-medium {\n  border-left: 6px solid var(--priority-medium-yellow);\n}\n\n.task-low {\n  border-left: 6px solid var(--priority-low-green);\n}\n\n.task-checkbox {\n  display: none;\n}\n\n.checkbox-div {\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--tailwind-sky-500);\n  border-radius: 3px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.checkbox-div::after {\n  content: '\\2714';\n  color: #f3f4f6;\n  transform: scale(0);\n  transition: all 0.2s;\n}\n\n.task-checkbox:checked + .checkbox-div {\n  background-color: var(--tailwind-sky-500);\n}\n\n.task-checkbox:checked + .checkbox-div::after {\n  transform: scale(1.25);\n}\n\n.task-title {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  padding: 0px 12px;\n}\n\n.completed {\n  text-decoration: line-through;\n}\n\n.task-date {\n  font-family: Heebo, sans-serif;\n  font-size: 1.5rem;\n  font-weight: 400;\n  margin-left: auto;\n  padding: 0px 15px;\n}\n\n.expired {\n  font-weight: 600;\n  color: red;\n}\n\n.task-edit-button,\n.task-trash-button {\n  padding: 0px 8px;\n  cursor: pointer;\n  height: 22px;\n}\n\n.task-edit-button:hover,\n.task-trash-button:hover {\n  transform: scale(1.15);\n}\n\n.add-task {\n  padding-left: 16px;\n}\n\n.add-task > img {\n  height: 22px;\n}\n\n.add-task > span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  padding: 0px 12px;\n}\n\n.empty-task {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  margin-bottom: 20px;\n}\n\n/* Overlay */\n\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.25);\n  display: none;\n}\n\n/* Create */\n\n.modal-create,\n.modal-edit,\n.modal-delete,\n.modal-view {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border: 0px;\n  border-radius: 3px;\n  z-index: 10;\n}\n\n.modal-create,\n.modal-edit {\n  width: 40vw;\n  min-width: 400px;\n}\n\n.modal-create::backdrop,\n.modal-edit::backdrop {\n  background: black;\n  opacity: 0.3;\n}\n\n.modal-create-top,\n.modal-edit-top,\n.modal-delete-top,\n.modal-view-top {\n  background-color: var(--tailwind-sky-500);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n}\n\n.modal-create-top > span,\n.modal-edit-top > span,\n.modal-delete-top > span,\n.view-title {\n  font-family: Heebo, sans-serif;\n  font-size: 2.8rem;\n  font-weight: 600;\n  color: white;\n  padding-left: 5px;\n}\n\n.modal-create-top > button,\n.modal-edit-top > button,\n.modal-delete-top > button,\n.modal-view-top > button {\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n}\n\n.exit-button {\n  width: 35px;\n  aspect-ratio: 1 / 1;\n}\n\n.modal-create-bottom,\n.modal-edit-bottom,\n.modal-delete-bottom {\n  display: flex;\n  flex-direction: column;\n  padding: 18px;\n  height: 100%;\n  width: 100%;\n  gap: 15px;\n}\n\n.create-task-title,\n.edit-task-title {\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n}\n\n.create-task-title::placeholder,\n.create-task-desc::placeholder,\n.edit-task-title::placeholder,\n.edit-task-desc::placeholder {\n  font-size: 1.4rem;\n  color: gray;\n}\n\n.create-task-desc,\n.edit-task-desc {\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n  height: 100px;\n  resize: none;\n  background-color: transparent;\n}\n\n.container-date {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n  display: flex;\n  align-items: center;\n}\n\nlabel[for="create-task-date"],\nlabel[for="edit-task-date"] {\n  margin-right: 10px;\n}\n\n#create-task-date,\n#edit-task-date {\n  background-color: var(--tailwind-sky-500);\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n  color: white;\n  padding: 2px 8px;\n  border-radius: 3px;\n}\n\n::-webkit-calendar-picker-indicator {\n  cursor: pointer;\n  filter: invert(1);\n}\n\n.container-priority {\n  display: flex;\n  width: 100%;\n  align-items: center;\n}\n\n.container-priority > span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n  margin-right: 10px;\n}\n\n.container-priority-level > input[type="radio"] {\n  width: 1px;\n  height: 1px;\n}\n\n.container-priority-level > label {\n  cursor: pointer;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 2px 8px;\n  border-radius: 3px;\n  transition: all 0.2s;\n  background-color: white;\n}\n\n.container-priority-level > label:hover,\ninput[name="create-task-priority"]:checked + label,\ninput[name="edit-task-priority"]:checked + label {\n  color: white;\n}\n\n.label-low {\n  border: 3px solid var(--priority-low-green);\n  color: var(--priority-low-green);\n}\n\n.label-low:hover,\ninput[value="low"]:checked + label {\n  background-color: var(--priority-low-green);\n}\n\n.label-medium {\n  border: 3px solid var(--priority-medium-yellow);\n  color: var(--priority-medium-yellow);\n}\n\n.label-medium:hover,\ninput[value="medium"]:checked + label {\n  background-color: var(--priority-medium-yellow);\n}\n\n.label-high {\n  border: 3px solid var(--priority-high-red);\n  color: var(--priority-high-red);\n}\n\n.label-high:hover,\ninput[value="high"]:checked + label {\n  background-color: var(--priority-high-red);\n}\n\n.create-add-button,\n.edit-change-button {\n  margin-left: auto;\n  cursor: pointer;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 3px 12px;\n  border-radius: 3px;\n  border: 3px solid var(--tailwind-sky-500);\n  background-color: var(--tailwind-sky-500);\n  color: white;\n  transition: all 0.2s;\n}\n\n.create-add-button:hover,\n.edit-change-button:hover {\n  background-color: white;\n  color: var(--tailwind-sky-500);\n}\n\n/* Delete */\n\n.modal-delete,\n.modal-view {\n  width: 30vw;\n  min-width: 250px;\n}\n\n.modal-delete::backdrop,\n.modal-view::backdrop {\n  background: black;\n  opacity: 0.3;\n}\n\n.modal-delete-bottom {\n  gap: 35px;\n}\n\n.modal-delete-bottom > span,\n.view-desc,\n.view-project,\n.view-date,\n.view-priority {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n}\n\n.container-confirm {\n  display: flex;\n  justify-content: flex-end;\n  gap: 20px;\n}\n\n.container-confirm > button {\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 3px 12px;\n  border-radius: 3px;\n  color: white;\n  cursor: pointer;\n}\n\n.delete-confirm-button {\n  background-color: var(--delete-red);\n  border: 3px solid var(--delete-red);\n}\n\n.delete-confirm-button:hover {\n  background-color: white;\n  color: var(--delete-red);\n}\n\n/* View */\n\n.modal-view-bottom {\n  display: flex;\n  flex-direction: column;\n  padding: 18px;\n  height: 100%;\n  width: 100%;\n}\n\n.view-desc {\n  margin-bottom: 30px;\n}\n\n.view-low {\n  color: var(--priority-low-green);\n}\n\n.view-medium {\n  color: var(--priority-medium-yellow);\n}\n\n.view-high {\n  color: var(--priority-high-red);\n}\n\n@media (max-width: 576px) {\n  main {\n    flex-direction: column;\n  }\n\n  nav {\n    flex-basis: 170px;\n  }\n\n  .container-project {\n    margin: 0;\n    padding-inline: 30px;\n    width: 100%;\n  }\n}\n`,"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:['@font-face {\n  font-family: Pacifico;\n  src: url(fonts/Pacifico/Pacifico-Regular.ttf) format(\'truetype\');\n}\n\n@font-face {\n  font-family: Heebo;\n  src: url(fonts/Heebo/Heebo-VariableFont_wght.ttf) format(\'truetype\');\n}\n\n:root {\n  --tailwind-sky-50: #f0f9ff;\n  --tailwind-sky-200: #bae6fd;\n  --tailwind-sky-400: #38bdf8;\n  --tailwind-sky-500: #0ea5e9;\n  --delete-red: #ef4444;\n  --priority-low-green: #4ade80;\n  --priority-medium-yellow: #fde047;\n  --priority-high-red: #ef4444;\n}\n\n/* Header */\n\nheader {\n  background-color: var(--tailwind-sky-400);\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 7px 20px;\n}\n\n.container-header {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  min-width: max-content;\n}\n\n.logo {\n  height: 52px;\n}\n\n.logo-title {\n  font-family: Pacifico, cursive;\n  font-size: 4.5rem;\n  color: white;\n}\n\nmain {\n  flex: 1;\n  display: flex;\n}\n\n/* Nav */\n\nnav {\n  overflow-y: auto;\n  background-color: var(--tailwind-sky-50);\n  display: flex;\n  flex-direction: column;\n  flex-basis: 300px;\n  padding: 22px;\n  gap: 25px;\n}\n\n.nav-top {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-button {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 6px 14px;\n  gap: 9px;\n  cursor: pointer;\n  height: 40px;\n  border: none;\n  border-radius: 6px;\n  background-color: transparent;\n  min-width: max-content;\n}\n\n.nav-button:hover {\n  background-color: rgb(228, 228, 228);\n}\n\n.selected,\n.selected:hover {\n  background-color: var(--tailwind-sky-200);\n}\n\n.selected > .nav-span {\n  font-weight: 600;\n}\n\n.nav-icon {\n  height: 16px;\n}\n\n.nav-span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 400;\n}\n\n.nav-bottom {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-bottom > h1 {\n  font-family: Heebo, sans-serif;\n  font-size: 2.5rem;\n  font-weight: 500;\n  margin-left: 5px;\n}\n\n.nav-projects {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-button:hover .project-delete{\n  visibility: visible;\n}\n\n.task-count {\n  font-family: Heebo, sans-serif;\n  font-size: 1.2rem;\n  font-weight: 400;\n  color: gray;\n}\n\n.project-delete {\n  margin-left: auto;\n  visibility: hidden;\n}\n\n.project-delete:hover {\n  transform: scale(1.3);\n}\n\n.add-project > .nav-span {\n  font-weight: 500;\n}\n\n.input-project {\n  width: 100%;\n  padding: 6px 12px;\n  height: 40px;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  border: 1px solid black;\n  border-radius: 4px;\n  margin-bottom: 15px;\n}\n\n.container-add-project > div {\n  display: flex;\n  gap: 20px;\n}\n\n.project-add,\n.project-cancel {\n  cursor: pointer;\n  width: 100%;\n  height: 40px;\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 600;\n  border-radius: 6px;\n}\n\n.project-add {\n  border: 3px solid var(--tailwind-sky-400);\n  background-color: var(--tailwind-sky-400);\n  color: white;\n}\n\n.project-add:hover {\n  background-color: white;\n  color: var(--tailwind-sky-400);\n}\n\n.project-cancel {\n  border: 3px solid lightgrey;\n  background-color: transparent;\n  color: lightgrey;\n}\n\n.project-cancel:hover {\n  background-color: lightgrey;\n  color: white;\n}\n\n/* Section */\n\n.container-project {\n  overflow-y: auto;\n  width: 60%;\n  margin: 0 auto;\n  padding: 20px 20px;\n  display: flex;\n  flex-direction: column;\n}\n\n.project-name {\n  font-family: Heebo, sans-serif;\n  font-size: 3.2rem;\n  font-weight: 600;\n  margin-bottom: 20px;\n  align-self: flex-start;\n}\n\n/* Task */\n\n.task-list {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  min-width: max-content;\n}\n\n.task {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 8px 12px;\n  cursor: pointer;\n  background-color: #f3f4f6;\n  border: none;\n  border-radius: 5px 0px 0px 5px;\n}\n\n.task:hover {\n  background-color: #e5e7eb;\n}\n\n.task-high {\n  border-left: 6px solid var(--priority-high-red);\n}\n\n.task-medium {\n  border-left: 6px solid var(--priority-medium-yellow);\n}\n\n.task-low {\n  border-left: 6px solid var(--priority-low-green);\n}\n\n.task-checkbox {\n  display: none;\n}\n\n.checkbox-div {\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--tailwind-sky-500);\n  border-radius: 3px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.checkbox-div::after {\n  content: \'\\2714\';\n  color: #f3f4f6;\n  transform: scale(0);\n  transition: all 0.2s;\n}\n\n.task-checkbox:checked + .checkbox-div {\n  background-color: var(--tailwind-sky-500);\n}\n\n.task-checkbox:checked + .checkbox-div::after {\n  transform: scale(1.25);\n}\n\n.task-title {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  padding: 0px 12px;\n}\n\n.completed {\n  text-decoration: line-through;\n}\n\n.task-date {\n  font-family: Heebo, sans-serif;\n  font-size: 1.5rem;\n  font-weight: 400;\n  margin-left: auto;\n  padding: 0px 15px;\n}\n\n.expired {\n  font-weight: 600;\n  color: red;\n}\n\n.task-edit-button,\n.task-trash-button {\n  padding: 0px 8px;\n  cursor: pointer;\n  height: 22px;\n}\n\n.task-edit-button:hover,\n.task-trash-button:hover {\n  transform: scale(1.15);\n}\n\n.add-task {\n  padding-left: 16px;\n}\n\n.add-task > img {\n  height: 22px;\n}\n\n.add-task > span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  padding: 0px 12px;\n}\n\n.empty-task {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  margin-bottom: 20px;\n}\n\n/* Overlay */\n\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.25);\n  display: none;\n}\n\n/* Create */\n\n.modal-create,\n.modal-edit,\n.modal-delete,\n.modal-view {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border: 0px;\n  border-radius: 3px;\n  z-index: 10;\n}\n\n.modal-create,\n.modal-edit {\n  width: 40vw;\n  min-width: 400px;\n}\n\n.modal-create::backdrop,\n.modal-edit::backdrop {\n  background: black;\n  opacity: 0.3;\n}\n\n.modal-create-top,\n.modal-edit-top,\n.modal-delete-top,\n.modal-view-top {\n  background-color: var(--tailwind-sky-500);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n}\n\n.modal-create-top > span,\n.modal-edit-top > span,\n.modal-delete-top > span,\n.view-title {\n  font-family: Heebo, sans-serif;\n  font-size: 2.8rem;\n  font-weight: 600;\n  color: white;\n  padding-left: 5px;\n}\n\n.modal-create-top > button,\n.modal-edit-top > button,\n.modal-delete-top > button,\n.modal-view-top > button {\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n}\n\n.exit-button {\n  width: 35px;\n  aspect-ratio: 1 / 1;\n}\n\n.modal-create-bottom,\n.modal-edit-bottom,\n.modal-delete-bottom {\n  display: flex;\n  flex-direction: column;\n  padding: 18px;\n  height: 100%;\n  width: 100%;\n  gap: 15px;\n}\n\n.create-task-title,\n.edit-task-title {\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n}\n\n.create-task-title::placeholder,\n.create-task-desc::placeholder,\n.edit-task-title::placeholder,\n.edit-task-desc::placeholder {\n  font-size: 1.4rem;\n  color: gray;\n}\n\n.create-task-desc,\n.edit-task-desc {\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n  height: 100px;\n  resize: none;\n  background-color: transparent;\n}\n\n.container-date {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n  display: flex;\n  align-items: center;\n}\n\nlabel[for="create-task-date"],\nlabel[for="edit-task-date"] {\n  margin-right: 10px;\n}\n\n#create-task-date,\n#edit-task-date {\n  background-color: var(--tailwind-sky-500);\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n  color: white;\n  padding: 2px 8px;\n  border-radius: 3px;\n}\n\n::-webkit-calendar-picker-indicator {\n  cursor: pointer;\n  filter: invert(1);\n}\n\n.container-priority {\n  display: flex;\n  width: 100%;\n  align-items: center;\n}\n\n.container-priority > span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n  margin-right: 10px;\n}\n\n.container-priority-level > input[type="radio"] {\n  width: 1px;\n  height: 1px;\n}\n\n.container-priority-level > label {\n  cursor: pointer;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 2px 8px;\n  border-radius: 3px;\n  transition: all 0.2s;\n  background-color: white;\n}\n\n.container-priority-level > label:hover,\ninput[name="create-task-priority"]:checked + label,\ninput[name="edit-task-priority"]:checked + label {\n  color: white;\n}\n\n.label-low {\n  border: 3px solid var(--priority-low-green);\n  color: var(--priority-low-green);\n}\n\n.label-low:hover,\ninput[value="low"]:checked + label {\n  background-color: var(--priority-low-green);\n}\n\n.label-medium {\n  border: 3px solid var(--priority-medium-yellow);\n  color: var(--priority-medium-yellow);\n}\n\n.label-medium:hover,\ninput[value="medium"]:checked + label {\n  background-color: var(--priority-medium-yellow);\n}\n\n.label-high {\n  border: 3px solid var(--priority-high-red);\n  color: var(--priority-high-red);\n}\n\n.label-high:hover,\ninput[value="high"]:checked + label {\n  background-color: var(--priority-high-red);\n}\n\n.create-add-button,\n.edit-change-button {\n  margin-left: auto;\n  cursor: pointer;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 3px 12px;\n  border-radius: 3px;\n  border: 3px solid var(--tailwind-sky-500);\n  background-color: var(--tailwind-sky-500);\n  color: white;\n  transition: all 0.2s;\n}\n\n.create-add-button:hover,\n.edit-change-button:hover {\n  background-color: white;\n  color: var(--tailwind-sky-500);\n}\n\n/* Delete */\n\n.modal-delete,\n.modal-view {\n  width: 30vw;\n  min-width: 250px;\n}\n\n.modal-delete::backdrop,\n.modal-view::backdrop {\n  background: black;\n  opacity: 0.3;\n}\n\n.modal-delete-bottom {\n  gap: 35px;\n}\n\n.modal-delete-bottom > span,\n.view-desc,\n.view-project,\n.view-date,\n.view-priority {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n}\n\n.container-confirm {\n  display: flex;\n  justify-content: flex-end;\n  gap: 20px;\n}\n\n.container-confirm > button {\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 3px 12px;\n  border-radius: 3px;\n  color: white;\n  cursor: pointer;\n}\n\n.delete-confirm-button {\n  background-color: var(--delete-red);\n  border: 3px solid var(--delete-red);\n}\n\n.delete-confirm-button:hover {\n  background-color: white;\n  color: var(--delete-red);\n}\n\n/* View */\n\n.modal-view-bottom {\n  display: flex;\n  flex-direction: column;\n  padding: 18px;\n  height: 100%;\n  width: 100%;\n}\n\n.view-desc {\n  margin-bottom: 30px;\n}\n\n.view-low {\n  color: var(--priority-low-green);\n}\n\n.view-medium {\n  color: var(--priority-medium-yellow);\n}\n\n.view-high {\n  color: var(--priority-high-red);\n}\n\n@media (max-width: 576px) {\n  main {\n    flex-direction: column;\n  }\n\n  nav {\n    flex-basis: 170px;\n  }\n\n  .container-project {\n    margin: 0;\n    padding-inline: 30px;\n    width: 100%;\n  }\n}\n'],sourceRoot:""}]);const m=A},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],d=o.base?c[0]+o.base:c[0],l=a[d]||0,A="".concat(d," ").concat(l);a[d]=l+1;var u=n(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=r(p,o);o.byIndex=s,t.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);t[s].references--}for(var c=o(e,r),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},98:(e,t,n)=>{e.exports=n.p+"fonts/Heebo/Heebo-VariableFont_wght.ttf"},748:(e,t,n)=>{e.exports=n.p+"fonts/Pacifico/Pacifico-Regular.ttf"}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),a=n(569),i=n.n(a),s=n(565),c=n.n(s),d=n(216),l=n.n(d),A=n(589),u=n.n(A),p=n(28),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),t()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const g=n.p+"icons/clipboard-check-outline.svg",h=()=>{const e=document.createElement("header"),t=Pe.createText("div",["container-header"],""),n=Pe.createImg(g,["logo"],"Logo"),o=Pe.createText("span",["logo-title"],"Todo List");return t.append(n,o),e.append(t),e},f=n.p+"icons/github.svg",C=()=>{const e=document.createElement("footer"),t=Pe.createText("span",["made-by"],`Copyright @ ${(new Date).getFullYear()} ChiefWoods`),n=Pe.createText("a",["github-link"],"");n.href="https://github.com/ChiefWoods/todo-list",n.target="_blank";const o=Pe.createImg(f,["github-icon"],"GitHub");return n.append(o),e.append(t,n),e};function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function v(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function b(e){v(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===E(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function B(e){v(1,arguments);var t=b(e),n=t.getUTCDay(),o=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function w(e){v(1,arguments);var t=b(e),n=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var r=B(o),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=B(a);return t.getTime()>=r.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}var x={};function k(){return x}function T(e,t){var n,o,r,a,i,s,c,d;v(1,arguments);var l=k(),A=y(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:l.weekStartsOn)&&void 0!==o?o:null===(c=l.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==n?n:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=b(e),p=u.getUTCDay(),m=(p<A?7:0)+p-A;return u.setUTCDate(u.getUTCDate()-m),u.setUTCHours(0,0,0,0),u}function j(e,t){var n,o,r,a,i,s,c,d;v(1,arguments);var l=b(e),A=l.getUTCFullYear(),u=k(),p=y(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==o?o:null===(c=u.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(A+1,0,p),m.setUTCHours(0,0,0,0);var g=T(m,t),h=new Date(0);h.setUTCFullYear(A,0,p),h.setUTCHours(0,0,0,0);var f=T(h,t);return l.getTime()>=g.getTime()?A+1:l.getTime()>=f.getTime()?A:A-1}function P(e,t){for(var n=e<0?"-":"",o=Math.abs(e).toString();o.length<t;)o="0"+o;return n+o}const D=function(e,t){var n=e.getUTCFullYear(),o=n>0?n:1-n;return P("yy"===t?o%100:o,t.length)},S=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):P(n+1,2)},M=function(e,t){return P(e.getUTCDate(),t.length)},Y=function(e,t){return P(e.getUTCHours()%12||12,t.length)},W=function(e,t){return P(e.getUTCHours(),t.length)},q=function(e,t){return P(e.getUTCMinutes(),t.length)},L=function(e,t){return P(e.getUTCSeconds(),t.length)},z=function(e,t){var n=t.length,o=e.getUTCMilliseconds();return P(Math.floor(o*Math.pow(10,n-3)),t.length)};var H={G:function(e,t,n){var o=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var o=e.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return D(e,t)},Y:function(e,t,n,o){var r=j(e,o),a=r>0?r:1-r;return"YY"===t?P(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):P(a,t.length)},R:function(e,t){return P(w(e),t.length)},u:function(e,t){return P(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(o);case"QQ":return P(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(o);case"qq":return P(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,t,n){var o=e.getUTCMonth();switch(t){case"M":case"MM":return S(e,t);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(e,t,n){var o=e.getUTCMonth();switch(t){case"L":return String(o+1);case"LL":return P(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(e,t,n,o){var r=function(e,t){v(1,arguments);var n=b(e),o=T(n,t).getTime()-function(e,t){var n,o,r,a,i,s,c,d;v(1,arguments);var l=k(),A=y(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:l.firstWeekContainsDate)&&void 0!==o?o:null===(c=l.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1),u=j(e,t),p=new Date(0);return p.setUTCFullYear(u,0,A),p.setUTCHours(0,0,0,0),T(p,t)}(n,t).getTime();return Math.round(o/6048e5)+1}(e,o);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):P(r,t.length)},I:function(e,t,n){var o=function(e){v(1,arguments);var t=b(e),n=B(t).getTime()-function(e){v(1,arguments);var t=w(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),B(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(o,{unit:"week"}):P(o,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):M(e,t)},D:function(e,t,n){var o=function(e){v(1,arguments);var t=b(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=n-t.getTime();return Math.floor(o/864e5)+1}(e);return"Do"===t?n.ordinalNumber(o,{unit:"dayOfYear"}):P(o,t.length)},E:function(e,t,n){var o=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return P(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return P(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var o=e.getUTCDay(),r=0===o?7:o;switch(t){case"i":return String(r);case"ii":return P(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(e,t,n){var o=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,t,n){var o,r=e.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){var o,r=e.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var o=e.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return Y(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):W(e,t)},K:function(e,t,n){var o=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(o,{unit:"hour"}):P(o,t.length)},k:function(e,t,n){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===t?n.ordinalNumber(o,{unit:"hour"}):P(o,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):q(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):L(e,t)},S:function(e,t){return z(e,t)},X:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return N(r);case"XXXX":case"XX":return I(r);default:return I(r,":")}},x:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"x":return N(r);case"xxxx":case"xx":return I(r);default:return I(r,":")}},O:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+U(r,":");default:return"GMT"+I(r,":")}},z:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+U(r,":");default:return"GMT"+I(r,":")}},t:function(e,t,n,o){var r=o._originalDate||e;return P(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,o){return P((o._originalDate||e).getTime(),t.length)}};function U(e,t){var n=e>0?"-":"+",o=Math.abs(e),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=t||"";return n+String(r)+i+P(a,2)}function N(e,t){return e%60==0?(e>0?"-":"+")+P(Math.abs(e)/60,2):I(e,t)}function I(e,t){var n=t||"",o=e>0?"-":"+",r=Math.abs(e);return o+P(Math.floor(r/60),2)+n+P(r%60,2)}const O=H;var $=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},F=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const Q={p:F,P:function(e,t){var n,o=e.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return $(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",$(r,t)).replace("{{time}}",F(a,t))}};var X=["D","DD"],R=["YY","YYYY"];function Z(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var G={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function V(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const _={date:V({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:V({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:V({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var J={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function K(e){return function(t,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,a=null!=n&&n.width?String(n.width):r;o=e.formattingValues[a]||e.formattingValues[r]}else{var i=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;o=e.values[s]||e.values[i]}return o[e.argumentCallback?e.argumentCallback(t):t]}}const ee={ordinalNumber:function(e,t){var n=Number(e),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:K({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:K({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:K({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:K({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:K({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function te(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],a=t.match(r);if(!a)return null;var i,s=a[0],c=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(c):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(c);return i=e.valueCallback?e.valueCallback(d):d,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(s.length)}}}var ne,oe={ordinalNumber:(ne={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(ne.matchPattern);if(!n)return null;var o=n[0],r=e.match(ne.parsePattern);if(!r)return null;var a=ne.valueCallback?ne.valueCallback(r[0]):r[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:e.slice(o.length)}}),era:te({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:te({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:te({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:te({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:te({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const re={code:"en-US",formatDistance:function(e,t,n){var o,r=G[e];return o="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:_,formatRelative:function(e,t,n,o){return J[e]},localize:ee,match:oe,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ae=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ie=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,se=/^'([^]*?)'?$/,ce=/''/g,de=/[a-zA-Z]/;function le(e,t,n){var o,r,a,i,s,c,d,l,A,u,p,m,g,h,f,C,B,w;v(2,arguments);var x=String(t),T=k(),j=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:T.locale)&&void 0!==o?o:re,P=y(null!==(a=null!==(i=null!==(s=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(d=n.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:T.firstWeekContainsDate)&&void 0!==i?i:null===(A=T.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1);if(!(P>=1&&P<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=y(null!==(p=null!==(m=null!==(g=null!==(h=null==n?void 0:n.weekStartsOn)&&void 0!==h?h:null==n||null===(f=n.locale)||void 0===f||null===(C=f.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==g?g:T.weekStartsOn)&&void 0!==m?m:null===(B=T.locale)||void 0===B||null===(w=B.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==p?p:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!j.localize)throw new RangeError("locale must contain localize property");if(!j.formatLong)throw new RangeError("locale must contain formatLong property");var S=b(e);if(!function(e){if(v(1,arguments),!function(e){return v(1,arguments),e instanceof Date||"object"===E(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=b(e);return!isNaN(Number(t))}(S))throw new RangeError("Invalid time value");var M=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(S),Y=function(e,t){return v(2,arguments),function(e,t){v(2,arguments);var n=b(e).getTime(),o=y(t);return new Date(n+o)}(e,-y(t))}(S,M),W={firstWeekContainsDate:P,weekStartsOn:D,locale:j,_originalDate:S};return x.match(ie).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Q[t])(e,j.formatLong):e})).join("").match(ae).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(se))?a[1].replace(ce,"'"):r;var s,c=O[i];if(c)return null!=n&&n.useAdditionalWeekYearTokens||(s=o,-1===R.indexOf(s))||Z(o,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==X.indexOf(e)}(o)||Z(o,t,String(e)),c(Y,o,j.localize,W);if(i.match(de))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}class Ae{constructor(e,t,n,o,r,a){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.completed=r,this.index=a}getTitle(){return this.title}setTitle(e){this.title=e}getDescription(){return this.description}setDescription(e){this.description=e}getDueDate(){return this.dueDate}setDueDate(e){this.dueDate=e}getPriority(){return this.priority}setPriority(e){this.priority=e}getCompleted(){return this.completed}toggleCompleted(){this.completed=!this.completed}getIndex(){return this.index}setIndex(e){this.index=e}}function ue(e){v(1,arguments);var t=b(e);return t.setHours(0,0,0,0),t}function pe(e,t){var n,o,r,a,i,s,c,d;v(1,arguments);var l=k(),A=y(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:l.weekStartsOn)&&void 0!==o?o:null===(c=l.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==n?n:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=b(e),p=u.getDay(),m=(p<A?7:0)+p-A;return u.setDate(u.getDate()-m),u.setHours(0,0,0,0),u}class me{constructor(e){this.name=e,this.tasks=[],this.taskCount=0,this.indexCount=0}getName(){return this.name}getTaskCount(){return this.taskCount}updateTaskCount(){this.taskCount=this.tasks.length}getIndexCount(){return this.indexCount}updateIndexCount(){this.indexCount=this.tasks.length}getAllTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getTitle()===e))}setTasks(e){this.tasks=e}contains(e){return this.tasks.some((t=>t.getTitle()===e))}addTask(e){this.tasks.push(e),this.taskCount++,this.indexCount++}deleteTask(e){this.tasks=this.tasks.filter((t=>t.getTitle()!==e)),this.taskCount--}getTodayTasks(){return this.tasks.filter((e=>function(e){return v(1,arguments),function(e,t){v(2,arguments);var n=ue(e),o=ue(t);return n.getTime()===o.getTime()}(e,Date.now())}(new Date(this.monthDayYear(e.getDueDate())))))}getThisWeekTasks(){return this.tasks.filter((e=>function(e,t){return v(1,arguments),function(e,t,n){v(2,arguments);var o=pe(e,n),r=pe(t,n);return o.getTime()===r.getTime()}(e,Date.now(),t)}(function(e,t){return v(2,arguments),function(e,t){v(2,arguments);var n=b(e),o=y(t);return isNaN(o)?new Date(NaN):o?(n.setDate(n.getDate()+o),n):n}(e,-y(t))}(new Date(this.monthDayYear(e.getDueDate())),1))))}getImportantTasks(){return this.tasks.filter((e=>"high"===e.getPriority()))}monthDayYear(e){if(e){const t=e.split("-")[2];return`${e.split("-")[1]}/${t}/${e.split("-")[0]}`}return null}}class ge{constructor(){this.projects=[new me("Today"),new me("This week"),new me("Important")]}getAllProjects(){return this.projects}getProject(e){return this.projects.find((t=>t.getName()===e))}setProjects(e){this.projects=e}contains(e){return this.projects.some((t=>t.getName()===e))}addProject(e){this.projects.push(e)}deleteProject(e){this.projects=this.projects.filter((t=>t.getName()!==e))}updateTodayProjects(){this.updateProject("Today").tasks=this.sortByPriority(this.getProject("Today").getAllTasks()),this.reindexTasks(this.getProject("Today").getAllTasks()),this.getProject("Today").updateTaskCount(),this.getProject("Today").updateIndexCount()}updateThisWeekProjects(){this.updateProject("This week").tasks=this.sortByDate(this.getProject("This week").getAllTasks()),this.reindexTasks(this.getProject("This week").getAllTasks()),this.getProject("This week").updateTaskCount(),this.getProject("This week").updateIndexCount()}updateImportantProjects(){this.updateProject("Important").tasks=this.sortByDate(this.getProject("Important").getAllTasks()),this.reindexTasks(this.getProject("This week").getAllTasks()),this.getProject("This week").updateTaskCount(),this.getProject("This week").updateIndexCount()}updateProject(e){return this.getProject(e).tasks=[],this.getProject(e).taskCount=0,this.getProject(e).indexCount=0,this.projects.forEach((t=>{["Today","This week","Important"].includes(t.getName())||("Today"===e?t.getTodayTasks():"This week"===e?t.getThisWeekTasks():t.getImportantTasks()).forEach(((t,n)=>{this.getProject(e).addTask(new Ae(t.getTitle(),t.getDescription(),t.getDueDate(),t.getPriority(),t.getCompleted(),n))}))})),this.getProject(e)}updateAllProjects(){this.updateTodayProjects(),this.updateThisWeekProjects(),this.updateImportantProjects()}reindexTasks(e){e.forEach(((e,t)=>e.setIndex(t)))}sortByPriority(e){return e.sort(((e,t)=>this.priorityToScore(e)-this.priorityToScore(t)))}priorityToScore(e){return"high"===e.getPriority()?-3:"medium"===e.getPriority()?-2:-1}sortByDate(e){const t=[],n=[];e.forEach((e=>null===e.getDueDate()?t.push(e):n.push(e)));const o=n.sort(((e,t)=>function(e,t){v(2,arguments);var n=b(e),o=b(t),r=n.getTime()-o.getTime();return r<0?-1:r>0?1:r}(new Date(e.getDueDate()),new Date(t.getDueDate()))));return[...o,...t]}}class he{static setTodoList(e){localStorage.setItem("todoList",JSON.stringify(e))}static getTodoList(){const e=Object.assign(new ge,JSON.parse(localStorage.getItem("todoList")));return e.setProjects(e.getAllProjects().map((e=>Object.assign(new me,e)))),e.getAllProjects().forEach((e=>e.setTasks(e.getAllTasks().map((e=>Object.assign(new Ae,e)))))),e}static updateAllProjects(){const e=he.getTodoList();e.updateAllProjects(),he.setTodoList(e)}static getAllProjects(){return he.getTodoList().getAllProjects()}static containsProject(e){return he.getTodoList().contains(e)}static addProject(e){const t=he.getTodoList();t.addProject(new me(e)),he.setTodoList(t)}static deleteProject(e){const t=he.getTodoList();t.deleteProject(e),t.updateAllProjects(),he.setTodoList(t)}static getTaskCount(e){return he.getTodoList().getProject(e).getTaskCount()}static getIndexCount(e){return he.getTodoList().getProject(e).getIndexCount()}static getAllTasks(e){return he.getTodoList().getProject(e).getAllTasks()}static getTask(e,t){return he.getTodoList().getProject(e).getTask(t)}static isProjectEmpty(e){return 0===he.getTodoList().getProject(e).getTaskCount()}static containsTask(e,t){return he.getTodoList().getProject(e).contains(t)}static addTask(e,t,n,o,r){const a=he.getTodoList();a.getProject(e).addTask(new Ae(t,n,o,r,!1,a.getProject(e).getIndexCount())),a.updateAllProjects(),he.setTodoList(a)}static deleteTask(e,t){const n=he.getTodoList();n.getProject(e).deleteTask(t),n.updateAllProjects(),he.setTodoList(n)}static updateTask(e,t,n,o,r,a){const i=he.getTodoList();i.getProject(e).getTask(t).setTitle(n),i.getProject(e).getTask(n).setDescription(o),i.getProject(e).getTask(n).setDueDate(r),i.getProject(e).getTask(n).setPriority(a),i.updateAllProjects(),he.setTodoList(i)}static toggleTaskCompleted(e,t){const n=he.getTodoList();n.getProject(e).getTask(t).toggleCompleted(),n.updateAllProjects(),he.setTodoList(n)}static getProjectName(e){const t=he.getTodoList();for(const n of t.getAllProjects().filter((e=>!["Today","This week","Important"].includes(e.getName()))))if(n.contains(e))return n.getName()}}const fe=n.p+"icons/close-white.svg",Ce=(()=>{const e=e=>{const n=Pe.createImg(fe,[`${e}-exit`,"exit-button"],"Exit");return t(n),n},t=e=>{e.addEventListener("click",n)},n=()=>{document.querySelector("dialog").remove(),o()},o=()=>{const e=document.querySelector(".overlay");e.style.display="block"===e.style.display?"none":"block"},r=(e,t)=>({title:e.querySelector(`.${t}-task-title`).value,desc:e.querySelector(`.${t}-task-desc`).value,date:e.querySelector(`#${t}-task-date`).value||null,priority:e.querySelector(`input[name="${t}-task-priority"]:checked`).value}),a=e=>e.charAt(0).toUpperCase()+e.slice(1);return{showDeleteModal:(t,r=null)=>{const a=Pe.createText("dialog",["modal-delete"],"");a.open=!0;const i=Pe.createText("div",["modal-delete-top"],""),s=Pe.createText("span","","Confirm Delete"),c=document.createElement("button"),d=e("delete");c.append(d),i.append(s,c);const l=Pe.createText("div",["modal-delete-bottom"],"");let A=null;A=r?Pe.createText("span","","Are you sure you want to delete this task?"):Pe.createText("span","",`Are you sure you want to delete project ${t}? Warning: this is irreversible!`);const u=Pe.createText("div",["container-confirm"],""),p=Pe.createText("button",["delete-confirm-button"],"Delete");r?((e,t,o)=>{e.addEventListener("click",(()=>{n(),he.deleteTask(t,o),je.updateTaskCount();const e=document.querySelector(".project-name").textContent;ye.replaceSection(e)}))})(p,t,r):((e,t)=>{e.addEventListener("click",(()=>{n(),he.deleteProject(t);for(const e of document.querySelectorAll(".nav-span"))if(e.textContent===t){if(je.removeProjectLi(e.closest("li")),je.updateTaskCount(),e.closest(".project").classList.contains("selected"))ye.replaceSection(),Pe.changeDocumentTitle();else{const e=document.querySelector(".project-name").textContent;ye.replaceSection(e)}break}}))})(p,t),u.append(p),l.append(A,u),a.append(i,l),document.querySelector("main").append(a),o()},showViewModal:(t,n)=>{const r=Pe.createText("dialog",["modal-view"],"");r.open=!0;const i=Pe.createText("div",["modal-view-top"],""),s=Pe.createText("h1",["view-title"],n.getTitle()),c=document.createElement("button"),d=e("view");c.append(d),i.append(s,c);const l=Pe.createText("div",["modal-view-bottom"],""),A=Pe.createText("p",["view-desc"],n.getDescription()),u=Pe.createText("p",["view-project"],`Project: ${t}`),p=Pe.createText("p",["view-date"],`Due Date: ${n.getDueDate()?(e=>e?le(new Date(e),"dd/MM/yyyy"):"")(n.getDueDate()):"-"}`),m=Pe.createText("p",["view-priority"],"Priority: "),g=Pe.createText("span",["view-priority-level",`view-${n.getPriority()}`],a(n.getPriority()));m.append(g),l.append(A,u,p,m),r.append(i,l),document.querySelector("main").append(r),o()},showCreateEditModal:(t,i,s)=>{const c=Pe.createText("dialog",[`modal-${s}`],"");c.open=!0;const d=Pe.createText("div",[`modal-${s}-top`],""),l=Pe.createText("span","",`${a(s)} Task`),A=document.createElement("button"),u=e(s);A.append(u),d.append(l,A);const p=Pe.createText("form",[`modal-${s}-bottom`],"");p.method="dialog";const m=Pe.createText("input",[`${s}-task-title`],"");m.type="text",m.placeholder="Title",m.required=!0,i&&(m.value=i.getTitle());const g=Pe.createText("textarea",[`${s}-task-desc`],"");g.placeholder="Description",g.required=!0,i&&(g.textContent=i.getDescription());const h=Pe.createText("div",["container-date"],""),f=Pe.createText("label","","Due Date :");f.htmlFor=`${s}-task-date`;const C=document.createElement("input");C.type="date",C.id=`${s}-task-date`,i&&(C.value=i.getDueDate()),h.append(f,C);const E=Pe.createText("div",["container-priority"],""),v=Pe.createText("span","","Priority :");E.append(v);const b=Pe.createText("div",["container-priority-level"],"");["low","medium","high"].forEach((e=>{const t=document.createElement("input");t.type="radio",t.name=`${s}-task-priority`,t.id=`${s}-${e}`,t.value=e,(i&&i.getPriority()===e||!i&&"low"===e)&&(t.checked=!0);const n=Pe.createText("label",[`label-${e}`],a(e));n.htmlFor=`${s}-${e}`,b.append(t,n)})),b.querySelector('input[value="low"]').required=!0;const y=Pe.createText("button",i?["edit-change-button"]:["create-add-button"],i?"Edit":"Add");y.type="submit",i?((e,t,o)=>{e.addEventListener("submit",(a=>{const i=r(e,"edit");a.preventDefault(),n();const s=o.getTitle();he.updateTask(t,s,...Object.values(i)),je.updateTaskCount();const c=document.querySelector(".project-name").textContent;ye.replaceSection(c)}))})(p,t,i):((e,t)=>{e.addEventListener("submit",(o=>{const a=r(e,"create");o.preventDefault(),n(),he.addTask(t,...Object.values(a),he.getIndexCount(t)),je.updateTaskCount();const i=document.querySelector(".project-name").textContent;ye.replaceSection(i)}))})(p,t),E.append(b,y),p.append(m,g,h,E),c.append(d,p),document.querySelector("main").append(c),o()},addExitHandler:t}})(),Ee=n.p+"icons/square-edit-outline.svg",ve=n.p+"icons/delete.svg",be=n.p+"icons/plus.svg",ye=(()=>{const e=e=>{const t=Pe.createText("section",["container-project"],""),a=Pe.createText("h1",["project-name"],e),i=Pe.createText("menu",["task-list"],"");if(t.append(a,i),he.isProjectEmpty(e))a.insertAdjacentElement("afterend",n());else{const t=he.getAllTasks(e);i.append(...t.map((e=>o(e))))}return["Today","This week","Important"].includes(e)||i.append(r()),t},t=()=>{const e=Pe.createText("section",["container-project"],""),t=Pe.createText("h1",["project-name"],"Select a project");return e.append(t),e},n=()=>Pe.createText("h2",["empty-task"],"It's quite empty here..."),o=e=>{const t=document.createElement("li"),n=Pe.createText("button",["task",`task-${e.getPriority()}`],"");i(n);const o=document.createElement("label");o.htmlFor=`checkbox${e.getIndex()}`;const r=Pe.createText("input",["task-checkbox"],"");r.type="checkbox",r.id=`checkbox${e.getIndex()}`,r.checked=e.getCompleted(),s(r);const a=Pe.createText("div",["checkbox-div"],"");o.append(r,a);const p=Pe.createText("h2",A(e.getCompleted()),e.getTitle()),m=Pe.createText("span",u(e.getDueDate()),l(e.getDueDate())),g=Pe.createImg(Ee,["task-icon","task-edit-button"],"Edit");c(g);const h=Pe.createImg(ve,["task-icon","task-trash-button"],"Trash");return d(h),n.append(o,p,m,g,h),t.append(n),t},r=()=>{const e=document.createElement("li"),t=Pe.createText("button",["task","add-task"],""),n=Pe.createImg(be,"","Add"),o=Pe.createText("span","","Add Task");return t.append(n,o),e.append(t),a(e),e},a=e=>{e.addEventListener("click",(()=>{const e=document.querySelector(".project-name").textContent;Ce.showCreateEditModal(e,null,"create")}))},i=e=>{e.addEventListener("click",(e=>{if(["task-checkbox","checkbox-div"].includes(e.target.className))return;const t=e.target.closest(".task").querySelector(".task-title").textContent,n=he.getProjectName(t);Ce.showViewModal(n,he.getTask(n,t))}))},s=e=>{e.addEventListener("click",(e=>{const t=e.target.closest(".task").querySelector(".task-title"),n=he.getProjectName(t.textContent);t.classList.toggle("completed"),he.toggleTaskCompleted(n,t.textContent)}))},c=e=>{e.addEventListener("click",(e=>{e.stopPropagation();const t=e.target.closest(".task").querySelector(".task-title").textContent,n=he.getProjectName(t);Ce.showCreateEditModal(n,he.getTask(n,t),"edit")}))},d=e=>{e.addEventListener("click",(e=>{e.stopPropagation();const t=e.target.closest(".task").querySelector(".task-title").textContent,n=he.getProjectName(t);Ce.showDeleteModal(n,t)}))},l=e=>e?le(new Date(e),"dd/MM/yyyy"):"-",A=e=>e?["task-title","completed"]:["task-title"],u=e=>function(e){return v(1,arguments),b(e).getTime()<Date.now()}(new Date(e))&&e?["task-date","expired"]:["task-date"];return{createSection:e,createEmptySection:t,removeTaskLi:e=>{e.remove();const t=document.querySelector(".project-name");he.isProjectEmpty(t.textContent)&&t.insertAdjacentElement("afterend",n())},replaceSection:n=>{n?document.querySelector(".container-project").replaceWith(e(n)):document.querySelector(".container-project").replaceWith(t())}}})(),Be=n.p+"icons/calendar-today.svg",we=n.p+"icons/calendar-week.svg",xe=n.p+"icons/calendar-alert.svg",ke=n.p+"icons/format-list-bulleted.svg",Te=n.p+"icons/close.svg",je=(()=>{const e=(e,t,n,r=null,a=null)=>{const i=document.createElement("li"),s=Pe.createText("button",e,"");return a?s.append(t,n,r,a):s.append(t,n,r),i.append(s),o(i),i},t=()=>{const e=document.createElement("li"),t=Pe.createText("button",["nav-button","add-project"],""),n=Pe.createImg(be,["nav-icon"],"Add"),o=Pe.createText("span",["nav-span"],"Add Project");return t.append(n,o),e.append(t),r(e),e},n=()=>{const e=Pe.createImg(Te,["nav-icon","project-delete"],"Delete");return a(e),e},o=e=>{e.addEventListener("click",(e=>{const t=document.querySelector(".selected");t&&t.classList.remove("selected");const n=e.target.closest(".nav-button");n.classList.add("selected");const o=n.querySelector(".nav-span").textContent;document.querySelector(".container-project").replaceWith(ye.createSection(o)),Pe.changeDocumentTitle()}))},r=e=>{e.addEventListener("click",(e=>{e.target.parentNode.remove(),document.querySelector(".nav-bottom").append((()=>{const e=Pe.createText("div",["container-add-project"],""),t=Pe.createText("input",["input-project"],"");t.type="text";const n=document.createElement("div"),o=Pe.createText("button",["project-add"],"Add");o.addEventListener("click",(()=>{i(t.value)})),t.addEventListener("keydown",(e=>{"Enter"===e.key&&i(t.value)}));const r=Pe.createText("button",["project-cancel"],"Cancel");return r.addEventListener("click",(()=>{s()})),t.addEventListener("keydown",(e=>{"Escape"===e.key&&s()})),n.append(o,r),e.append(t,n),e})()),document.querySelector(".input-project").focus()}))},a=e=>{e.addEventListener("click",(e=>{e.stopPropagation();const t=e.target.closest(".project").querySelector(".nav-span").textContent;Ce.showDeleteModal(t)}))},i=o=>{if(""===o)alert("Project name cannot be empty");else if(he.containsProject(o))alert("Project name already exists");else{he.addProject(o);const r=e(["nav-button","project"],Pe.createImg(ke,["nav-icon"],"List"),Pe.createText("span",["nav-span"],o),Pe.createText("span",["task-count"],""),n());document.querySelector(".container-add-project").remove(),document.querySelector(".nav-projects").append(r,t())}},s=()=>{document.querySelector(".container-add-project").remove(),document.querySelector(".nav-projects").append(t())},c=e=>{const t=he.getTaskCount(e);return 0===t?"":t.toString()};return{createNav:()=>{const o=document.createElement("nav"),r=Pe.createText("menu",["nav-top"],""),a=[e(["nav-button","project","selected"],Pe.createImg(Be,["nav-icon"],"Today"),Pe.createText("span",["nav-span"],"Today"),Pe.createText("span",["task-count"],c("Today"))),e(["nav-button","project"],Pe.createImg(we,["nav-icon"],"This week"),Pe.createText("span",["nav-span"],"This week"),Pe.createText("span",["task-count"],c("This week"))),e(["nav-button","project"],Pe.createImg(xe,["nav-icon"],"Important"),Pe.createText("span",["nav-span"],"Important"),Pe.createText("span",["task-count"],c("Important")))];r.append(...a);const i=Pe.createText("div",["nav-bottom"],""),s=Pe.createText("h1","","Projects"),d=Pe.createText("menu",["nav-projects"],""),l=he.getAllProjects().filter((e=>!["Today","This week","Important"].includes(e.getName()))).map((t=>e(["nav-button","project"],Pe.createImg(ke,["nav-icon"],"List"),Pe.createText("span",["nav-span"],t.getName()),Pe.createText("span",["task-count"],c(t.getName())),n())));return d.append(...l,t()),i.append(s,d),o.append(r,i),o},removeProjectLi:e=>{e.remove()},updateTaskCount:()=>{document.querySelectorAll(".project").forEach((e=>{const t=e.querySelector(".nav-span").textContent;e.querySelector(".task-count").textContent=c(t)}))}}})(),Pe=(()=>{const e=(e,t,n)=>{const o=document.createElement(e);return o.classList.add(...t),o.textContent=n,o},t=()=>{const e=document.querySelector(".project-name").textContent;document.title=e?`${e} - Todo List`:"Todo List"};return{initialize:()=>{(()=>{const e=document.createElement("link");e.href="https://chiefwoods.github.io/footer-template/template.css",e.rel="stylesheet",e.type="text/css",document.head.appendChild(e)})(),he.updateAllProjects();const n=document.createElement("main"),o=je.createNav(),r=ye.createSection("Today"),a=e("div",["overlay"],"");Ce.addExitHandler(a),n.append(o,r,a),document.body.append(h(),n,C()),t()},createText:e,createImg:(e,t,n)=>{const o=document.createElement("img");return o.src=e,o.classList.add(...t),o.alt=n,o},changeDocumentTitle:t}})();Pe.initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU1BLEVBQ1ZlLEVBQUkyYixVQUFVK0QsT0FBT2hCLEdBQ3JCMWUsRUFBSW1oQixJQUFNQSxFQUVIbmhCLENBQUcsRUFvQlY0YixzQkFFSCxFQXREbUIsR0NKcEI5YixHQUFLNmdCLFkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdHlsZXMuY3NzPzQ0YjIiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvSGVhZGVyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL0Zvb3Rlci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2NsYXNzZXMvVGFzay5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY2xhc3Nlcy9Qcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNUb2RheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzU2FtZURheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVGhpc1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1NhbWVXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2FkZERheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2NsYXNzZXMvVG9kb0xpc3QuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9jb21wYXJlQXNjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jbGFzc2VzL1N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvRGlhbG9nLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1Bhc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2NvbXBvbmVudHMvTmF2LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jb21wb25lbnRzL01haW4uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCJmb250cy9QYWNpZmljby9QYWNpZmljby1SZWd1bGFyLnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcImZvbnRzL0hlZWJvL0hlZWJvLVZhcmlhYmxlRm9udF93Z2h0LnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYEBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogUGFjaWZpY287XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pIGZvcm1hdCgndHJ1ZXR5cGUnKTtcbn1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiBIZWVibztcbiAgc3JjOiB1cmwoJHtfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19ffSkgZm9ybWF0KCd0cnVldHlwZScpO1xufVxuXG46cm9vdCB7XG4gIC0tdGFpbHdpbmQtc2t5LTUwOiAjZjBmOWZmO1xuICAtLXRhaWx3aW5kLXNreS0yMDA6ICNiYWU2ZmQ7XG4gIC0tdGFpbHdpbmQtc2t5LTQwMDogIzM4YmRmODtcbiAgLS10YWlsd2luZC1za3ktNTAwOiAjMGVhNWU5O1xuICAtLWRlbGV0ZS1yZWQ6ICNlZjQ0NDQ7XG4gIC0tcHJpb3JpdHktbG93LWdyZWVuOiAjNGFkZTgwO1xuICAtLXByaW9yaXR5LW1lZGl1bS15ZWxsb3c6ICNmZGUwNDc7XG4gIC0tcHJpb3JpdHktaGlnaC1yZWQ6ICNlZjQ0NDQ7XG59XG5cbi8qIEhlYWRlciAqL1xuXG5oZWFkZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10YWlsd2luZC1za3ktNDAwKTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAxMHB4O1xuICBwYWRkaW5nOiA3cHggMjBweDtcbn1cblxuLmNvbnRhaW5lci1oZWFkZXIge1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogNXB4O1xuICBtaW4td2lkdGg6IG1heC1jb250ZW50O1xufVxuXG4ubG9nbyB7XG4gIGhlaWdodDogNTJweDtcbn1cblxuLmxvZ28tdGl0bGUge1xuICBmb250LWZhbWlseTogUGFjaWZpY28sIGN1cnNpdmU7XG4gIGZvbnQtc2l6ZTogNC41cmVtO1xuICBjb2xvcjogd2hpdGU7XG59XG5cbm1haW4ge1xuICBmbGV4OiAxO1xuICBkaXNwbGF5OiBmbGV4O1xufVxuXG4vKiBOYXYgKi9cblxubmF2IHtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTUwKTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZmxleC1iYXNpczogMzAwcHg7XG4gIHBhZGRpbmc6IDIycHg7XG4gIGdhcDogMjVweDtcbn1cblxuLm5hdi10b3Age1xuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGdhcDogNXB4O1xufVxuXG4ubmF2LWJ1dHRvbiB7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA2cHggMTRweDtcbiAgZ2FwOiA5cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgaGVpZ2h0OiA0MHB4O1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIG1pbi13aWR0aDogbWF4LWNvbnRlbnQ7XG59XG5cbi5uYXYtYnV0dG9uOmhvdmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDIyOCwgMjI4LCAyMjgpO1xufVxuXG4uc2VsZWN0ZWQsXG4uc2VsZWN0ZWQ6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10YWlsd2luZC1za3ktMjAwKTtcbn1cblxuLnNlbGVjdGVkID4gLm5hdi1zcGFuIHtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbn1cblxuLm5hdi1pY29uIHtcbiAgaGVpZ2h0OiAxNnB4O1xufVxuXG4ubmF2LXNwYW4ge1xuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMS42cmVtO1xuICBmb250LXdlaWdodDogNDAwO1xufVxuXG4ubmF2LWJvdHRvbSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGdhcDogNXB4O1xufVxuXG4ubmF2LWJvdHRvbSA+IGgxIHtcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDIuNXJlbTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbWFyZ2luLWxlZnQ6IDVweDtcbn1cblxuLm5hdi1wcm9qZWN0cyB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiA1cHg7XG59XG5cbi5uYXYtYnV0dG9uOmhvdmVyIC5wcm9qZWN0LWRlbGV0ZXtcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbn1cblxuLnRhc2stY291bnQge1xuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMS4ycmVtO1xuICBmb250LXdlaWdodDogNDAwO1xuICBjb2xvcjogZ3JheTtcbn1cblxuLnByb2plY3QtZGVsZXRlIHtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcbn1cblxuLnByb2plY3QtZGVsZXRlOmhvdmVyIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjMpO1xufVxuXG4uYWRkLXByb2plY3QgPiAubmF2LXNwYW4ge1xuICBmb250LXdlaWdodDogNTAwO1xufVxuXG4uaW5wdXQtcHJvamVjdCB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiA2cHggMTJweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMS42cmVtO1xuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xufVxuXG4uY29udGFpbmVyLWFkZC1wcm9qZWN0ID4gZGl2IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAyMHB4O1xufVxuXG4ucHJvamVjdC1hZGQsXG4ucHJvamVjdC1jYW5jZWwge1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDQwcHg7XG4gIGZvbnQtZmFtaWx5OiBIZWVibywgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxLjhyZW07XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGJvcmRlci1yYWRpdXM6IDZweDtcbn1cblxuLnByb2plY3QtYWRkIHtcbiAgYm9yZGVyOiAzcHggc29saWQgdmFyKC0tdGFpbHdpbmQtc2t5LTQwMCk7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRhaWx3aW5kLXNreS00MDApO1xuICBjb2xvcjogd2hpdGU7XG59XG5cbi5wcm9qZWN0LWFkZDpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBjb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTQwMCk7XG59XG5cbi5wcm9qZWN0LWNhbmNlbCB7XG4gIGJvcmRlcjogM3B4IHNvbGlkIGxpZ2h0Z3JleTtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGNvbG9yOiBsaWdodGdyZXk7XG59XG5cbi5wcm9qZWN0LWNhbmNlbDpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JleTtcbiAgY29sb3I6IHdoaXRlO1xufVxuXG4vKiBTZWN0aW9uICovXG5cbi5jb250YWluZXItcHJvamVjdCB7XG4gIG92ZXJmbG93LXk6IGF1dG87XG4gIHdpZHRoOiA2MCU7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAyMHB4IDIwcHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5wcm9qZWN0LW5hbWUge1xuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMy4ycmVtO1xuICBmb250LXdlaWdodDogNjAwO1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xufVxuXG4vKiBUYXNrICovXG5cbi50YXNrLWxpc3Qge1xuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGdhcDogOHB4O1xuICBtaW4td2lkdGg6IG1heC1jb250ZW50O1xufVxuXG4udGFzayB7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBwYWRkaW5nOiA4cHggMTJweDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjNmNGY2O1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDVweCAwcHggMHB4IDVweDtcbn1cblxuLnRhc2s6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTVlN2ViO1xufVxuXG4udGFzay1oaWdoIHtcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCB2YXIoLS1wcmlvcml0eS1oaWdoLXJlZCk7XG59XG5cbi50YXNrLW1lZGl1bSB7XG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdmFyKC0tcHJpb3JpdHktbWVkaXVtLXllbGxvdyk7XG59XG5cbi50YXNrLWxvdyB7XG4gIGJvcmRlci1sZWZ0OiA2cHggc29saWQgdmFyKC0tcHJpb3JpdHktbG93LWdyZWVuKTtcbn1cblxuLnRhc2stY2hlY2tib3gge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4uY2hlY2tib3gtZGl2IHtcbiAgd2lkdGg6IDIwcHg7XG4gIGhlaWdodDogMjBweDtcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmNoZWNrYm94LWRpdjo6YWZ0ZXIge1xuICBjb250ZW50OiAnXFxcXDI3MTQnO1xuICBjb2xvcjogI2YzZjRmNjtcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnM7XG59XG5cbi50YXNrLWNoZWNrYm94OmNoZWNrZWQgKyAuY2hlY2tib3gtZGl2IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XG59XG5cbi50YXNrLWNoZWNrYm94OmNoZWNrZWQgKyAuY2hlY2tib3gtZGl2OjphZnRlciB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMS4yNSk7XG59XG5cbi50YXNrLXRpdGxlIHtcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuOHJlbTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgcGFkZGluZzogMHB4IDEycHg7XG59XG5cbi5jb21wbGV0ZWQge1xuICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDtcbn1cblxuLnRhc2stZGF0ZSB7XG4gIGZvbnQtZmFtaWx5OiBIZWVibywgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxLjVyZW07XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBwYWRkaW5nOiAwcHggMTVweDtcbn1cblxuLmV4cGlyZWQge1xuICBmb250LXdlaWdodDogNjAwO1xuICBjb2xvcjogcmVkO1xufVxuXG4udGFzay1lZGl0LWJ1dHRvbixcbi50YXNrLXRyYXNoLWJ1dHRvbiB7XG4gIHBhZGRpbmc6IDBweCA4cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgaGVpZ2h0OiAyMnB4O1xufVxuXG4udGFzay1lZGl0LWJ1dHRvbjpob3Zlcixcbi50YXNrLXRyYXNoLWJ1dHRvbjpob3ZlciB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMS4xNSk7XG59XG5cbi5hZGQtdGFzayB7XG4gIHBhZGRpbmctbGVmdDogMTZweDtcbn1cblxuLmFkZC10YXNrID4gaW1nIHtcbiAgaGVpZ2h0OiAyMnB4O1xufVxuXG4uYWRkLXRhc2sgPiBzcGFuIHtcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuOHJlbTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgcGFkZGluZzogMHB4IDEycHg7XG59XG5cbi5lbXB0eS10YXNrIHtcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuOHJlbTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbn1cblxuLyogT3ZlcmxheSAqL1xuXG4ub3ZlcmxheSB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiA1O1xuICB3aWR0aDogMTAwdnc7XG4gIGhlaWdodDogMTAwdmg7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNSk7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qIENyZWF0ZSAqL1xuXG4ubW9kYWwtY3JlYXRlLFxuLm1vZGFsLWVkaXQsXG4ubW9kYWwtZGVsZXRlLFxuLm1vZGFsLXZpZXcge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICBib3JkZXI6IDBweDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICB6LWluZGV4OiAxMDtcbn1cblxuLm1vZGFsLWNyZWF0ZSxcbi5tb2RhbC1lZGl0IHtcbiAgd2lkdGg6IDQwdnc7XG4gIG1pbi13aWR0aDogNDAwcHg7XG59XG5cbi5tb2RhbC1jcmVhdGU6OmJhY2tkcm9wLFxuLm1vZGFsLWVkaXQ6OmJhY2tkcm9wIHtcbiAgYmFja2dyb3VuZDogYmxhY2s7XG4gIG9wYWNpdHk6IDAuMztcbn1cblxuLm1vZGFsLWNyZWF0ZS10b3AsXG4ubW9kYWwtZWRpdC10b3AsXG4ubW9kYWwtZGVsZXRlLXRvcCxcbi5tb2RhbC12aWV3LXRvcCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRhaWx3aW5kLXNreS01MDApO1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG5cbi5tb2RhbC1jcmVhdGUtdG9wID4gc3Bhbixcbi5tb2RhbC1lZGl0LXRvcCA+IHNwYW4sXG4ubW9kYWwtZGVsZXRlLXRvcCA+IHNwYW4sXG4udmlldy10aXRsZSB7XG4gIGZvbnQtZmFtaWx5OiBIZWVibywgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAyLjhyZW07XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgcGFkZGluZy1sZWZ0OiA1cHg7XG59XG5cbi5tb2RhbC1jcmVhdGUtdG9wID4gYnV0dG9uLFxuLm1vZGFsLWVkaXQtdG9wID4gYnV0dG9uLFxuLm1vZGFsLWRlbGV0ZS10b3AgPiBidXR0b24sXG4ubW9kYWwtdmlldy10b3AgPiBidXR0b24ge1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBib3JkZXI6IG5vbmU7XG59XG5cbi5leGl0LWJ1dHRvbiB7XG4gIHdpZHRoOiAzNXB4O1xuICBhc3BlY3QtcmF0aW86IDEgLyAxO1xufVxuXG4ubW9kYWwtY3JlYXRlLWJvdHRvbSxcbi5tb2RhbC1lZGl0LWJvdHRvbSxcbi5tb2RhbC1kZWxldGUtYm90dG9tIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgcGFkZGluZzogMThweDtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgZ2FwOiAxNXB4O1xufVxuXG4uY3JlYXRlLXRhc2stdGl0bGUsXG4uZWRpdC10YXNrLXRpdGxlIHtcbiAgYm9yZGVyOiBub25lO1xuICBvdXRsaW5lOiBub25lO1xuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMS42cmVtO1xuICBmb250LXdlaWdodDogNTAwO1xufVxuXG4uY3JlYXRlLXRhc2stdGl0bGU6OnBsYWNlaG9sZGVyLFxuLmNyZWF0ZS10YXNrLWRlc2M6OnBsYWNlaG9sZGVyLFxuLmVkaXQtdGFzay10aXRsZTo6cGxhY2Vob2xkZXIsXG4uZWRpdC10YXNrLWRlc2M6OnBsYWNlaG9sZGVyIHtcbiAgZm9udC1zaXplOiAxLjRyZW07XG4gIGNvbG9yOiBncmF5O1xufVxuXG4uY3JlYXRlLXRhc2stZGVzYyxcbi5lZGl0LXRhc2stZGVzYyB7XG4gIGJvcmRlcjogbm9uZTtcbiAgb3V0bGluZTogbm9uZTtcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuNnJlbTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgaGVpZ2h0OiAxMDBweDtcbiAgcmVzaXplOiBub25lO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLmNvbnRhaW5lci1kYXRlIHtcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuOHJlbTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6IHZhcigtLXRhaWx3aW5kLXNreS01MDApO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG5sYWJlbFtmb3I9XCJjcmVhdGUtdGFzay1kYXRlXCJdLFxubGFiZWxbZm9yPVwiZWRpdC10YXNrLWRhdGVcIl0ge1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG59XG5cbiNjcmVhdGUtdGFzay1kYXRlLFxuI2VkaXQtdGFzay1kYXRlIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XG4gIGJvcmRlcjogbm9uZTtcbiAgb3V0bGluZTogbm9uZTtcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuNnJlbTtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6IHdoaXRlO1xuICBwYWRkaW5nOiAycHggOHB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG59XG5cbjo6LXdlYmtpdC1jYWxlbmRhci1waWNrZXItaW5kaWNhdG9yIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmaWx0ZXI6IGludmVydCgxKTtcbn1cblxuLmNvbnRhaW5lci1wcmlvcml0eSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHdpZHRoOiAxMDAlO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4uY29udGFpbmVyLXByaW9yaXR5ID4gc3BhbiB7XG4gIGZvbnQtZmFtaWx5OiBIZWVibywgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxLjhyZW07XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGNvbG9yOiB2YXIoLS10YWlsd2luZC1za3ktNTAwKTtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xufVxuXG4uY29udGFpbmVyLXByaW9yaXR5LWxldmVsID4gaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgd2lkdGg6IDFweDtcbiAgaGVpZ2h0OiAxcHg7XG59XG5cbi5jb250YWluZXItcHJpb3JpdHktbGV2ZWwgPiBsYWJlbCB7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuNnJlbTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgcGFkZGluZzogMnB4IDhweDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG59XG5cbi5jb250YWluZXItcHJpb3JpdHktbGV2ZWwgPiBsYWJlbDpob3ZlcixcbmlucHV0W25hbWU9XCJjcmVhdGUtdGFzay1wcmlvcml0eVwiXTpjaGVja2VkICsgbGFiZWwsXG5pbnB1dFtuYW1lPVwiZWRpdC10YXNrLXByaW9yaXR5XCJdOmNoZWNrZWQgKyBsYWJlbCB7XG4gIGNvbG9yOiB3aGl0ZTtcbn1cblxuLmxhYmVsLWxvdyB7XG4gIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLXByaW9yaXR5LWxvdy1ncmVlbik7XG4gIGNvbG9yOiB2YXIoLS1wcmlvcml0eS1sb3ctZ3JlZW4pO1xufVxuXG4ubGFiZWwtbG93OmhvdmVyLFxuaW5wdXRbdmFsdWU9XCJsb3dcIl06Y2hlY2tlZCArIGxhYmVsIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpb3JpdHktbG93LWdyZWVuKTtcbn1cblxuLmxhYmVsLW1lZGl1bSB7XG4gIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLXByaW9yaXR5LW1lZGl1bS15ZWxsb3cpO1xuICBjb2xvcjogdmFyKC0tcHJpb3JpdHktbWVkaXVtLXllbGxvdyk7XG59XG5cbi5sYWJlbC1tZWRpdW06aG92ZXIsXG5pbnB1dFt2YWx1ZT1cIm1lZGl1bVwiXTpjaGVja2VkICsgbGFiZWwge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmlvcml0eS1tZWRpdW0teWVsbG93KTtcbn1cblxuLmxhYmVsLWhpZ2gge1xuICBib3JkZXI6IDNweCBzb2xpZCB2YXIoLS1wcmlvcml0eS1oaWdoLXJlZCk7XG4gIGNvbG9yOiB2YXIoLS1wcmlvcml0eS1oaWdoLXJlZCk7XG59XG5cbi5sYWJlbC1oaWdoOmhvdmVyLFxuaW5wdXRbdmFsdWU9XCJoaWdoXCJdOmNoZWNrZWQgKyBsYWJlbCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW9yaXR5LWhpZ2gtcmVkKTtcbn1cblxuLmNyZWF0ZS1hZGQtYnV0dG9uLFxuLmVkaXQtY2hhbmdlLWJ1dHRvbiB7XG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGZvbnQtZmFtaWx5OiBIZWVibywgc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxLjZyZW07XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIHBhZGRpbmc6IDNweCAxMnB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLXRhaWx3aW5kLXNreS01MDApO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10YWlsd2luZC1za3ktNTAwKTtcbiAgY29sb3I6IHdoaXRlO1xuICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcbn1cblxuLmNyZWF0ZS1hZGQtYnV0dG9uOmhvdmVyLFxuLmVkaXQtY2hhbmdlLWJ1dHRvbjpob3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBjb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XG59XG5cbi8qIERlbGV0ZSAqL1xuXG4ubW9kYWwtZGVsZXRlLFxuLm1vZGFsLXZpZXcge1xuICB3aWR0aDogMzB2dztcbiAgbWluLXdpZHRoOiAyNTBweDtcbn1cblxuLm1vZGFsLWRlbGV0ZTo6YmFja2Ryb3AsXG4ubW9kYWwtdmlldzo6YmFja2Ryb3Age1xuICBiYWNrZ3JvdW5kOiBibGFjaztcbiAgb3BhY2l0eTogMC4zO1xufVxuXG4ubW9kYWwtZGVsZXRlLWJvdHRvbSB7XG4gIGdhcDogMzVweDtcbn1cblxuLm1vZGFsLWRlbGV0ZS1ib3R0b20gPiBzcGFuLFxuLnZpZXctZGVzYyxcbi52aWV3LXByb2plY3QsXG4udmlldy1kYXRlLFxuLnZpZXctcHJpb3JpdHkge1xuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMS44cmVtO1xuICBmb250LXdlaWdodDogNTAwO1xuICBjb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XG59XG5cbi5jb250YWluZXItY29uZmlybSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gIGdhcDogMjBweDtcbn1cblxuLmNvbnRhaW5lci1jb25maXJtID4gYnV0dG9uIHtcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuNnJlbTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgcGFkZGluZzogM3B4IDEycHg7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgY29sb3I6IHdoaXRlO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5kZWxldGUtY29uZmlybS1idXR0b24ge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1kZWxldGUtcmVkKTtcbiAgYm9yZGVyOiAzcHggc29saWQgdmFyKC0tZGVsZXRlLXJlZCk7XG59XG5cbi5kZWxldGUtY29uZmlybS1idXR0b246aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgY29sb3I6IHZhcigtLWRlbGV0ZS1yZWQpO1xufVxuXG4vKiBWaWV3ICovXG5cbi5tb2RhbC12aWV3LWJvdHRvbSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIHBhZGRpbmc6IDE4cHg7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi52aWV3LWRlc2Mge1xuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xufVxuXG4udmlldy1sb3cge1xuICBjb2xvcjogdmFyKC0tcHJpb3JpdHktbG93LWdyZWVuKTtcbn1cblxuLnZpZXctbWVkaXVtIHtcbiAgY29sb3I6IHZhcigtLXByaW9yaXR5LW1lZGl1bS15ZWxsb3cpO1xufVxuXG4udmlldy1oaWdoIHtcbiAgY29sb3I6IHZhcigtLXByaW9yaXR5LWhpZ2gtcmVkKTtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7XG4gIG1haW4ge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cblxuICBuYXYge1xuICAgIGZsZXgtYmFzaXM6IDE3MHB4O1xuICB9XG5cbiAgLmNvbnRhaW5lci1wcm9qZWN0IHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZy1pbmxpbmU6IDMwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxxQkFBcUI7RUFDckIsK0RBQWdFO0FBQ2xFOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLCtEQUFvRTtBQUN0RTs7QUFFQTtFQUNFLDBCQUEwQjtFQUMxQiwyQkFBMkI7RUFDM0IsMkJBQTJCO0VBQzNCLDJCQUEyQjtFQUMzQixxQkFBcUI7RUFDckIsNkJBQTZCO0VBQzdCLGlDQUFpQztFQUNqQyw0QkFBNEI7QUFDOUI7O0FBRUEsV0FBVzs7QUFFWDtFQUNFLHlDQUF5QztFQUN6QyxhQUFhO0VBQ2IsbUJBQW1CO0VBQ25CLFNBQVM7RUFDVCxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixRQUFRO0VBQ1Isc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUVBO0VBQ0UsOEJBQThCO0VBQzlCLGlCQUFpQjtFQUNqQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxPQUFPO0VBQ1AsYUFBYTtBQUNmOztBQUVBLFFBQVE7O0FBRVI7RUFDRSxnQkFBZ0I7RUFDaEIsd0NBQXdDO0VBQ3hDLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsaUJBQWlCO0VBQ2pCLGFBQWE7RUFDYixTQUFTO0FBQ1g7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixRQUFRO0FBQ1Y7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixpQkFBaUI7RUFDakIsUUFBUTtFQUNSLGVBQWU7RUFDZixZQUFZO0VBQ1osWUFB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QixlQUFlO0VBQ2YsOEJBQThCO0VBQzlCLGlCQUFpQjtFQUNqQixnQkFBZ0I7RUFDaEIsaUJBQWlCO0VBQ2pCLGtCQUFrQjtFQUNsQix5Q0FBeUM7RUFDekMseUNBQXlDO0VBQ3pDLFlBQVk7RUFDWixvQkFBb0I7QUFDdEI7O0FBRUE7O0VBRUUsdUJBQXVCO0VBQ3ZCLDhCQUE4QjtBQUNoQzs7QUFFQSxXQUFXOztBQUVYOztFQUVFLFdBQVc7RUFDWCxnQkFBZ0I7QUFDbEI7O0FBRUE7O0VBRUUsaUJBQWlCO0VBQ2pCLFlBQVk7QUFDZDs7QUFFQTtFQUNFLFNBQVM7QUFDWDs7QUFFQTs7Ozs7RUFLRSw4QkFBOEI7RUFDOUIsaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQiw4QkFBOEI7QUFDaEM7O0FBRUE7RUFDRSxhQUFhO0VBQ2IseUJBQXlCO0VBQ3pCLFNBQVM7QUFDWDs7QUFFQTtFQUNFLDhCQUE4QjtFQUM5QixpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxtQ0FBbUM7RUFDbkMsbUNBQW1DO0FBQ3JDOztBQUVBO0VBQ0UsdUJBQXVCO0VBQ3ZCLHdCQUF3QjtBQUMxQjs7QUFFQSxTQUFTOztBQUVUO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixhQUFhO0VBQ2IsWUFBWTtFQUNaLFdBQVc7QUFDYjs7QUFFQTtFQUNFLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGdDQUFnQztBQUNsQzs7QUFFQTtFQUNFLG9DQUFvQztBQUN0Qzs7QUFFQTtFQUNFLCtCQUErQjtBQUNqQzs7QUFFQTtFQUNFO0lBQ0Usc0JBQXNCO0VBQ3hCOztFQUVBO0lBQ0UsaUJBQWlCO0VBQ25COztFQUVBO0lBQ0UsU0FBUztJQUNULG9CQUFvQjtJQUNwQixXQUFXO0VBQ2I7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBQYWNpZmljbztcXG4gIHNyYzogdXJsKGZvbnRzL1BhY2lmaWNvL1BhY2lmaWNvLVJlZ3VsYXIudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxufVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvO1xcbiAgc3JjOiB1cmwoZm9udHMvSGVlYm8vSGVlYm8tVmFyaWFibGVGb250X3dnaHQudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyk7XFxufVxcblxcbjpyb290IHtcXG4gIC0tdGFpbHdpbmQtc2t5LTUwOiAjZjBmOWZmO1xcbiAgLS10YWlsd2luZC1za3ktMjAwOiAjYmFlNmZkO1xcbiAgLS10YWlsd2luZC1za3ktNDAwOiAjMzhiZGY4O1xcbiAgLS10YWlsd2luZC1za3ktNTAwOiAjMGVhNWU5O1xcbiAgLS1kZWxldGUtcmVkOiAjZWY0NDQ0O1xcbiAgLS1wcmlvcml0eS1sb3ctZ3JlZW46ICM0YWRlODA7XFxuICAtLXByaW9yaXR5LW1lZGl1bS15ZWxsb3c6ICNmZGUwNDc7XFxuICAtLXByaW9yaXR5LWhpZ2gtcmVkOiAjZWY0NDQ0O1xcbn1cXG5cXG4vKiBIZWFkZXIgKi9cXG5cXG5oZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTQwMCk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMTBweDtcXG4gIHBhZGRpbmc6IDdweCAyMHB4O1xcbn1cXG5cXG4uY29udGFpbmVyLWhlYWRlciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogNXB4O1xcbiAgbWluLXdpZHRoOiBtYXgtY29udGVudDtcXG59XFxuXFxuLmxvZ28ge1xcbiAgaGVpZ2h0OiA1MnB4O1xcbn1cXG5cXG4ubG9nby10aXRsZSB7XFxuICBmb250LWZhbWlseTogUGFjaWZpY28sIGN1cnNpdmU7XFxuICBmb250LXNpemU6IDQuNXJlbTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxubWFpbiB7XFxuICBmbGV4OiAxO1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLyogTmF2ICovXFxuXFxubmF2IHtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10YWlsd2luZC1za3ktNTApO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LWJhc2lzOiAzMDBweDtcXG4gIHBhZGRpbmc6IDIycHg7XFxuICBnYXA6IDI1cHg7XFxufVxcblxcbi5uYXYtdG9wIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiA1cHg7XFxufVxcblxcbi5uYXYtYnV0dG9uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiA2cHggMTRweDtcXG4gIGdhcDogOXB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBtaW4td2lkdGg6IG1heC1jb250ZW50O1xcbn1cXG5cXG4ubmF2LWJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjI4LCAyMjgsIDIyOCk7XFxufVxcblxcbi5zZWxlY3RlZCxcXG4uc2VsZWN0ZWQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTIwMCk7XFxufVxcblxcbi5zZWxlY3RlZCA+IC5uYXYtc3BhbiB7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4ubmF2LWljb24ge1xcbiAgaGVpZ2h0OiAxNnB4O1xcbn1cXG5cXG4ubmF2LXNwYW4ge1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjZyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbn1cXG5cXG4ubmF2LWJvdHRvbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogNXB4O1xcbn1cXG5cXG4ubmF2LWJvdHRvbSA+IGgxIHtcXG4gIGZvbnQtZmFtaWx5OiBIZWVibywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMi41cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIG1hcmdpbi1sZWZ0OiA1cHg7XFxufVxcblxcbi5uYXYtcHJvamVjdHMge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDVweDtcXG59XFxuXFxuLm5hdi1idXR0b246aG92ZXIgLnByb2plY3QtZGVsZXRle1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG59XFxuXFxuLnRhc2stY291bnQge1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjJyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgY29sb3I6IGdyYXk7XFxufVxcblxcbi5wcm9qZWN0LWRlbGV0ZSB7XFxuICBtYXJnaW4tbGVmdDogYXV0bztcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuXFxuLnByb2plY3QtZGVsZXRlOmhvdmVyIHtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMS4zKTtcXG59XFxuXFxuLmFkZC1wcm9qZWN0ID4gLm5hdi1zcGFuIHtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcblxcbi5pbnB1dC1wcm9qZWN0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogNnB4IDEycHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDEuNnJlbTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbiAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG59XFxuXFxuLmNvbnRhaW5lci1hZGQtcHJvamVjdCA+IGRpdiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiAyMHB4O1xcbn1cXG5cXG4ucHJvamVjdC1hZGQsXFxuLnByb2plY3QtY2FuY2VsIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjhyZW07XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbn1cXG5cXG4ucHJvamVjdC1hZGQge1xcbiAgYm9yZGVyOiAzcHggc29saWQgdmFyKC0tdGFpbHdpbmQtc2t5LTQwMCk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10YWlsd2luZC1za3ktNDAwKTtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLnByb2plY3QtYWRkOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY29sb3I6IHZhcigtLXRhaWx3aW5kLXNreS00MDApO1xcbn1cXG5cXG4ucHJvamVjdC1jYW5jZWwge1xcbiAgYm9yZGVyOiAzcHggc29saWQgbGlnaHRncmV5O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBjb2xvcjogbGlnaHRncmV5O1xcbn1cXG5cXG4ucHJvamVjdC1jYW5jZWw6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmV5O1xcbiAgY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4vKiBTZWN0aW9uICovXFxuXFxuLmNvbnRhaW5lci1wcm9qZWN0IHtcXG4gIG92ZXJmbG93LXk6IGF1dG87XFxuICB3aWR0aDogNjAlO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBwYWRkaW5nOiAyMHB4IDIwcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLnByb2plY3QtbmFtZSB7XFxuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDMuMnJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbiAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcXG59XFxuXFxuLyogVGFzayAqL1xcblxcbi50YXNrLWxpc3Qge1xcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDhweDtcXG4gIG1pbi13aWR0aDogbWF4LWNvbnRlbnQ7XFxufVxcblxcbi50YXNrIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiA4cHggMTJweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmM2Y0ZjY7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA1cHggMHB4IDBweCA1cHg7XFxufVxcblxcbi50YXNrOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNWU3ZWI7XFxufVxcblxcbi50YXNrLWhpZ2gge1xcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCB2YXIoLS1wcmlvcml0eS1oaWdoLXJlZCk7XFxufVxcblxcbi50YXNrLW1lZGl1bSB7XFxuICBib3JkZXItbGVmdDogNnB4IHNvbGlkIHZhcigtLXByaW9yaXR5LW1lZGl1bS15ZWxsb3cpO1xcbn1cXG5cXG4udGFzay1sb3cge1xcbiAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCB2YXIoLS1wcmlvcml0eS1sb3ctZ3JlZW4pO1xcbn1cXG5cXG4udGFzay1jaGVja2JveCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uY2hlY2tib3gtZGl2IHtcXG4gIHdpZHRoOiAyMHB4O1xcbiAgaGVpZ2h0OiAyMHB4O1xcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uY2hlY2tib3gtZGl2OjphZnRlciB7XFxuICBjb250ZW50OiAnXFxcXDI3MTQnO1xcbiAgY29sb3I6ICNmM2Y0ZjY7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDApO1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuMnM7XFxufVxcblxcbi50YXNrLWNoZWNrYm94OmNoZWNrZWQgKyAuY2hlY2tib3gtZGl2IHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXRhaWx3aW5kLXNreS01MDApO1xcbn1cXG5cXG4udGFzay1jaGVja2JveDpjaGVja2VkICsgLmNoZWNrYm94LWRpdjo6YWZ0ZXIge1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjI1KTtcXG59XFxuXFxuLnRhc2stdGl0bGUge1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjhyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgcGFkZGluZzogMHB4IDEycHg7XFxufVxcblxcbi5jb21wbGV0ZWQge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XFxufVxcblxcbi50YXNrLWRhdGUge1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjVyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBwYWRkaW5nOiAwcHggMTVweDtcXG59XFxuXFxuLmV4cGlyZWQge1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGNvbG9yOiByZWQ7XFxufVxcblxcbi50YXNrLWVkaXQtYnV0dG9uLFxcbi50YXNrLXRyYXNoLWJ1dHRvbiB7XFxuICBwYWRkaW5nOiAwcHggOHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgaGVpZ2h0OiAyMnB4O1xcbn1cXG5cXG4udGFzay1lZGl0LWJ1dHRvbjpob3ZlcixcXG4udGFzay10cmFzaC1idXR0b246aG92ZXIge1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjE1KTtcXG59XFxuXFxuLmFkZC10YXNrIHtcXG4gIHBhZGRpbmctbGVmdDogMTZweDtcXG59XFxuXFxuLmFkZC10YXNrID4gaW1nIHtcXG4gIGhlaWdodDogMjJweDtcXG59XFxuXFxuLmFkZC10YXNrID4gc3BhbiB7XFxuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDEuOHJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBwYWRkaW5nOiAwcHggMTJweDtcXG59XFxuXFxuLmVtcHR5LXRhc2sge1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjhyZW07XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcXG59XFxuXFxuLyogT3ZlcmxheSAqL1xcblxcbi5vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB6LWluZGV4OiA1O1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4vKiBDcmVhdGUgKi9cXG5cXG4ubW9kYWwtY3JlYXRlLFxcbi5tb2RhbC1lZGl0LFxcbi5tb2RhbC1kZWxldGUsXFxuLm1vZGFsLXZpZXcge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA1MCU7XFxuICBsZWZ0OiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIGJvcmRlcjogMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgei1pbmRleDogMTA7XFxufVxcblxcbi5tb2RhbC1jcmVhdGUsXFxuLm1vZGFsLWVkaXQge1xcbiAgd2lkdGg6IDQwdnc7XFxuICBtaW4td2lkdGg6IDQwMHB4O1xcbn1cXG5cXG4ubW9kYWwtY3JlYXRlOjpiYWNrZHJvcCxcXG4ubW9kYWwtZWRpdDo6YmFja2Ryb3Age1xcbiAgYmFja2dyb3VuZDogYmxhY2s7XFxuICBvcGFjaXR5OiAwLjM7XFxufVxcblxcbi5tb2RhbC1jcmVhdGUtdG9wLFxcbi5tb2RhbC1lZGl0LXRvcCxcXG4ubW9kYWwtZGVsZXRlLXRvcCxcXG4ubW9kYWwtdmlldy10b3Age1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHBhZGRpbmc6IDEwcHg7XFxufVxcblxcbi5tb2RhbC1jcmVhdGUtdG9wID4gc3BhbixcXG4ubW9kYWwtZWRpdC10b3AgPiBzcGFuLFxcbi5tb2RhbC1kZWxldGUtdG9wID4gc3BhbixcXG4udmlldy10aXRsZSB7XFxuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDIuOHJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBjb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nLWxlZnQ6IDVweDtcXG59XFxuXFxuLm1vZGFsLWNyZWF0ZS10b3AgPiBidXR0b24sXFxuLm1vZGFsLWVkaXQtdG9wID4gYnV0dG9uLFxcbi5tb2RhbC1kZWxldGUtdG9wID4gYnV0dG9uLFxcbi5tb2RhbC12aWV3LXRvcCA+IGJ1dHRvbiB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJvcmRlcjogbm9uZTtcXG59XFxuXFxuLmV4aXQtYnV0dG9uIHtcXG4gIHdpZHRoOiAzNXB4O1xcbiAgYXNwZWN0LXJhdGlvOiAxIC8gMTtcXG59XFxuXFxuLm1vZGFsLWNyZWF0ZS1ib3R0b20sXFxuLm1vZGFsLWVkaXQtYm90dG9tLFxcbi5tb2RhbC1kZWxldGUtYm90dG9tIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgcGFkZGluZzogMThweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZ2FwOiAxNXB4O1xcbn1cXG5cXG4uY3JlYXRlLXRhc2stdGl0bGUsXFxuLmVkaXQtdGFzay10aXRsZSB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjZyZW07XFxuICBmb250LXdlaWdodDogNTAwO1xcbn1cXG5cXG4uY3JlYXRlLXRhc2stdGl0bGU6OnBsYWNlaG9sZGVyLFxcbi5jcmVhdGUtdGFzay1kZXNjOjpwbGFjZWhvbGRlcixcXG4uZWRpdC10YXNrLXRpdGxlOjpwbGFjZWhvbGRlcixcXG4uZWRpdC10YXNrLWRlc2M6OnBsYWNlaG9sZGVyIHtcXG4gIGZvbnQtc2l6ZTogMS40cmVtO1xcbiAgY29sb3I6IGdyYXk7XFxufVxcblxcbi5jcmVhdGUtdGFzay1kZXNjLFxcbi5lZGl0LXRhc2stZGVzYyB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjZyZW07XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgaGVpZ2h0OiAxMDBweDtcXG4gIHJlc2l6ZTogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4uY29udGFpbmVyLWRhdGUge1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjhyZW07XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgY29sb3I6IHZhcigtLXRhaWx3aW5kLXNreS01MDApO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbmxhYmVsW2Zvcj1cXFwiY3JlYXRlLXRhc2stZGF0ZVxcXCJdLFxcbmxhYmVsW2Zvcj1cXFwiZWRpdC10YXNrLWRhdGVcXFwiXSB7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcblxcbiNjcmVhdGUtdGFzay1kYXRlLFxcbiNlZGl0LXRhc2stZGF0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS10YWlsd2luZC1za3ktNTAwKTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDEuNnJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBjb2xvcjogd2hpdGU7XFxuICBwYWRkaW5nOiAycHggOHB4O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG5cXG46Oi13ZWJraXQtY2FsZW5kYXItcGlja2VyLWluZGljYXRvciB7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmaWx0ZXI6IGludmVydCgxKTtcXG59XFxuXFxuLmNvbnRhaW5lci1wcmlvcml0eSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uY29udGFpbmVyLXByaW9yaXR5ID4gc3BhbiB7XFxuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDEuOHJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBjb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XFxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XFxufVxcblxcbi5jb250YWluZXItcHJpb3JpdHktbGV2ZWwgPiBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdIHtcXG4gIHdpZHRoOiAxcHg7XFxuICBoZWlnaHQ6IDFweDtcXG59XFxuXFxuLmNvbnRhaW5lci1wcmlvcml0eS1sZXZlbCA+IGxhYmVsIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGZvbnQtZmFtaWx5OiBIZWVibywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMS42cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIHBhZGRpbmc6IDJweCA4cHg7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4uY29udGFpbmVyLXByaW9yaXR5LWxldmVsID4gbGFiZWw6aG92ZXIsXFxuaW5wdXRbbmFtZT1cXFwiY3JlYXRlLXRhc2stcHJpb3JpdHlcXFwiXTpjaGVja2VkICsgbGFiZWwsXFxuaW5wdXRbbmFtZT1cXFwiZWRpdC10YXNrLXByaW9yaXR5XFxcIl06Y2hlY2tlZCArIGxhYmVsIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmxhYmVsLWxvdyB7XFxuICBib3JkZXI6IDNweCBzb2xpZCB2YXIoLS1wcmlvcml0eS1sb3ctZ3JlZW4pO1xcbiAgY29sb3I6IHZhcigtLXByaW9yaXR5LWxvdy1ncmVlbik7XFxufVxcblxcbi5sYWJlbC1sb3c6aG92ZXIsXFxuaW5wdXRbdmFsdWU9XFxcImxvd1xcXCJdOmNoZWNrZWQgKyBsYWJlbCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmlvcml0eS1sb3ctZ3JlZW4pO1xcbn1cXG5cXG4ubGFiZWwtbWVkaXVtIHtcXG4gIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLXByaW9yaXR5LW1lZGl1bS15ZWxsb3cpO1xcbiAgY29sb3I6IHZhcigtLXByaW9yaXR5LW1lZGl1bS15ZWxsb3cpO1xcbn1cXG5cXG4ubGFiZWwtbWVkaXVtOmhvdmVyLFxcbmlucHV0W3ZhbHVlPVxcXCJtZWRpdW1cXFwiXTpjaGVja2VkICsgbGFiZWwge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcHJpb3JpdHktbWVkaXVtLXllbGxvdyk7XFxufVxcblxcbi5sYWJlbC1oaWdoIHtcXG4gIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLXByaW9yaXR5LWhpZ2gtcmVkKTtcXG4gIGNvbG9yOiB2YXIoLS1wcmlvcml0eS1oaWdoLXJlZCk7XFxufVxcblxcbi5sYWJlbC1oaWdoOmhvdmVyLFxcbmlucHV0W3ZhbHVlPVxcXCJoaWdoXFxcIl06Y2hlY2tlZCArIGxhYmVsIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW9yaXR5LWhpZ2gtcmVkKTtcXG59XFxuXFxuLmNyZWF0ZS1hZGQtYnV0dG9uLFxcbi5lZGl0LWNoYW5nZS1idXR0b24ge1xcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250LWZhbWlseTogSGVlYm8sIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDEuNnJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBwYWRkaW5nOiAzcHggMTJweDtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLXRhaWx3aW5kLXNreS01MDApO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XFxuICBjb2xvcjogd2hpdGU7XFxuICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcXG59XFxuXFxuLmNyZWF0ZS1hZGQtYnV0dG9uOmhvdmVyLFxcbi5lZGl0LWNoYW5nZS1idXR0b246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBjb2xvcjogdmFyKC0tdGFpbHdpbmQtc2t5LTUwMCk7XFxufVxcblxcbi8qIERlbGV0ZSAqL1xcblxcbi5tb2RhbC1kZWxldGUsXFxuLm1vZGFsLXZpZXcge1xcbiAgd2lkdGg6IDMwdnc7XFxuICBtaW4td2lkdGg6IDI1MHB4O1xcbn1cXG5cXG4ubW9kYWwtZGVsZXRlOjpiYWNrZHJvcCxcXG4ubW9kYWwtdmlldzo6YmFja2Ryb3Age1xcbiAgYmFja2dyb3VuZDogYmxhY2s7XFxuICBvcGFjaXR5OiAwLjM7XFxufVxcblxcbi5tb2RhbC1kZWxldGUtYm90dG9tIHtcXG4gIGdhcDogMzVweDtcXG59XFxuXFxuLm1vZGFsLWRlbGV0ZS1ib3R0b20gPiBzcGFuLFxcbi52aWV3LWRlc2MsXFxuLnZpZXctcHJvamVjdCxcXG4udmlldy1kYXRlLFxcbi52aWV3LXByaW9yaXR5IHtcXG4gIGZvbnQtZmFtaWx5OiBIZWVibywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMS44cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGNvbG9yOiB2YXIoLS10YWlsd2luZC1za3ktNTAwKTtcXG59XFxuXFxuLmNvbnRhaW5lci1jb25maXJtIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgZ2FwOiAyMHB4O1xcbn1cXG5cXG4uY29udGFpbmVyLWNvbmZpcm0gPiBidXR0b24ge1xcbiAgZm9udC1mYW1pbHk6IEhlZWJvLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAxLjZyZW07XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgcGFkZGluZzogM3B4IDEycHg7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBjb2xvcjogd2hpdGU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5kZWxldGUtY29uZmlybS1idXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZGVsZXRlLXJlZCk7XFxuICBib3JkZXI6IDNweCBzb2xpZCB2YXIoLS1kZWxldGUtcmVkKTtcXG59XFxuXFxuLmRlbGV0ZS1jb25maXJtLWJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGNvbG9yOiB2YXIoLS1kZWxldGUtcmVkKTtcXG59XFxuXFxuLyogVmlldyAqL1xcblxcbi5tb2RhbC12aWV3LWJvdHRvbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDE4cHg7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLnZpZXctZGVzYyB7XFxuICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbn1cXG5cXG4udmlldy1sb3cge1xcbiAgY29sb3I6IHZhcigtLXByaW9yaXR5LWxvdy1ncmVlbik7XFxufVxcblxcbi52aWV3LW1lZGl1bSB7XFxuICBjb2xvcjogdmFyKC0tcHJpb3JpdHktbWVkaXVtLXllbGxvdyk7XFxufVxcblxcbi52aWV3LWhpZ2gge1xcbiAgY29sb3I6IHZhcigtLXByaW9yaXR5LWhpZ2gtcmVkKTtcXG59XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDU3NnB4KSB7XFxuICBtYWluIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIH1cXG5cXG4gIG5hdiB7XFxuICAgIGZsZXgtYmFzaXM6IDE3MHB4O1xcbiAgfVxcblxcbiAgLmNvbnRhaW5lci1wcm9qZWN0IHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nLWlubGluZTogMzBweDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgIXNjcmlwdFVybCkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBNYWluIH0gZnJvbSAnLi9NYWluLmpzJztcbmltcG9ydCBsb2dvIGZyb20gJy4uL2ljb25zL2NsaXBib2FyZC1jaGVjay1vdXRsaW5lLnN2Zyc7XG5cbmV4cG9ydCBjb25zdCBIZWFkZXIgPSAoKCkgPT4ge1xuICBjb25zdCBjcmVhdGVIZWFkZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaGVhZGVyJyk7XG4gICAgY29uc3QgZGl2ID0gTWFpbi5jcmVhdGVUZXh0KCdkaXYnLCBbJ2NvbnRhaW5lci1oZWFkZXInXSwgJycpO1xuICAgIGNvbnN0IGltZyA9IE1haW4uY3JlYXRlSW1nKGxvZ28sIFsnbG9nbyddLCAnTG9nbycpO1xuICAgIGNvbnN0IHNwYW4gPSBNYWluLmNyZWF0ZVRleHQoJ3NwYW4nLCBbJ2xvZ28tdGl0bGUnXSwgJ1RvZG8gTGlzdCcpO1xuXG4gICAgZGl2LmFwcGVuZChpbWcsIHNwYW4pO1xuICAgIGhlYWRlci5hcHBlbmQoZGl2KTtcblxuICAgIHJldHVybiBoZWFkZXI7XG4gIH1cblxuICByZXR1cm4geyBjcmVhdGVIZWFkZXIgfTtcbn0pKCk7XG4iLCJpbXBvcnQgeyBNYWluIH0gZnJvbSAnLi9NYWluLmpzJztcbmltcG9ydCBnaXRodWIgZnJvbSAnLi4vaWNvbnMvZ2l0aHViLnN2Zyc7XG5cbmV4cG9ydCBjb25zdCBGb290ZXIgPSAoKCkgPT4ge1xuICBjb25zdCBjcmVhdGVGb290ZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgZm9vdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9vdGVyJyk7XG4gICAgY29uc3Qgc3BhbiA9IE1haW4uY3JlYXRlVGV4dCgnc3BhbicsIFsnbWFkZS1ieSddLCBgQ29weXJpZ2h0IEAgJHtuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCl9IENoaWVmV29vZHNgKTtcblxuICAgIGNvbnN0IGEgPSBNYWluLmNyZWF0ZVRleHQoJ2EnLCBbJ2dpdGh1Yi1saW5rJ10sICcnKTtcbiAgICBhLmhyZWYgPSAnaHR0cHM6Ly9naXRodWIuY29tL0NoaWVmV29vZHMvdG9kby1saXN0JztcbiAgICBhLnRhcmdldCA9ICdfYmxhbmsnO1xuXG4gICAgY29uc3QgaW1nID0gTWFpbi5jcmVhdGVJbWcoZ2l0aHViLCBbJ2dpdGh1Yi1pY29uJ10sICdHaXRIdWInKTtcblxuICAgIGEuYXBwZW5kKGltZyk7XG4gICAgZm9vdGVyLmFwcGVuZChzcGFuLCBhKTtcblxuICAgIHJldHVybiBmb290ZXI7XG4gIH1cblxuICByZXR1cm4geyBjcmVhdGVGb290ZXIgfTtcbn0pKCk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVkQXJncyhyZXF1aXJlZCwgYXJncykge1xuICBpZiAoYXJncy5sZW5ndGggPCByZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocmVxdWlyZWQgKyAnIGFyZ3VtZW50JyArIChyZXF1aXJlZCA+IDEgPyAncycgOiAnJykgKyAnIHJlcXVpcmVkLCBidXQgb25seSAnICsgYXJncy5sZW5ndGggKyAnIHByZXNlbnQnKTtcbiAgfVxufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTtcblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YoYXJndW1lbnQpID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjc3RyaW5nLWFyZ3VtZW50c1wiKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwidmFyIGRlZmF1bHRPcHRpb25zID0ge307XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gIGRlZmF1bHRPcHRpb25zID0gbmV3T3B0aW9ucztcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMCk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJGZpcnN0V2Vla0NvbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9vcHRpb25zJGZpcnN0V2Vla0NvbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkZmlyc3RXZWVrQ29uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDEpO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgb3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IHRhcmdldExlbmd0aCkge1xuICAgIG91dHB1dCA9ICcwJyArIG91dHB1dDtcbiAgfVxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCJpbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICovXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiB5KGRhdGUsIHRva2VuKSB7XG4gICAgLy8gRnJvbSBodHRwOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LTMxL3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0Zvcm1hdF90b2tlbnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG5cbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiBNKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gJ00nID8gU3RyaW5nKG1vbnRoICsgMSkgOiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiBkKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0RhdGUoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gYShkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiBoKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gbShkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gRyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICBZOiBmdW5jdGlvbiBZKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuICAgIC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7XG5cbiAgICAvLyBUd28gZGlnaXQgeWVhclxuICAgIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgICAgdmFyIHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH1cblxuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAnWW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrWWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiBmdW5jdGlvbiBSKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRXh0ZW5kZWQgeWVhci4gVGhpcyBpcyBhIHNpbmdsZSBudW1iZXIgZGVzaWduYXRpbmcgdGhlIHllYXIgb2YgdGhpcyBjYWxlbmRhciBzeXN0ZW0uXG4gIC8vIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBsb2NhbGl6ZXJzIGFyZSBCLkMuIHllYXJzOlxuICAvLyB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICAvLyB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICAvLyB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICAvLyB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICAvLyB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICAvLyBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gIC8vIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZC5cbiAgdTogZnVuY3Rpb24gdShkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiBRKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ1EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcbiAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIHEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG4gICAgICBjYXNlICdxbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG4gICAgICBjYXNlICdxcXFxJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIE0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuICAgICAgY2FzZSAnTW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG4gICAgICBjYXNlICdNTU1NJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gTChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTEwnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gdyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG4gICAgaWYgKHRva2VuID09PSAnd28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiBJKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcbiAgICBpZiAodG9rZW4gPT09ICdJbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmQoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiBEKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gRShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIGUoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG4gICAgICBjYXNlICdlbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ2VlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gYyhkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIGkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG4gICAgICBjYXNlICdpaSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gYShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gYihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgfVxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gQihkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gSChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiBLKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gayhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiBzKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gUyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuUyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIFgoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIHgoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiBPKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnT08nOlxuICAgICAgY2FzZSAnT09PJzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiB6KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiB0KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIFQoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIG9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBvcHRpb25zKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0RheU9mWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgZGF0ZS5zZXRVVENNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZZZWFyVGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciBkaWZmZXJlbmNlID0gdGltZXN0YW1wIC0gc3RhcnRPZlllYXJUaW1lc3RhbXA7XG4gIHJldHVybiBNYXRoLmZsb29yKGRpZmZlcmVuY2UgLyBNSUxMSVNFQ09ORFNfSU5fREFZKSArIDE7XG59IiwidmFyIGRhdGVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIHRpbWVMb25nRm9ybWF0dGVyID0gZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59O1xudmFyIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXCIpKTtcbiAgfVxufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xudmFyIGZvcm1hdERpc3RhbmNlID0gZnVuY3Rpb24gZm9ybWF0RGlzdGFuY2UodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICBpZiAodHlwZW9mIHRva2VuVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQudG9TdHJpbmcoKSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0RGlzdGFuY2U7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBUT0RPOiBSZW1vdmUgU3RyaW5nKClcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qc1wiO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsInZhciBmb3JtYXRSZWxhdGl2ZUxvY2FsZSA9IHtcbiAgbGFzdFdlZWs6IFwiJ2xhc3QnIGVlZWUgJ2F0JyBwXCIsXG4gIHllc3RlcmRheTogXCIneWVzdGVyZGF5IGF0JyBwXCIsXG4gIHRvZGF5OiBcIid0b2RheSBhdCcgcFwiLFxuICB0b21vcnJvdzogXCIndG9tb3Jyb3cgYXQnIHBcIixcbiAgbmV4dFdlZWs6IFwiZWVlZSAnYXQnIHBcIixcbiAgb3RoZXI6ICdQJ1xufTtcbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uIGZvcm1hdFJlbGF0aXZlKHRva2VuLCBfZGF0ZSwgX2Jhc2VEYXRlLCBfb3B0aW9ucykge1xuICByZXR1cm4gZm9ybWF0UmVsYXRpdmVMb2NhbGVbdG9rZW5dO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuICAgIGlmIChjb250ZXh0ID09PSAnZm9ybWF0dGluZycgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICB2YXIgZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIHx8IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGRlZmF1bHRXaWR0aDtcbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy5mb3JtYXR0aW5nVmFsdWVzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbZGVmYXVsdFdpZHRoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9kZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuICAgIHZhciBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayhkaXJ0eUluZGV4KSA6IGRpcnR5SW5kZXg7XG4gICAgLy8gQHRzLWlnbm9yZTogRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsZW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCI7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXVxufTtcblxuLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcbnZhciBvcmRpbmFsTnVtYmVyID0gZnVuY3Rpb24gb3JkaW5hbE51bWJlcihkaXJ0eU51bWJlciwgX29wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufTtcbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiBhcmd1bWVudENhbGxiYWNrKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBxdWFydGVyIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIHZhbHVlQ2FsbGJhY2soaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDAgLyogU3VuZGF5ICovLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi8uLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRMb2NhbGU7IiwiaW1wb3J0IGlzVmFsaWQgZnJvbSBcIi4uL2lzVmFsaWQvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSBcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9fbGliL2RlZmF1bHRMb2NhbGUvaW5kZXguanNcIjsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcblxuLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuXG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX29wdGlvbnMkbG9jYWxlLCBfcmVmMiwgX3JlZjMsIF9yZWY0LCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZTIsIF9vcHRpb25zJGxvY2FsZTIkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLCBfcmVmNSwgX3JlZjYsIF9yZWY3LCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZTMsIF9vcHRpb25zJGxvY2FsZTMkb3B0aSwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMywgX2RlZmF1bHRPcHRpb25zJGxvY2FsNDtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgbG9jYWxlID0gKF9yZWYgPSAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmxvY2FsZSkgIT09IG51bGwgJiYgX29wdGlvbnMkbG9jYWxlICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRsb2NhbGUgOiBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiBkZWZhdWx0TG9jYWxlO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gdG9JbnRlZ2VyKChfcmVmMiA9IChfcmVmMyA9IChfcmVmNCA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTIub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMiRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUyJG9wdGkuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmNCAhPT0gdm9pZCAwID8gX3JlZjQgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IDEpO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgd2Vla1N0YXJ0c09uID0gdG9JbnRlZ2VyKChfcmVmNSA9IChfcmVmNiA9IChfcmVmNyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTMgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZTMkb3B0aSA9IF9vcHRpb25zJGxvY2FsZTMub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlMyRvcHRpID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUzJG9wdGkud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNyAhPT0gdm9pZCAwID8gX3JlZjcgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY2ICE9PSB2b2lkIDAgPyBfcmVmNiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwzID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsNCA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsNC53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWY1ICE9PSB2b2lkIDAgPyBfcmVmNSA6IDApO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9XG5cbiAgLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucykgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG4gICAgICBpZiAoIShvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMpICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIFN0cmluZyhkaXJ0eURhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICB2YXIgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuICBpZiAoIW1hdGNoZWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZWRbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgaWYgKCFpc0RhdGUoZGlydHlEYXRlKSAmJiB0eXBlb2YgZGlydHlEYXRlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSAtIHRoZSB2YWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZShOYU4pKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBzb21lIHZhbHVlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKCcyMDE0LTAyLTMxJylcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGFuIG9iamVjdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSh7fSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59IiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKSk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHRpbWVzdGFtcCA9IHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2sge1xuICBjb25zdHJ1Y3Rvcih0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBjb21wbGV0ZWQsIGluZGV4KSB7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICB0aGlzLmNvbXBsZXRlZCA9IGNvbXBsZXRlZDtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gIH1cblxuICBnZXRUaXRsZSgpIHtcbiAgICByZXR1cm4gdGhpcy50aXRsZTtcbiAgfVxuXG4gIHNldFRpdGxlKHRpdGxlKSB7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICB9XG5cbiAgZ2V0RGVzY3JpcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb247XG4gIH1cblxuICBzZXREZXNjcmlwdGlvbihkZXNjcmlwdGlvbikge1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgfVxuXG4gIGdldER1ZURhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZHVlRGF0ZTtcbiAgfVxuXG4gIHNldER1ZURhdGUoZHVlRGF0ZSkge1xuICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XG4gIH1cblxuICBnZXRQcmlvcml0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5wcmlvcml0eTtcbiAgfVxuXG4gIHNldFByaW9yaXR5KHByaW9yaXR5KSB7XG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICB9XG5cbiAgZ2V0Q29tcGxldGVkKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBsZXRlZDtcbiAgfVxuXG4gIHRvZ2dsZUNvbXBsZXRlZCgpIHtcbiAgICB0aGlzLmNvbXBsZXRlZCA9ICF0aGlzLmNvbXBsZXRlZDtcbiAgfVxuXG4gIGdldEluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLmluZGV4O1xuICB9XG5cbiAgc2V0SW5kZXgoaW5kZXgpIHtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gIH1cbn1cbiIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSBkYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSBkYXkgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mRGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL19saWIvZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZldlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFN1biBBdWcgMzEgMjAxNCAwMDowMDowMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LCB0aGUgc3RhcnQgb2YgdGhlIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApLCB7IHdlZWtTdGFydHNPbjogMSB9KVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZldlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJHdlZWtTdGFydHNPbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMCk7XG5cbiAgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldERheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgeyBpc1RvZGF5LCBpc1RoaXNXZWVrLCBzdWJEYXlzIH0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9qZWN0IHtcbiAgY29uc3RydWN0b3IobmFtZSkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy50YXNrcyA9IFtdO1xuICAgIHRoaXMudGFza0NvdW50ID0gMDtcbiAgICB0aGlzLmluZGV4Q291bnQgPSAwO1xuICB9XG5cbiAgZ2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgZ2V0VGFza0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLnRhc2tDb3VudDtcbiAgfVxuXG4gIHVwZGF0ZVRhc2tDb3VudCgpIHtcbiAgICB0aGlzLnRhc2tDb3VudCA9IHRoaXMudGFza3MubGVuZ3RoO1xuICB9XG5cbiAgZ2V0SW5kZXhDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleENvdW50O1xuICB9XG5cbiAgdXBkYXRlSW5kZXhDb3VudCgpIHtcbiAgICB0aGlzLmluZGV4Q291bnQgPSB0aGlzLnRhc2tzLmxlbmd0aDtcbiAgfVxuXG4gIGdldEFsbFRhc2tzKCkge1xuICAgIHJldHVybiB0aGlzLnRhc2tzO1xuICB9XG5cbiAgZ2V0VGFzayh0YXNrVGl0bGUpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5maW5kKHRhc2sgPT4gdGFzay5nZXRUaXRsZSgpID09PSB0YXNrVGl0bGUpO1xuICB9XG5cbiAgc2V0VGFza3ModGFza3MpIHtcbiAgICB0aGlzLnRhc2tzID0gdGFza3M7XG4gIH1cblxuICBjb250YWlucyh0YXNrVGl0bGUpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5zb21lKHRhc2sgPT4gdGFzay5nZXRUaXRsZSgpID09PSB0YXNrVGl0bGUpO1xuICB9XG5cbiAgYWRkVGFzayh0YXNrKSB7XG4gICAgdGhpcy50YXNrcy5wdXNoKHRhc2spO1xuICAgIHRoaXMudGFza0NvdW50Kys7XG4gICAgdGhpcy5pbmRleENvdW50Kys7XG4gIH1cblxuICBkZWxldGVUYXNrKHRhc2tUaXRsZSkge1xuICAgIHRoaXMudGFza3MgPSB0aGlzLnRhc2tzLmZpbHRlcih0YXNrID0+IHRhc2suZ2V0VGl0bGUoKSAhPT0gdGFza1RpdGxlKTtcbiAgICB0aGlzLnRhc2tDb3VudC0tO1xuICB9XG5cbiAgZ2V0VG9kYXlUYXNrcygpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5maWx0ZXIodGFzayA9PiBpc1RvZGF5KG5ldyBEYXRlKHRoaXMubW9udGhEYXlZZWFyKHRhc2suZ2V0RHVlRGF0ZSgpKSkpKTtcbiAgfVxuXG4gIGdldFRoaXNXZWVrVGFza3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFza3MuZmlsdGVyKHRhc2sgPT4gaXNUaGlzV2VlayhzdWJEYXlzKG5ldyBEYXRlKHRoaXMubW9udGhEYXlZZWFyKHRhc2suZ2V0RHVlRGF0ZSgpKSksIDEpKSk7XG4gIH1cblxuICBnZXRJbXBvcnRhbnRUYXNrcygpIHtcbiAgICByZXR1cm4gdGhpcy50YXNrcy5maWx0ZXIodGFzayA9PiB0YXNrLmdldFByaW9yaXR5KCkgPT09ICdoaWdoJyk7XG4gIH1cblxuICBtb250aERheVllYXIoZGF0ZSkge1xuICAgIGlmIChkYXRlKSB7XG4gICAgICBjb25zdCBkYXkgPSBkYXRlLnNwbGl0KCctJylbMl07XG4gICAgICBjb25zdCBtb250aCA9IGRhdGUuc3BsaXQoJy0nKVsxXTtcbiAgICAgIGNvbnN0IHllYXIgPSBkYXRlLnNwbGl0KCctJylbMF07XG4gICAgICByZXR1cm4gYCR7bW9udGh9LyR7ZGF5fS8ke3llYXJ9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgaXNTYW1lRGF5IGZyb20gXCIuLi9pc1NhbWVEYXkvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVG9kYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdG9kYXk/XG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgdG9kYXk/XG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIG5vdCBwcmVzZW50IGluIHRoZSBGUCBzdWJtb2R1bGUgYXNcbiAqID4gaXQgdXNlcyBgRGF0ZS5ub3coKWAgaW50ZXJuYWxseSBoZW5jZSBpbXB1cmUgYW5kIGNhbid0IGJlIHNhZmVseSBjdXJyaWVkLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHRvZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgNiBPY3RvYmVyIDIwMTQsIGlzIDYgT2N0b2JlciAxNDowMDowMCB0b2RheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzVG9kYXkobmV3IERhdGUoMjAxNCwgOSwgNiwgMTQsIDApKVxuICogLy89PiB0cnVlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVG9kYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gaXNTYW1lRGF5KGRpcnR5RGF0ZSwgRGF0ZS5ub3coKSk7XG59IiwiaW1wb3J0IHN0YXJ0T2ZEYXkgZnJvbSBcIi4uL3N0YXJ0T2ZEYXkvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzU2FtZURheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpP1xuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlcyBhcmUgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciAwNjowMDowMCBhbmQgNCBTZXB0ZW1iZXIgMTg6MDA6MDAgaW4gdGhlIHNhbWUgZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQsIDYsIDApLCBuZXcgRGF0ZSgyMDE0LCA4LCA0LCAxOCwgMCkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyIGFuZCA0IE9jdG9iZXIgaW4gdGhlIHNhbWUgZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQpLCBuZXcgRGF0ZSgyMDE0LCA5LCA0KSlcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyLCAyMDE0IGFuZCA0IFNlcHRlbWJlciwgMjAxNSBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCksIG5ldyBEYXRlKDIwMTUsIDgsIDQpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1NhbWVEYXkoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdFN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlUmlnaHQpO1xuICByZXR1cm4gZGF0ZUxlZnRTdGFydE9mRGF5LmdldFRpbWUoKSA9PT0gZGF0ZVJpZ2h0U3RhcnRPZkRheS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IGlzU2FtZVdlZWsgZnJvbSBcIi4uL2lzU2FtZVdlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVGhpc1dlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBzYW1lIHdlZWsgYXMgdGhlIGN1cnJlbnQgZGF0ZT9cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgc2FtZSB3ZWVrIGFzIHRoZSBjdXJyZW50IGRhdGU/XG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIG5vdCBwcmVzZW50IGluIHRoZSBGUCBzdWJtb2R1bGUgYXNcbiAqID4gaXQgdXNlcyBgRGF0ZS5ub3coKWAgaW50ZXJuYWxseSBoZW5jZSBpbXB1cmUgYW5kIGNhbid0IGJlIHNhZmVseSBjdXJyaWVkLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIHRoZSBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgaW4gdGhpcyB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgMjUgU2VwdGVtYmVyIDIwMTQsIGlzIDIxIFNlcHRlbWJlciAyMDE0IGluIHRoaXMgd2Vlaz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzVGhpc1dlZWsobmV3IERhdGUoMjAxNCwgOCwgMjEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDI1IFNlcHRlbWJlciAyMDE0IGFuZCB3ZWVrIHN0YXJ0cyB3aXRoIE1vbmRheVxuICogLy8gaXMgMjEgU2VwdGVtYmVyIDIwMTQgaW4gdGhpcyB3ZWVrP1xuICogY29uc3QgcmVzdWx0ID0gaXNUaGlzV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyMSksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUaGlzV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBpc1NhbWVXZWVrKGRpcnR5RGF0ZSwgRGF0ZS5ub3coKSwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IHN0YXJ0T2ZXZWVrIGZyb20gXCIuLi9zdGFydE9mV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNTYW1lV2Vla1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSB3ZWVrIChhbmQgbW9udGggYW5kIHllYXIpP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSB3ZWVrIChhbmQgbW9udGggYW5kIHllYXIpP1xuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSB3ZWVrIChhbmQgbW9udGggYW5kIHllYXIpXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSAzMSBBdWd1c3QgMjAxNCBhbmQgNCBTZXB0ZW1iZXIgMjAxNCBpbiB0aGUgc2FtZSB3ZWVrP1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lV2VlayhuZXcgRGF0ZSgyMDE0LCA3LCAzMSksIG5ldyBEYXRlKDIwMTQsIDgsIDQpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHdlZWsgc3RhcnRzIHdpdGggTW9uZGF5LFxuICogLy8gYXJlIDMxIEF1Z3VzdCAyMDE0IGFuZCA0IFNlcHRlbWJlciAyMDE0IGluIHRoZSBzYW1lIHdlZWs/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVXZWVrKG5ldyBEYXRlKDIwMTQsIDcsIDMxKSwgbmV3IERhdGUoMjAxNCwgOCwgNCksIHtcbiAqICAgd2Vla1N0YXJ0c09uOiAxXG4gKiB9KVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMSBKYW51YXJ5IDIwMTQgYW5kIDEgSmFudWFyeSAyMDE1IGluIHRoZSBzYW1lIHdlZWs/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVXZWVrKG5ldyBEYXRlKDIwMTQsIDAsIDEpLCBuZXcgRGF0ZSgyMDE1LCAwLCAxKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTYW1lV2VlayhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0U3RhcnRPZldlZWsgPSBzdGFydE9mV2VlayhkaXJ0eURhdGVMZWZ0LCBvcHRpb25zKTtcbiAgdmFyIGRhdGVSaWdodFN0YXJ0T2ZXZWVrID0gc3RhcnRPZldlZWsoZGlydHlEYXRlUmlnaHQsIG9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZUxlZnRTdGFydE9mV2Vlay5nZXRUaW1lKCkgPT09IGRhdGVSaWdodFN0YXJ0T2ZXZWVrLmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgYWRkRGF5cyBmcm9tIFwiLi4vYWRkRGF5cy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1YkRheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBkYXlzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgZGF5cyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDEwIGRheXMgZnJvbSAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gc3ViRGF5cyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgMTApXG4gKiAvLz0+IEZyaSBBdWcgMjIgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJEYXlzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkRGF5cyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZERheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgZGF5cyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IC0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gLSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgMTAgZGF5cyB0byAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gYWRkRGF5cyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgMTApXG4gKiAvLz0+IFRodSBTZXAgMTEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGREYXlzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICBpZiAoaXNOYU4oYW1vdW50KSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG4gIGlmICghYW1vdW50KSB7XG4gICAgLy8gSWYgMCBkYXlzLCBuby1vcCB0byBhdm9pZCBjaGFuZ2luZyB0aW1lcyBpbiB0aGUgaG91ciBiZWZvcmUgZW5kIG9mIERTVFxuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIGFtb3VudCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB7IGNvbXBhcmVBc2MgfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgUHJvamVjdCBmcm9tICcuL1Byb2plY3QuanMnO1xuaW1wb3J0IFRhc2sgZnJvbSAnLi9UYXNrLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVG9kb0xpc3Qge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByb2plY3RzID0gW1xuICAgICAgbmV3IFByb2plY3QoJ1RvZGF5JyksXG4gICAgICBuZXcgUHJvamVjdCgnVGhpcyB3ZWVrJyksXG4gICAgICBuZXcgUHJvamVjdCgnSW1wb3J0YW50JylcbiAgICBdO1xuICB9XG5cbiAgZ2V0QWxsUHJvamVjdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvamVjdHM7XG4gIH1cblxuICBnZXRQcm9qZWN0KHByb2plY3ROYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QuZ2V0TmFtZSgpID09PSBwcm9qZWN0TmFtZSk7XG4gIH1cblxuICBzZXRQcm9qZWN0cyhwcm9qZWN0cykge1xuICAgIHRoaXMucHJvamVjdHMgPSBwcm9qZWN0cztcbiAgfVxuXG4gIGNvbnRhaW5zKHByb2plY3ROYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvamVjdHMuc29tZShwcm9qZWN0ID0+IHByb2plY3QuZ2V0TmFtZSgpID09PSBwcm9qZWN0TmFtZSk7XG4gIH1cblxuICBhZGRQcm9qZWN0KHByb2plY3QpIHtcbiAgICB0aGlzLnByb2plY3RzLnB1c2gocHJvamVjdCk7XG4gIH1cblxuICBkZWxldGVQcm9qZWN0KHByb2plY3ROYW1lKSB7XG4gICAgdGhpcy5wcm9qZWN0cyA9IHRoaXMucHJvamVjdHMuZmlsdGVyKHByb2plY3QgPT4gcHJvamVjdC5nZXROYW1lKCkgIT09IHByb2plY3ROYW1lKTtcbiAgfVxuXG4gIHVwZGF0ZVRvZGF5UHJvamVjdHMoKSB7XG4gICAgdGhpcy51cGRhdGVQcm9qZWN0KCdUb2RheScpLnRhc2tzID1cbiAgICAgIHRoaXMuc29ydEJ5UHJpb3JpdHkoXG4gICAgICAgIHRoaXMuZ2V0UHJvamVjdCgnVG9kYXknKS5nZXRBbGxUYXNrcygpXG4gICAgICApXG4gICAgdGhpcy5yZWluZGV4VGFza3ModGhpcy5nZXRQcm9qZWN0KCdUb2RheScpLmdldEFsbFRhc2tzKCkpO1xuICAgIHRoaXMuZ2V0UHJvamVjdCgnVG9kYXknKS51cGRhdGVUYXNrQ291bnQoKTtcbiAgICB0aGlzLmdldFByb2plY3QoJ1RvZGF5JykudXBkYXRlSW5kZXhDb3VudCgpO1xuICB9XG5cbiAgdXBkYXRlVGhpc1dlZWtQcm9qZWN0cygpIHtcbiAgICB0aGlzLnVwZGF0ZVByb2plY3QoJ1RoaXMgd2VlaycpLnRhc2tzID1cbiAgICAgIHRoaXMuc29ydEJ5RGF0ZShcbiAgICAgICAgdGhpcy5nZXRQcm9qZWN0KCdUaGlzIHdlZWsnKS5nZXRBbGxUYXNrcygpXG4gICAgICApXG4gICAgdGhpcy5yZWluZGV4VGFza3ModGhpcy5nZXRQcm9qZWN0KCdUaGlzIHdlZWsnKS5nZXRBbGxUYXNrcygpKTtcbiAgICB0aGlzLmdldFByb2plY3QoJ1RoaXMgd2VlaycpLnVwZGF0ZVRhc2tDb3VudCgpO1xuICAgIHRoaXMuZ2V0UHJvamVjdCgnVGhpcyB3ZWVrJykudXBkYXRlSW5kZXhDb3VudCgpO1xuICB9XG5cbiAgdXBkYXRlSW1wb3J0YW50UHJvamVjdHMoKSB7XG4gICAgdGhpcy51cGRhdGVQcm9qZWN0KCdJbXBvcnRhbnQnKS50YXNrcyA9XG4gICAgICB0aGlzLnNvcnRCeURhdGUoXG4gICAgICAgIHRoaXMuZ2V0UHJvamVjdCgnSW1wb3J0YW50JykuZ2V0QWxsVGFza3MoKVxuICAgICAgKVxuICAgIHRoaXMucmVpbmRleFRhc2tzKHRoaXMuZ2V0UHJvamVjdCgnVGhpcyB3ZWVrJykuZ2V0QWxsVGFza3MoKSk7XG4gICAgdGhpcy5nZXRQcm9qZWN0KCdUaGlzIHdlZWsnKS51cGRhdGVUYXNrQ291bnQoKTtcbiAgICB0aGlzLmdldFByb2plY3QoJ1RoaXMgd2VlaycpLnVwZGF0ZUluZGV4Q291bnQoKTtcbiAgfVxuXG4gIHVwZGF0ZVByb2plY3QocHJvamVjdE5hbWUpIHtcbiAgICB0aGlzLmdldFByb2plY3QocHJvamVjdE5hbWUpLnRhc2tzID0gW107XG4gICAgdGhpcy5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS50YXNrQ291bnQgPSAwO1xuICAgIHRoaXMuZ2V0UHJvamVjdChwcm9qZWN0TmFtZSkuaW5kZXhDb3VudCA9IDA7XG5cbiAgICB0aGlzLnByb2plY3RzLmZvckVhY2gocHJvamVjdCA9PiB7XG4gICAgICBpZiAoIVsnVG9kYXknLCAnVGhpcyB3ZWVrJywgJ0ltcG9ydGFudCddLmluY2x1ZGVzKHByb2plY3QuZ2V0TmFtZSgpKSkge1xuICAgICAgICBjb25zdCB0YXNrcyA9IHByb2plY3ROYW1lID09PSAnVG9kYXknXG4gICAgICAgICAgPyBwcm9qZWN0LmdldFRvZGF5VGFza3MoKVxuICAgICAgICAgIDogcHJvamVjdE5hbWUgPT09ICdUaGlzIHdlZWsnXG4gICAgICAgICAgICA/IHByb2plY3QuZ2V0VGhpc1dlZWtUYXNrcygpXG4gICAgICAgICAgICA6IHByb2plY3QuZ2V0SW1wb3J0YW50VGFza3MoKVxuXG4gICAgICAgIHRhc2tzLmZvckVhY2goKHRhc2ssIGluZGV4KSA9PiB7XG4gICAgICAgICAgdGhpcy5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5hZGRUYXNrKFxuICAgICAgICAgICAgbmV3IFRhc2sodGFzay5nZXRUaXRsZSgpLCB0YXNrLmdldERlc2NyaXB0aW9uKCksIHRhc2suZ2V0RHVlRGF0ZSgpLCB0YXNrLmdldFByaW9yaXR5KCksIHRhc2suZ2V0Q29tcGxldGVkKCksIGluZGV4KVxuICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgcmV0dXJuIHRoaXMuZ2V0UHJvamVjdChwcm9qZWN0TmFtZSk7XG4gIH1cblxuICB1cGRhdGVBbGxQcm9qZWN0cygpIHtcbiAgICB0aGlzLnVwZGF0ZVRvZGF5UHJvamVjdHMoKTtcbiAgICB0aGlzLnVwZGF0ZVRoaXNXZWVrUHJvamVjdHMoKTtcbiAgICB0aGlzLnVwZGF0ZUltcG9ydGFudFByb2plY3RzKCk7XG4gIH1cblxuICByZWluZGV4VGFza3ModGFza3MpIHtcbiAgICB0YXNrcy5mb3JFYWNoKCh0YXNrLCBpbmRleCkgPT4gdGFzay5zZXRJbmRleChpbmRleCkpXG4gIH1cblxuICBzb3J0QnlQcmlvcml0eSh0YXNrcykge1xuICAgIHJldHVybiB0YXNrcy5zb3J0KChhLCBiKSA9PiB0aGlzLnByaW9yaXR5VG9TY29yZShhKSAtIHRoaXMucHJpb3JpdHlUb1Njb3JlKGIpKVxuICB9XG5cbiAgcHJpb3JpdHlUb1Njb3JlKHRhc2spIHtcbiAgICByZXR1cm4gdGFzay5nZXRQcmlvcml0eSgpID09PSAnaGlnaCcgPyAtMyA6IHRhc2suZ2V0UHJpb3JpdHkoKSA9PT0gJ21lZGl1bScgPyAtMiA6IC0xO1xuICB9XG5cbiAgc29ydEJ5RGF0ZSh0YXNrcykge1xuICAgIGNvbnN0IG51bGxEYXRlcyA9IFtdXG4gICAgY29uc3Qgbm9uTnVsbERhdGVzID0gW11cbiAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4gdGFzay5nZXREdWVEYXRlKCkgPT09IG51bGwgPyBudWxsRGF0ZXMucHVzaCh0YXNrKSA6IG5vbk51bGxEYXRlcy5wdXNoKHRhc2spKVxuXG4gICAgY29uc3Qgc29ydGVkRGF0ZXMgPSBub25OdWxsRGF0ZXMuc29ydCgoYSwgYikgPT4gY29tcGFyZUFzYyhcbiAgICAgIG5ldyBEYXRlKGEuZ2V0RHVlRGF0ZSgpKSwgbmV3IERhdGUoYi5nZXREdWVEYXRlKCkpKVxuICAgIClcblxuICAgIHJldHVybiBbLi4uc29ydGVkRGF0ZXMsIC4uLm51bGxEYXRlc11cbiAgfVxufVxuIiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBjb21wYXJlQXNjXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIC0xLCAwIG9yIDEuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wYXJlIHRoZSB0d28gZGF0ZXMgYW5kIHJldHVybiAxIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGFmdGVyIHRoZSBzZWNvbmQsXG4gKiAtMSBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBvciAwIGlmIGRhdGVzIGFyZSBlcXVhbC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNvbXBhcmVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBzZWNvbmQgZGF0ZSB0byBjb21wYXJlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgcmVzdWx0IG9mIHRoZSBjb21wYXJpc29uXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbXBhcmUgMTEgRmVicnVhcnkgMTk4NyBhbmQgMTAgSnVseSAxOTg5OlxuICogY29uc3QgcmVzdWx0ID0gY29tcGFyZUFzYyhuZXcgRGF0ZSgxOTg3LCAxLCAxMSksIG5ldyBEYXRlKDE5ODksIDYsIDEwKSlcbiAqIC8vPT4gLTFcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU29ydCB0aGUgYXJyYXkgb2YgZGF0ZXM6XG4gKiBjb25zdCByZXN1bHQgPSBbXG4gKiAgIG5ldyBEYXRlKDE5OTUsIDYsIDIpLFxuICogICBuZXcgRGF0ZSgxOTg3LCAxLCAxMSksXG4gKiAgIG5ldyBEYXRlKDE5ODksIDYsIDEwKVxuICogXS5zb3J0KGNvbXBhcmVBc2MpXG4gKiAvLz0+IFtcbiAqIC8vICAgV2VkIEZlYiAxMSAxOTg3IDAwOjAwOjAwLFxuICogLy8gICBNb24gSnVsIDEwIDE5ODkgMDA6MDA6MDAsXG4gKiAvLyAgIFN1biBKdWwgMDIgMTk5NSAwMDowMDowMFxuICogLy8gXVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wYXJlQXNjKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgZGlmZiA9IGRhdGVMZWZ0LmdldFRpbWUoKSAtIGRhdGVSaWdodC5nZXRUaW1lKCk7XG4gIGlmIChkaWZmIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgIHJldHVybiAxO1xuICAgIC8vIFJldHVybiAwIGlmIGRpZmYgaXMgMDsgcmV0dXJuIE5hTiBpZiBkaWZmIGlzIE5hTlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkaWZmO1xuICB9XG59IiwiaW1wb3J0IFRhc2sgZnJvbSAnLi9UYXNrLmpzJztcbmltcG9ydCBQcm9qZWN0IGZyb20gJy4vUHJvamVjdC5qcyc7XG5pbXBvcnQgVG9kb0xpc3QgZnJvbSAnLi9Ub2RvTGlzdC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3JhZ2Uge1xuICBzdGF0aWMgc2V0VG9kb0xpc3QodG9kb0xpc3QpIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndG9kb0xpc3QnLCBKU09OLnN0cmluZ2lmeSh0b2RvTGlzdCkpO1xuICB9XG5cbiAgc3RhdGljIGdldFRvZG9MaXN0KCkge1xuICAgIGNvbnN0IHRvZG9MaXN0ID0gT2JqZWN0LmFzc2lnbihuZXcgVG9kb0xpc3QoKSwgSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9kb0xpc3QnKSkpXG5cbiAgICB0b2RvTGlzdC5zZXRQcm9qZWN0cyh0b2RvTGlzdC5nZXRBbGxQcm9qZWN0cygpXG4gICAgICAubWFwKHByb2plY3QgPT4gT2JqZWN0LmFzc2lnbihuZXcgUHJvamVjdCgpLCBwcm9qZWN0KSlcbiAgICApXG5cbiAgICB0b2RvTGlzdC5nZXRBbGxQcm9qZWN0cygpLmZvckVhY2gocHJvamVjdCA9PlxuICAgICAgcHJvamVjdC5zZXRUYXNrcyhwcm9qZWN0LmdldEFsbFRhc2tzKClcbiAgICAgICAgLm1hcCh0YXNrID0+IE9iamVjdC5hc3NpZ24obmV3IFRhc2soKSwgdGFzaykpXG4gICAgICApXG4gICAgKVxuXG4gICAgcmV0dXJuIHRvZG9MaXN0O1xuICB9XG5cbiAgc3RhdGljIHVwZGF0ZUFsbFByb2plY3RzKCkge1xuICAgIGNvbnN0IHRvZG9MaXN0ID0gU3RvcmFnZS5nZXRUb2RvTGlzdCgpO1xuICAgIHRvZG9MaXN0LnVwZGF0ZUFsbFByb2plY3RzKCk7XG4gICAgU3RvcmFnZS5zZXRUb2RvTGlzdCh0b2RvTGlzdCk7XG4gIH1cblxuICBzdGF0aWMgZ2V0QWxsUHJvamVjdHMoKSB7XG4gICAgY29uc3QgdG9kb0xpc3QgPSBTdG9yYWdlLmdldFRvZG9MaXN0KCk7XG4gICAgcmV0dXJuIHRvZG9MaXN0LmdldEFsbFByb2plY3RzKCk7XG4gIH1cblxuICBzdGF0aWMgY29udGFpbnNQcm9qZWN0KHByb2plY3ROYW1lKSB7XG4gICAgY29uc3QgdG9kb0xpc3QgPSBTdG9yYWdlLmdldFRvZG9MaXN0KCk7XG4gICAgcmV0dXJuIHRvZG9MaXN0LmNvbnRhaW5zKHByb2plY3ROYW1lKTtcbiAgfVxuXG4gIHN0YXRpYyBhZGRQcm9qZWN0KHByb2plY3ROYW1lKSB7XG4gICAgY29uc3QgdG9kb0xpc3QgPSBTdG9yYWdlLmdldFRvZG9MaXN0KCk7XG4gICAgdG9kb0xpc3QuYWRkUHJvamVjdChuZXcgUHJvamVjdChwcm9qZWN0TmFtZSkpO1xuICAgIFN0b3JhZ2Uuc2V0VG9kb0xpc3QodG9kb0xpc3QpO1xuICB9XG5cbiAgc3RhdGljIGRlbGV0ZVByb2plY3QocHJvamVjdE5hbWUpIHtcbiAgICBjb25zdCB0b2RvTGlzdCA9IFN0b3JhZ2UuZ2V0VG9kb0xpc3QoKTtcbiAgICB0b2RvTGlzdC5kZWxldGVQcm9qZWN0KHByb2plY3ROYW1lKTtcbiAgICB0b2RvTGlzdC51cGRhdGVBbGxQcm9qZWN0cygpO1xuICAgIFN0b3JhZ2Uuc2V0VG9kb0xpc3QodG9kb0xpc3QpO1xuICB9XG5cbiAgc3RhdGljIGdldFRhc2tDb3VudChwcm9qZWN0TmFtZSkge1xuICAgIGNvbnN0IHRvZG9MaXN0ID0gU3RvcmFnZS5nZXRUb2RvTGlzdCgpO1xuICAgIHJldHVybiB0b2RvTGlzdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5nZXRUYXNrQ291bnQoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRJbmRleENvdW50KHByb2plY3ROYW1lKSB7XG4gICAgY29uc3QgdG9kb0xpc3QgPSBTdG9yYWdlLmdldFRvZG9MaXN0KCk7XG4gICAgcmV0dXJuIHRvZG9MaXN0LmdldFByb2plY3QocHJvamVjdE5hbWUpLmdldEluZGV4Q291bnQoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBbGxUYXNrcyhwcm9qZWN0TmFtZSkge1xuICAgIGNvbnN0IHRvZG9MaXN0ID0gU3RvcmFnZS5nZXRUb2RvTGlzdCgpO1xuICAgIHJldHVybiB0b2RvTGlzdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5nZXRBbGxUYXNrcygpO1xuICB9XG5cbiAgc3RhdGljIGdldFRhc2socHJvamVjdE5hbWUsIHRhc2tUaXRsZSkge1xuICAgIGNvbnN0IHRvZG9MaXN0ID0gU3RvcmFnZS5nZXRUb2RvTGlzdCgpO1xuICAgIHJldHVybiB0b2RvTGlzdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5nZXRUYXNrKHRhc2tUaXRsZSk7XG4gIH1cblxuICBzdGF0aWMgaXNQcm9qZWN0RW1wdHkocHJvamVjdE5hbWUpIHtcbiAgICBjb25zdCB0b2RvTGlzdCA9IFN0b3JhZ2UuZ2V0VG9kb0xpc3QoKTtcbiAgICByZXR1cm4gdG9kb0xpc3QuZ2V0UHJvamVjdChwcm9qZWN0TmFtZSkuZ2V0VGFza0NvdW50KCkgPT09IDA7XG4gIH1cblxuICBzdGF0aWMgY29udGFpbnNUYXNrKHByb2plY3ROYW1lLCB0YXNrVGl0bGUpIHtcbiAgICBjb25zdCB0b2RvTGlzdCA9IFN0b3JhZ2UuZ2V0VG9kb0xpc3QoKTtcbiAgICByZXR1cm4gdG9kb0xpc3QuZ2V0UHJvamVjdChwcm9qZWN0TmFtZSkuY29udGFpbnModGFza1RpdGxlKTtcbiAgfVxuXG4gIHN0YXRpYyBhZGRUYXNrKHByb2plY3ROYW1lLCB0aXRsZSwgZGVzYywgZGF0ZSwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCB0b2RvTGlzdCA9IFN0b3JhZ2UuZ2V0VG9kb0xpc3QoKTtcbiAgICB0b2RvTGlzdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5hZGRUYXNrKG5ldyBUYXNrKHRpdGxlLCBkZXNjLCBkYXRlLCBwcmlvcml0eSwgZmFsc2UsIHRvZG9MaXN0LmdldFByb2plY3QocHJvamVjdE5hbWUpLmdldEluZGV4Q291bnQoKSkpO1xuICAgIHRvZG9MaXN0LnVwZGF0ZUFsbFByb2plY3RzKCk7XG4gICAgU3RvcmFnZS5zZXRUb2RvTGlzdCh0b2RvTGlzdCk7XG4gIH1cblxuICBzdGF0aWMgZGVsZXRlVGFzayhwcm9qZWN0TmFtZSwgdGFza1RpdGxlKSB7XG4gICAgY29uc3QgdG9kb0xpc3QgPSBTdG9yYWdlLmdldFRvZG9MaXN0KCk7XG4gICAgdG9kb0xpc3QuZ2V0UHJvamVjdChwcm9qZWN0TmFtZSkuZGVsZXRlVGFzayh0YXNrVGl0bGUpO1xuICAgIHRvZG9MaXN0LnVwZGF0ZUFsbFByb2plY3RzKCk7XG4gICAgU3RvcmFnZS5zZXRUb2RvTGlzdCh0b2RvTGlzdCk7XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlVGFzayhwcm9qZWN0TmFtZSwgb2xkVGl0bGUsIG5ld1RpdGxlLCBuZXdEZXNjLCBuZXdEdWVEYXRlLCBuZXdQcmlvcml0eSkge1xuICAgIGNvbnN0IHRvZG9MaXN0ID0gU3RvcmFnZS5nZXRUb2RvTGlzdCgpO1xuICAgIHRvZG9MaXN0LmdldFByb2plY3QocHJvamVjdE5hbWUpLmdldFRhc2sob2xkVGl0bGUpLnNldFRpdGxlKG5ld1RpdGxlKTtcbiAgICB0b2RvTGlzdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5nZXRUYXNrKG5ld1RpdGxlKS5zZXREZXNjcmlwdGlvbihuZXdEZXNjKTtcbiAgICB0b2RvTGlzdC5nZXRQcm9qZWN0KHByb2plY3ROYW1lKS5nZXRUYXNrKG5ld1RpdGxlKS5zZXREdWVEYXRlKG5ld0R1ZURhdGUpO1xuICAgIHRvZG9MaXN0LmdldFByb2plY3QocHJvamVjdE5hbWUpLmdldFRhc2sobmV3VGl0bGUpLnNldFByaW9yaXR5KG5ld1ByaW9yaXR5KTtcbiAgICB0b2RvTGlzdC51cGRhdGVBbGxQcm9qZWN0cygpO1xuICAgIFN0b3JhZ2Uuc2V0VG9kb0xpc3QodG9kb0xpc3QpO1xuICB9XG5cbiAgc3RhdGljIHRvZ2dsZVRhc2tDb21wbGV0ZWQocHJvamVjdE5hbWUsIHRhc2tUaXRsZSkge1xuICAgIGNvbnN0IHRvZG9MaXN0ID0gU3RvcmFnZS5nZXRUb2RvTGlzdCgpO1xuICAgIHRvZG9MaXN0LmdldFByb2plY3QocHJvamVjdE5hbWUpLmdldFRhc2sodGFza1RpdGxlKS50b2dnbGVDb21wbGV0ZWQoKTtcbiAgICB0b2RvTGlzdC51cGRhdGVBbGxQcm9qZWN0cygpO1xuICAgIFN0b3JhZ2Uuc2V0VG9kb0xpc3QodG9kb0xpc3QpO1xuICB9XG5cbiAgc3RhdGljIGdldFByb2plY3ROYW1lKHRhc2tUaXRsZSkge1xuICAgIGNvbnN0IHRvZG9MaXN0ID0gU3RvcmFnZS5nZXRUb2RvTGlzdCgpO1xuICAgIGZvciAoY29uc3QgcHJvamVjdCBvZiB0b2RvTGlzdC5nZXRBbGxQcm9qZWN0cygpLmZpbHRlcihwcm9qZWN0ID0+XG4gICAgICAhWydUb2RheScsICdUaGlzIHdlZWsnLCAnSW1wb3J0YW50J10uaW5jbHVkZXMocHJvamVjdC5nZXROYW1lKCkpKSkge1xuICAgICAgaWYgKHByb2plY3QuY29udGFpbnModGFza1RpdGxlKSkge1xuICAgICAgICByZXR1cm4gcHJvamVjdC5nZXROYW1lKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBmb3JtYXQgfSBmcm9tICdkYXRlLWZucyc7XG5pbXBvcnQgeyBNYWluIH0gZnJvbSAnLi9NYWluLmpzJztcbmltcG9ydCB7IE5hdiB9IGZyb20gJy4vTmF2LmpzJztcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tICcuL1NlY3Rpb24uanMnO1xuaW1wb3J0IFN0b3JhZ2UgZnJvbSAnLi4vY2xhc3Nlcy9TdG9yYWdlLmpzJztcbmltcG9ydCBleGl0IGZyb20gJy4uL2ljb25zL2Nsb3NlLXdoaXRlLnN2Zyc7XG5cbmV4cG9ydCBjb25zdCBEaWFsb2cgPSAoKCkgPT4ge1xuICBjb25zdCBzaG93RGVsZXRlTW9kYWwgPSAocHJvamVjdE5hbWUsIHRhc2tUaXRsZSA9IG51bGwpID0+IHtcbiAgICBjb25zdCBkaWFsb2cgPSBNYWluLmNyZWF0ZVRleHQoJ2RpYWxvZycsIFsnbW9kYWwtZGVsZXRlJ10sICcnKTtcbiAgICBkaWFsb2cub3BlbiA9IHRydWU7XG5cbiAgICBjb25zdCBtb2RhbFRvcCA9IE1haW4uY3JlYXRlVGV4dCgnZGl2JywgWydtb2RhbC1kZWxldGUtdG9wJ10sICcnKTtcbiAgICBjb25zdCBzcGFuID0gTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgJycsICdDb25maXJtIERlbGV0ZScpO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGNvbnN0IGV4aXRJY29uID0gY3JlYXRlRXhpdEljb24oJ2RlbGV0ZScpO1xuXG4gICAgYnV0dG9uLmFwcGVuZChleGl0SWNvbik7XG4gICAgbW9kYWxUb3AuYXBwZW5kKHNwYW4sIGJ1dHRvbik7XG5cbiAgICBjb25zdCBtb2RhbEJvdHRvbSA9IE1haW4uY3JlYXRlVGV4dCgnZGl2JywgWydtb2RhbC1kZWxldGUtYm90dG9tJ10sICcnKTtcblxuICAgIGxldCBzcGFuQ29uZmlybSA9IG51bGw7XG4gICAgdGFza1RpdGxlXG4gICAgICA/IHNwYW5Db25maXJtID0gTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgJycsICdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgdGFzaz8nKVxuICAgICAgOiBzcGFuQ29uZmlybSA9IE1haW4uY3JlYXRlVGV4dCgnc3BhbicsICcnLCBgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSBwcm9qZWN0ICR7cHJvamVjdE5hbWV9PyBXYXJuaW5nOiB0aGlzIGlzIGlycmV2ZXJzaWJsZSFgKTtcblxuICAgIGNvbnN0IGRpdiA9IE1haW4uY3JlYXRlVGV4dCgnZGl2JywgWydjb250YWluZXItY29uZmlybSddLCAnJyk7XG5cbiAgICBjb25zdCBkZWxldGVCdXR0b24gPSBNYWluLmNyZWF0ZVRleHQoJ2J1dHRvbicsIFsnZGVsZXRlLWNvbmZpcm0tYnV0dG9uJ10sICdEZWxldGUnKTtcbiAgICB0YXNrVGl0bGUgPyBhZGREZWxldGVUYXNrSGFuZGxlcihkZWxldGVCdXR0b24sIHByb2plY3ROYW1lLCB0YXNrVGl0bGUpIDogYWRkRGVsZXRlUHJvamVjdEhhbmRsZXIoZGVsZXRlQnV0dG9uLCBwcm9qZWN0TmFtZSk7XG5cbiAgICBkaXYuYXBwZW5kKGRlbGV0ZUJ1dHRvbik7XG4gICAgbW9kYWxCb3R0b20uYXBwZW5kKHNwYW5Db25maXJtLCBkaXYpO1xuICAgIGRpYWxvZy5hcHBlbmQobW9kYWxUb3AsIG1vZGFsQm90dG9tKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJykuYXBwZW5kKGRpYWxvZyk7XG5cbiAgICB0b2dnbGVPdmVybGF5KCk7XG4gIH1cblxuICBjb25zdCBzaG93Vmlld01vZGFsID0gKHByb2plY3ROYW1lLCB0YXNrKSA9PiB7XG4gICAgY29uc3QgZGlhbG9nID0gTWFpbi5jcmVhdGVUZXh0KCdkaWFsb2cnLCBbJ21vZGFsLXZpZXcnXSwgJycpO1xuICAgIGRpYWxvZy5vcGVuID0gdHJ1ZTtcblxuICAgIGNvbnN0IG1vZGFsVG9wID0gTWFpbi5jcmVhdGVUZXh0KCdkaXYnLCBbJ21vZGFsLXZpZXctdG9wJ10sICcnKTtcbiAgICBjb25zdCBzcGFuID0gTWFpbi5jcmVhdGVUZXh0KCdoMScsIFsndmlldy10aXRsZSddLCB0YXNrLmdldFRpdGxlKCkpO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGNvbnN0IGV4aXRJY29uID0gY3JlYXRlRXhpdEljb24oJ3ZpZXcnKTtcblxuICAgIGJ1dHRvbi5hcHBlbmQoZXhpdEljb24pO1xuICAgIG1vZGFsVG9wLmFwcGVuZChzcGFuLCBidXR0b24pO1xuXG4gICAgY29uc3QgbW9kYWxCb3R0b20gPSBNYWluLmNyZWF0ZVRleHQoJ2RpdicsIFsnbW9kYWwtdmlldy1ib3R0b20nXSwgJycpO1xuICAgIGNvbnN0IGRlc2MgPSBNYWluLmNyZWF0ZVRleHQoJ3AnLCBbJ3ZpZXctZGVzYyddLCB0YXNrLmdldERlc2NyaXB0aW9uKCkpO1xuICAgIGNvbnN0IHByb2plY3QgPSBNYWluLmNyZWF0ZVRleHQoJ3AnLCBbJ3ZpZXctcHJvamVjdCddLCBgUHJvamVjdDogJHtwcm9qZWN0TmFtZX1gKTtcbiAgICBjb25zdCBkYXRlID0gTWFpbi5jcmVhdGVUZXh0KCdwJywgWyd2aWV3LWRhdGUnXSwgYER1ZSBEYXRlOiAke3Rhc2suZ2V0RHVlRGF0ZSgpID8gZGF5TW9udGhZZWFyKHRhc2suZ2V0RHVlRGF0ZSgpKSA6ICctJ31gKTtcbiAgICBjb25zdCBwcmlvcml0eSA9IE1haW4uY3JlYXRlVGV4dCgncCcsIFsndmlldy1wcmlvcml0eSddLCAnUHJpb3JpdHk6ICcpO1xuICAgIGNvbnN0IHByaW9yaXR5TGV2ZWwgPSBNYWluLmNyZWF0ZVRleHQoJ3NwYW4nLCBbJ3ZpZXctcHJpb3JpdHktbGV2ZWwnLCBgdmlldy0ke3Rhc2suZ2V0UHJpb3JpdHkoKX1gXSwgY2FwaXRhbGl6ZSh0YXNrLmdldFByaW9yaXR5KCkpKTtcblxuICAgIHByaW9yaXR5LmFwcGVuZChwcmlvcml0eUxldmVsKTtcbiAgICBtb2RhbEJvdHRvbS5hcHBlbmQoZGVzYywgcHJvamVjdCwgZGF0ZSwgcHJpb3JpdHkpO1xuICAgIGRpYWxvZy5hcHBlbmQobW9kYWxUb3AsIG1vZGFsQm90dG9tKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJykuYXBwZW5kKGRpYWxvZyk7XG5cbiAgICB0b2dnbGVPdmVybGF5KCk7XG4gIH1cblxuICBjb25zdCBzaG93Q3JlYXRlRWRpdE1vZGFsID0gKHByb2plY3ROYW1lLCB0YXNrLCBtb2RlKSA9PiB7XG4gICAgY29uc3QgZGlhbG9nID0gTWFpbi5jcmVhdGVUZXh0KCdkaWFsb2cnLCBbYG1vZGFsLSR7bW9kZX1gXSwgJycpO1xuICAgIGRpYWxvZy5vcGVuID0gdHJ1ZTtcblxuICAgIGNvbnN0IG1vZGFsVG9wID0gTWFpbi5jcmVhdGVUZXh0KCdkaXYnLCBbYG1vZGFsLSR7bW9kZX0tdG9wYF0sICcnKTtcbiAgICBjb25zdCBzcGFuID0gTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgJycsIGAke2NhcGl0YWxpemUobW9kZSl9IFRhc2tgKTtcbiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBjb25zdCBleGl0SWNvbiA9IGNyZWF0ZUV4aXRJY29uKG1vZGUpO1xuXG4gICAgYnV0dG9uLmFwcGVuZChleGl0SWNvbik7XG4gICAgbW9kYWxUb3AuYXBwZW5kKHNwYW4sIGJ1dHRvbik7XG5cbiAgICBjb25zdCBmb3JtID0gTWFpbi5jcmVhdGVUZXh0KCdmb3JtJywgW2Btb2RhbC0ke21vZGV9LWJvdHRvbWBdLCAnJyk7XG4gICAgZm9ybS5tZXRob2QgPSAnZGlhbG9nJztcblxuICAgIGNvbnN0IGlucHV0VGV4dCA9IE1haW4uY3JlYXRlVGV4dCgnaW5wdXQnLCBbYCR7bW9kZX0tdGFzay10aXRsZWBdLCAnJyk7XG4gICAgaW5wdXRUZXh0LnR5cGUgPSAndGV4dCc7XG4gICAgaW5wdXRUZXh0LnBsYWNlaG9sZGVyID0gJ1RpdGxlJztcbiAgICBpbnB1dFRleHQucmVxdWlyZWQgPSB0cnVlO1xuICAgIGlmICh0YXNrKSBpbnB1dFRleHQudmFsdWUgPSB0YXNrLmdldFRpdGxlKCk7XG5cbiAgICBjb25zdCB0ZXh0YXJlYSA9IE1haW4uY3JlYXRlVGV4dCgndGV4dGFyZWEnLCBbYCR7bW9kZX0tdGFzay1kZXNjYF0sICcnKTtcbiAgICB0ZXh0YXJlYS5wbGFjZWhvbGRlciA9ICdEZXNjcmlwdGlvbic7XG4gICAgdGV4dGFyZWEucmVxdWlyZWQgPSB0cnVlO1xuICAgIGlmICh0YXNrKSB0ZXh0YXJlYS50ZXh0Q29udGVudCA9IHRhc2suZ2V0RGVzY3JpcHRpb24oKTtcblxuICAgIGNvbnN0IGRpdkRhdGUgPSBNYWluLmNyZWF0ZVRleHQoJ2RpdicsIFsnY29udGFpbmVyLWRhdGUnXSwgJycpO1xuXG4gICAgY29uc3QgbGFiZWwgPSBNYWluLmNyZWF0ZVRleHQoJ2xhYmVsJywgJycsICdEdWUgRGF0ZSA6Jyk7XG4gICAgbGFiZWwuaHRtbEZvciA9IGAke21vZGV9LXRhc2stZGF0ZWA7XG5cbiAgICBjb25zdCBpbnB1dERhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGlucHV0RGF0ZS50eXBlID0gJ2RhdGUnO1xuICAgIGlucHV0RGF0ZS5pZCA9IGAke21vZGV9LXRhc2stZGF0ZWA7XG4gICAgaWYgKHRhc2spIGlucHV0RGF0ZS52YWx1ZSA9IHRhc2suZ2V0RHVlRGF0ZSgpO1xuXG4gICAgZGl2RGF0ZS5hcHBlbmQobGFiZWwsIGlucHV0RGF0ZSk7XG5cbiAgICBjb25zdCBkaXZQcmlvcml0eSA9IE1haW4uY3JlYXRlVGV4dCgnZGl2JywgWydjb250YWluZXItcHJpb3JpdHknXSwgJycpO1xuICAgIGNvbnN0IHNwYW5Qcmlvcml0eSA9IE1haW4uY3JlYXRlVGV4dCgnc3BhbicsICcnLCAnUHJpb3JpdHkgOicpO1xuXG4gICAgZGl2UHJpb3JpdHkuYXBwZW5kKHNwYW5Qcmlvcml0eSk7XG5cbiAgICBjb25zdCBkaXZQcmlvcml0eUx2bCA9IE1haW4uY3JlYXRlVGV4dCgnZGl2JywgWydjb250YWluZXItcHJpb3JpdHktbGV2ZWwnXSwgJycpO1xuXG4gICAgWydsb3cnLCAnbWVkaXVtJywgJ2hpZ2gnXS5mb3JFYWNoKGxldmVsID0+IHtcbiAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgIGlucHV0LnR5cGUgPSAncmFkaW8nO1xuICAgICAgaW5wdXQubmFtZSA9IGAke21vZGV9LXRhc2stcHJpb3JpdHlgO1xuICAgICAgaW5wdXQuaWQgPSBgJHttb2RlfS0ke2xldmVsfWA7XG4gICAgICBpbnB1dC52YWx1ZSA9IGxldmVsO1xuICAgICAgaWYgKCh0YXNrICYmIHRhc2suZ2V0UHJpb3JpdHkoKSA9PT0gbGV2ZWwpIHx8ICghdGFzayAmJiBsZXZlbCA9PT0gJ2xvdycpKSBpbnB1dC5jaGVja2VkID0gdHJ1ZTtcblxuICAgICAgY29uc3QgbGFiZWwgPSBNYWluLmNyZWF0ZVRleHQoJ2xhYmVsJywgW2BsYWJlbC0ke2xldmVsfWBdLCBjYXBpdGFsaXplKGxldmVsKSk7XG4gICAgICBsYWJlbC5odG1sRm9yID0gYCR7bW9kZX0tJHtsZXZlbH1gO1xuXG4gICAgICBkaXZQcmlvcml0eUx2bC5hcHBlbmQoaW5wdXQsIGxhYmVsKTtcbiAgICB9KVxuXG4gICAgZGl2UHJpb3JpdHlMdmwucXVlcnlTZWxlY3RvcignaW5wdXRbdmFsdWU9XCJsb3dcIl0nKS5yZXF1aXJlZCA9IHRydWU7XG5cbiAgICBjb25zdCBhZGRFZGl0QnV0dG9uID0gTWFpbi5jcmVhdGVUZXh0KCdidXR0b24nLCAhdGFzayA/IFsnY3JlYXRlLWFkZC1idXR0b24nXSA6IFsnZWRpdC1jaGFuZ2UtYnV0dG9uJ10sICF0YXNrID8gJ0FkZCcgOiAnRWRpdCcpO1xuICAgIGFkZEVkaXRCdXR0b24udHlwZSA9ICdzdWJtaXQnO1xuXG4gICAgIXRhc2sgPyBhZGRDcmVhdGVIYW5kbGVyKGZvcm0sIHByb2plY3ROYW1lKSA6IGFkZEVkaXRIYW5kbGVyKGZvcm0sIHByb2plY3ROYW1lLCB0YXNrKTtcblxuICAgIGRpdlByaW9yaXR5LmFwcGVuZChkaXZQcmlvcml0eUx2bCwgYWRkRWRpdEJ1dHRvbik7XG4gICAgZm9ybS5hcHBlbmQoaW5wdXRUZXh0LCB0ZXh0YXJlYSwgZGl2RGF0ZSwgZGl2UHJpb3JpdHkpO1xuICAgIGRpYWxvZy5hcHBlbmQobW9kYWxUb3AsIGZvcm0pO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKS5hcHBlbmQoZGlhbG9nKTtcblxuICAgIHRvZ2dsZU92ZXJsYXkoKTtcbiAgfVxuXG4gIGNvbnN0IGNyZWF0ZUV4aXRJY29uID0gbW9kZSA9PiB7XG4gICAgY29uc3QgZXhpdEljb24gPSBNYWluLmNyZWF0ZUltZyhleGl0LCBbYCR7bW9kZX0tZXhpdGAsICdleGl0LWJ1dHRvbiddLCAnRXhpdCcpO1xuICAgIGFkZEV4aXRIYW5kbGVyKGV4aXRJY29uKTtcblxuICAgIHJldHVybiBleGl0SWNvbjtcbiAgfVxuXG4gIGNvbnN0IGFkZEV4aXRIYW5kbGVyID0gZWxlbWVudCA9PiB7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHJlbW92ZURpYWxvZyk7XG4gIH1cblxuICBjb25zdCBhZGREZWxldGVQcm9qZWN0SGFuZGxlciA9IChpY29uLCBwcm9qZWN0TmFtZSkgPT4ge1xuICAgIGljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICByZW1vdmVEaWFsb2coKTtcblxuICAgICAgU3RvcmFnZS5kZWxldGVQcm9qZWN0KHByb2plY3ROYW1lKTtcblxuICAgICAgZm9yIChjb25zdCBzcGFuIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXYtc3BhbicpKSB7XG4gICAgICAgIGlmIChzcGFuLnRleHRDb250ZW50ID09PSBwcm9qZWN0TmFtZSkge1xuICAgICAgICAgIE5hdi5yZW1vdmVQcm9qZWN0TGkoc3Bhbi5jbG9zZXN0KCdsaScpKTtcbiAgICAgICAgICBOYXYudXBkYXRlVGFza0NvdW50KCk7XG4gICAgICAgICAgaWYgKHNwYW4uY2xvc2VzdCgnLnByb2plY3QnKS5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIFNlY3Rpb24ucmVwbGFjZVNlY3Rpb24oKTtcbiAgICAgICAgICAgIE1haW4uY2hhbmdlRG9jdW1lbnRUaXRsZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmlldyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LW5hbWUnKS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIFNlY3Rpb24ucmVwbGFjZVNlY3Rpb24oY3VycmVudFZpZXcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgYWRkRGVsZXRlVGFza0hhbmRsZXIgPSAoYnV0dG9uLCBwcm9qZWN0TmFtZSwgdGFza1RpdGxlKSA9PiB7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgcmVtb3ZlRGlhbG9nKCk7XG5cbiAgICAgIFN0b3JhZ2UuZGVsZXRlVGFzayhwcm9qZWN0TmFtZSwgdGFza1RpdGxlKTtcbiAgICAgIE5hdi51cGRhdGVUYXNrQ291bnQoKTtcblxuICAgICAgY29uc3QgY3VycmVudFZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1uYW1lJykudGV4dENvbnRlbnQ7XG4gICAgICBTZWN0aW9uLnJlcGxhY2VTZWN0aW9uKGN1cnJlbnRWaWV3KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGFkZENyZWF0ZUhhbmRsZXIgPSAoZm9ybSwgcHJvamVjdE5hbWUpID0+IHtcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGUgPT4ge1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IGdldFRhc2tQcm9wZXJ0aWVzKGZvcm0sICdjcmVhdGUnKTtcblxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmVtb3ZlRGlhbG9nKCk7XG5cbiAgICAgIFN0b3JhZ2UuYWRkVGFzayhwcm9qZWN0TmFtZSwgLi4uT2JqZWN0LnZhbHVlcyhwcm9wZXJ0aWVzKSwgU3RvcmFnZS5nZXRJbmRleENvdW50KHByb2plY3ROYW1lKSk7XG4gICAgICBOYXYudXBkYXRlVGFza0NvdW50KCk7XG4gICAgICBjb25zdCBjdXJyZW50VmlldyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LW5hbWUnKS50ZXh0Q29udGVudDtcbiAgICAgIFNlY3Rpb24ucmVwbGFjZVNlY3Rpb24oY3VycmVudFZpZXcpO1xuICAgIH0pXG4gIH1cblxuICBjb25zdCBhZGRFZGl0SGFuZGxlciA9IChmb3JtLCBwcm9qZWN0TmFtZSwgdGFzaykgPT4ge1xuICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgZSA9PiB7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0gZ2V0VGFza1Byb3BlcnRpZXMoZm9ybSwgJ2VkaXQnKTtcblxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmVtb3ZlRGlhbG9nKCk7XG5cbiAgICAgIGNvbnN0IG9sZFRpdGxlID0gdGFzay5nZXRUaXRsZSgpO1xuXG4gICAgICBTdG9yYWdlLnVwZGF0ZVRhc2socHJvamVjdE5hbWUsIG9sZFRpdGxlLCAuLi5PYmplY3QudmFsdWVzKHByb3BlcnRpZXMpKTtcbiAgICAgIE5hdi51cGRhdGVUYXNrQ291bnQoKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRWaWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbmFtZScpLnRleHRDb250ZW50O1xuICAgICAgU2VjdGlvbi5yZXBsYWNlU2VjdGlvbihjdXJyZW50Vmlldyk7XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IHJlbW92ZURpYWxvZyA9ICgpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaWFsb2cnKS5yZW1vdmUoKTtcbiAgICB0b2dnbGVPdmVybGF5KCk7XG4gIH1cblxuICBjb25zdCB0b2dnbGVPdmVybGF5ID0gKCkgPT4ge1xuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcub3ZlcmxheScpO1xuICAgIG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9IG92ZXJsYXkuc3R5bGUuZGlzcGxheSA9PT0gJ2Jsb2NrJyA/ICdub25lJyA6ICdibG9jayc7XG4gIH1cblxuICBjb25zdCBnZXRUYXNrUHJvcGVydGllcyA9IChmb3JtLCBtb2RlKSA9PiB7XG4gICAgY29uc3QgdGl0bGUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoYC4ke21vZGV9LXRhc2stdGl0bGVgKS52YWx1ZTtcbiAgICBjb25zdCBkZXNjID0gZm9ybS5xdWVyeVNlbGVjdG9yKGAuJHttb2RlfS10YXNrLWRlc2NgKS52YWx1ZTtcbiAgICBjb25zdCBkYXRlVmFsdWUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoYCMke21vZGV9LXRhc2stZGF0ZWApLnZhbHVlO1xuICAgIGNvbnN0IGRhdGUgPSBkYXRlVmFsdWUgfHwgbnVsbDtcbiAgICBjb25zdCBwcmlvcml0eSA9IGZvcm0ucXVlcnlTZWxlY3RvcihgaW5wdXRbbmFtZT1cIiR7bW9kZX0tdGFzay1wcmlvcml0eVwiXTpjaGVja2VkYCkudmFsdWU7XG5cbiAgICByZXR1cm4geyB0aXRsZSwgZGVzYywgZGF0ZSwgcHJpb3JpdHkgfTtcbiAgfVxuXG4gIGNvbnN0IGNhcGl0YWxpemUgPSB3b3JkID0+IHtcbiAgICByZXR1cm4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSk7XG4gIH1cblxuICBjb25zdCBkYXlNb250aFllYXIgPSBkYXRlID0+IHtcbiAgICByZXR1cm4gZGF0ZSA/IGZvcm1hdChuZXcgRGF0ZShkYXRlKSwgJ2RkL01NL3l5eXknKSA6ICcnO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzaG93RGVsZXRlTW9kYWwsXG4gICAgc2hvd1ZpZXdNb2RhbCxcbiAgICBzaG93Q3JlYXRlRWRpdE1vZGFsLFxuICAgIGFkZEV4aXRIYW5kbGVyXG4gIH1cbn0pKCk7XG4iLCJpbXBvcnQgeyBmb3JtYXQsIGlzUGFzdCB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IE1haW4gfSBmcm9tICcuL01haW4uanMnO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnLi9EaWFsb2cuanMnO1xuaW1wb3J0IFN0b3JhZ2UgZnJvbSAnLi4vY2xhc3Nlcy9TdG9yYWdlLmpzJztcbmltcG9ydCBlZGl0IGZyb20gJy4uL2ljb25zL3NxdWFyZS1lZGl0LW91dGxpbmUuc3ZnJztcbmltcG9ydCB0cmFzaCBmcm9tICcuLi9pY29ucy9kZWxldGUuc3ZnJztcbmltcG9ydCBhZGQgZnJvbSAnLi4vaWNvbnMvcGx1cy5zdmcnO1xuXG5leHBvcnQgY29uc3QgU2VjdGlvbiA9ICgoKSA9PiB7XG4gIGNvbnN0IGNyZWF0ZVNlY3Rpb24gPSBwcm9qZWN0TmFtZSA9PiB7XG4gICAgY29uc3Qgc2VjdGlvbiA9IE1haW4uY3JlYXRlVGV4dCgnc2VjdGlvbicsIFsnY29udGFpbmVyLXByb2plY3QnXSwgJycpO1xuICAgIGNvbnN0IGgxID0gTWFpbi5jcmVhdGVUZXh0KCdoMScsIFsncHJvamVjdC1uYW1lJ10sIHByb2plY3ROYW1lKTtcbiAgICBjb25zdCBtZW51ID0gTWFpbi5jcmVhdGVUZXh0KCdtZW51JywgWyd0YXNrLWxpc3QnXSwgJycpO1xuXG4gICAgc2VjdGlvbi5hcHBlbmQoaDEsIG1lbnUpO1xuXG4gICAgaWYgKFN0b3JhZ2UuaXNQcm9qZWN0RW1wdHkocHJvamVjdE5hbWUpKSB7XG4gICAgICBoMS5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgY3JlYXRlRW1wdHlUYXNrKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBhbGxUYXNrcyA9IFN0b3JhZ2UuZ2V0QWxsVGFza3MocHJvamVjdE5hbWUpO1xuICAgICAgbWVudS5hcHBlbmQoLi4uYWxsVGFza3MubWFwKHRhc2sgPT4gY3JlYXRlVGFza0xpKHRhc2spKSk7XG4gICAgfVxuXG4gICAgaWYgKCFbJ1RvZGF5JywgJ1RoaXMgd2VlaycsICdJbXBvcnRhbnQnXS5pbmNsdWRlcyhwcm9qZWN0TmFtZSkpIHtcbiAgICAgIG1lbnUuYXBwZW5kKGNyZWF0ZUFkZFRhc2tMaSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VjdGlvbjtcbiAgfVxuXG4gIGNvbnN0IGNyZWF0ZUVtcHR5U2VjdGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCBzZWN0aW9uID0gTWFpbi5jcmVhdGVUZXh0KCdzZWN0aW9uJywgWydjb250YWluZXItcHJvamVjdCddLCAnJyk7XG4gICAgY29uc3QgaDEgPSBNYWluLmNyZWF0ZVRleHQoJ2gxJywgWydwcm9qZWN0LW5hbWUnXSwgJ1NlbGVjdCBhIHByb2plY3QnKTtcblxuICAgIHNlY3Rpb24uYXBwZW5kKGgxKTtcblxuICAgIHJldHVybiBzZWN0aW9uO1xuICB9XG5cbiAgY29uc3QgY3JlYXRlRW1wdHlUYXNrID0gKCkgPT4ge1xuICAgIHJldHVybiBNYWluLmNyZWF0ZVRleHQoJ2gyJywgWydlbXB0eS10YXNrJ10sICdJdFxcJ3MgcXVpdGUgZW1wdHkgaGVyZS4uLicpXG4gIH1cblxuICBjb25zdCBjcmVhdGVUYXNrTGkgPSB0YXNrID0+IHtcbiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgY29uc3QgYnV0dG9uID0gTWFpbi5jcmVhdGVUZXh0KCdidXR0b24nLCBbJ3Rhc2snLCBgdGFzay0ke3Rhc2suZ2V0UHJpb3JpdHkoKX1gXSwgJycpO1xuICAgIGFkZFZpZXdIYW5kbGVyKGJ1dHRvbik7XG5cbiAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgbGFiZWwuaHRtbEZvciA9IGBjaGVja2JveCR7dGFzay5nZXRJbmRleCgpfWA7XG5cbiAgICBjb25zdCBpbnB1dCA9IE1haW4uY3JlYXRlVGV4dCgnaW5wdXQnLCBbJ3Rhc2stY2hlY2tib3gnXSwgJycpO1xuICAgIGlucHV0LnR5cGUgPSAnY2hlY2tib3gnO1xuICAgIGlucHV0LmlkID0gYGNoZWNrYm94JHt0YXNrLmdldEluZGV4KCl9YDtcbiAgICBpbnB1dC5jaGVja2VkID0gdGFzay5nZXRDb21wbGV0ZWQoKTtcbiAgICBhZGRDaGVja0hhbmRsZXIoaW5wdXQpO1xuXG4gICAgY29uc3QgZGl2ID0gTWFpbi5jcmVhdGVUZXh0KCdkaXYnLCBbJ2NoZWNrYm94LWRpdiddLCAnJyk7XG5cbiAgICBsYWJlbC5hcHBlbmQoaW5wdXQsIGRpdik7XG5cbiAgICBjb25zdCBoMiA9IE1haW4uY3JlYXRlVGV4dCgnaDInLCBpc1Rhc2tDb21wbGV0ZWQodGFzay5nZXRDb21wbGV0ZWQoKSksIHRhc2suZ2V0VGl0bGUoKSk7XG4gICAgY29uc3Qgc3BhbiA9IE1haW4uY3JlYXRlVGV4dCgnc3BhbicsIGlzVGFza0V4cGlyZWQodGFzay5nZXREdWVEYXRlKCkpLCBkYXlNb250aFllYXIodGFzay5nZXREdWVEYXRlKCkpKTtcblxuICAgIGNvbnN0IGVkaXRJY29uID0gTWFpbi5jcmVhdGVJbWcoZWRpdCwgWyd0YXNrLWljb24nLCAndGFzay1lZGl0LWJ1dHRvbiddLCAnRWRpdCcpO1xuICAgIGFkZEVkaXRIYW5kbGVyKGVkaXRJY29uKTtcblxuICAgIGNvbnN0IHRyYXNoSWNvbiA9IE1haW4uY3JlYXRlSW1nKHRyYXNoLCBbJ3Rhc2staWNvbicsICd0YXNrLXRyYXNoLWJ1dHRvbiddLCAnVHJhc2gnKTtcbiAgICBhZGRUcmFzaEhhbmRsZXIodHJhc2hJY29uKTtcblxuICAgIGJ1dHRvbi5hcHBlbmQobGFiZWwsIGgyLCBzcGFuLCBlZGl0SWNvbiwgdHJhc2hJY29uKTtcbiAgICBsaS5hcHBlbmQoYnV0dG9uKTtcblxuICAgIHJldHVybiBsaTtcbiAgfVxuXG4gIGNvbnN0IGNyZWF0ZUFkZFRhc2tMaSA9ICgpID0+IHtcbiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgY29uc3QgYnV0dG9uID0gTWFpbi5jcmVhdGVUZXh0KCdidXR0b24nLCBbJ3Rhc2snLCAnYWRkLXRhc2snXSwgJycpO1xuICAgIGNvbnN0IGltZyA9IE1haW4uY3JlYXRlSW1nKGFkZCwgJycsICdBZGQnKTtcbiAgICBjb25zdCBzcGFuID0gTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgJycsICdBZGQgVGFzaycpO1xuXG4gICAgYnV0dG9uLmFwcGVuZChpbWcsIHNwYW4pO1xuICAgIGxpLmFwcGVuZChidXR0b24pO1xuICAgIGFkZE5ld1Rhc2tIYW5kbGVyKGxpKTtcblxuICAgIHJldHVybiBsaTtcbiAgfVxuXG4gIGNvbnN0IHJlbW92ZVRhc2tMaSA9IGxpID0+IHtcbiAgICBsaS5yZW1vdmUoKTtcblxuICAgIGNvbnN0IGgxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtbmFtZScpO1xuXG4gICAgaWYgKFN0b3JhZ2UuaXNQcm9qZWN0RW1wdHkoaDEudGV4dENvbnRlbnQpKSB7XG4gICAgICBoMS5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgY3JlYXRlRW1wdHlUYXNrKCkpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGFkZE5ld1Rhc2tIYW5kbGVyID0gbGkgPT4ge1xuICAgIGxpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdC1uYW1lJykudGV4dENvbnRlbnQ7XG5cbiAgICAgIERpYWxvZy5zaG93Q3JlYXRlRWRpdE1vZGFsKHByb2plY3ROYW1lLCBudWxsLCAnY3JlYXRlJyk7XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGFkZFZpZXdIYW5kbGVyID0gZWxlID0+IHtcbiAgICBlbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgIGlmIChbJ3Rhc2stY2hlY2tib3gnLCAnY2hlY2tib3gtZGl2J10uaW5jbHVkZXMoZS50YXJnZXQuY2xhc3NOYW1lKSkgcmV0dXJuO1xuXG4gICAgICBjb25zdCB0YXNrVGl0bGUgPSBlLnRhcmdldC5jbG9zZXN0KCcudGFzaycpLnF1ZXJ5U2VsZWN0b3IoJy50YXNrLXRpdGxlJykudGV4dENvbnRlbnQ7XG4gICAgICBjb25zdCBwcm9qZWN0TmFtZSA9IFN0b3JhZ2UuZ2V0UHJvamVjdE5hbWUodGFza1RpdGxlKTtcblxuICAgICAgRGlhbG9nLnNob3dWaWV3TW9kYWwocHJvamVjdE5hbWUsIFN0b3JhZ2UuZ2V0VGFzayhwcm9qZWN0TmFtZSwgdGFza1RpdGxlKSk7XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGFkZENoZWNrSGFuZGxlciA9IGlucHV0ID0+IHtcbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgY29uc3QgdGFza0hlYWRlciA9IGUudGFyZ2V0LmNsb3Nlc3QoJy50YXNrJykucXVlcnlTZWxlY3RvcignLnRhc2stdGl0bGUnKTtcbiAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gU3RvcmFnZS5nZXRQcm9qZWN0TmFtZSh0YXNrSGVhZGVyLnRleHRDb250ZW50KTtcblxuICAgICAgdGFza0hlYWRlci5jbGFzc0xpc3QudG9nZ2xlKCdjb21wbGV0ZWQnKTtcblxuICAgICAgU3RvcmFnZS50b2dnbGVUYXNrQ29tcGxldGVkKHByb2plY3ROYW1lLCB0YXNrSGVhZGVyLnRleHRDb250ZW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGFkZEVkaXRIYW5kbGVyID0gaWNvbiA9PiB7XG4gICAgaWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgY29uc3QgdGFza1RpdGxlID0gZS50YXJnZXQuY2xvc2VzdCgnLnRhc2snKS5xdWVyeVNlbGVjdG9yKCcudGFzay10aXRsZScpLnRleHRDb250ZW50O1xuICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBTdG9yYWdlLmdldFByb2plY3ROYW1lKHRhc2tUaXRsZSk7XG5cbiAgICAgIERpYWxvZy5zaG93Q3JlYXRlRWRpdE1vZGFsKHByb2plY3ROYW1lLCBTdG9yYWdlLmdldFRhc2socHJvamVjdE5hbWUsIHRhc2tUaXRsZSksICdlZGl0Jyk7XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGFkZFRyYXNoSGFuZGxlciA9IGljb24gPT4ge1xuICAgIGljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGNvbnN0IHRhc2tUaXRsZSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy50YXNrJykucXVlcnlTZWxlY3RvcignLnRhc2stdGl0bGUnKS50ZXh0Q29udGVudDtcbiAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gU3RvcmFnZS5nZXRQcm9qZWN0TmFtZSh0YXNrVGl0bGUpO1xuXG4gICAgICBEaWFsb2cuc2hvd0RlbGV0ZU1vZGFsKHByb2plY3ROYW1lLCB0YXNrVGl0bGUpO1xuICAgIH0pXG4gIH1cblxuICBjb25zdCByZXBsYWNlU2VjdGlvbiA9IHByb2plY3ROYW1lID0+IHtcbiAgICBwcm9qZWN0TmFtZSA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXItcHJvamVjdCcpLnJlcGxhY2VXaXRoKGNyZWF0ZVNlY3Rpb24ocHJvamVjdE5hbWUpKVxuICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyLXByb2plY3QnKS5yZXBsYWNlV2l0aChjcmVhdGVFbXB0eVNlY3Rpb24oKSk7XG4gIH1cblxuICBjb25zdCBkYXlNb250aFllYXIgPSBkYXRlID0+IHtcbiAgICByZXR1cm4gZGF0ZSA/IGZvcm1hdChuZXcgRGF0ZShkYXRlKSwgJ2RkL01NL3l5eXknKSA6ICctJztcbiAgfVxuXG4gIGNvbnN0IGlzVGFza0NvbXBsZXRlZCA9IGNvbXBsZXRlZCA9PiB7XG4gICAgcmV0dXJuIGNvbXBsZXRlZCA/IFsndGFzay10aXRsZScsICdjb21wbGV0ZWQnXSA6IFsndGFzay10aXRsZSddO1xuICB9XG5cbiAgY29uc3QgaXNUYXNrRXhwaXJlZCA9IGRhdGUgPT4ge1xuICAgIHJldHVybiBpc1Bhc3QobmV3IERhdGUoZGF0ZSkpICYmIGRhdGUgPyBbJ3Rhc2stZGF0ZScsICdleHBpcmVkJ10gOiBbJ3Rhc2stZGF0ZSddO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVTZWN0aW9uLFxuICAgIGNyZWF0ZUVtcHR5U2VjdGlvbixcbiAgICByZW1vdmVUYXNrTGksXG4gICAgcmVwbGFjZVNlY3Rpb25cbiAgfVxufSkoKTtcbiIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNQYXN0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBwYXN0P1xuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBwYXN0P1xuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBub3QgcHJlc2VudCBpbiB0aGUgRlAgc3VibW9kdWxlIGFzXG4gKiA+IGl0IHVzZXMgYERhdGUubm93KClgIGludGVybmFsbHkgaGVuY2UgaW1wdXJlIGFuZCBjYW4ndCBiZSBzYWZlbHkgY3VycmllZC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyBpbiB0aGUgcGFzdFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0LCBpcyAyIEp1bHkgMjAxNCBpbiB0aGUgcGFzdD9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzUGFzdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Bhc3QoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpIDwgRGF0ZS5ub3coKTtcbn0iLCJpbXBvcnQgeyBNYWluIH0gZnJvbSAnLi9NYWluLmpzJztcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tICcuL1NlY3Rpb24uanMnO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnLi9EaWFsb2cuanMnO1xuaW1wb3J0IFN0b3JhZ2UgZnJvbSAnLi4vY2xhc3Nlcy9TdG9yYWdlLmpzJztcbmltcG9ydCB0b2RheSBmcm9tICcuLi9pY29ucy9jYWxlbmRhci10b2RheS5zdmcnO1xuaW1wb3J0IHdlZWsgZnJvbSAnLi4vaWNvbnMvY2FsZW5kYXItd2Vlay5zdmcnO1xuaW1wb3J0IGltcG9ydGFudCBmcm9tICcuLi9pY29ucy9jYWxlbmRhci1hbGVydC5zdmcnO1xuaW1wb3J0IGxpc3QgZnJvbSAnLi4vaWNvbnMvZm9ybWF0LWxpc3QtYnVsbGV0ZWQuc3ZnJztcbmltcG9ydCBjbG9zZSBmcm9tICcuLi9pY29ucy9jbG9zZS5zdmcnO1xuaW1wb3J0IGFkZCBmcm9tICcuLi9pY29ucy9wbHVzLnN2Zyc7XG5cbmV4cG9ydCBjb25zdCBOYXYgPSAoKCkgPT4ge1xuICBjb25zdCBjcmVhdGVOYXYgPSAoKSA9PiB7XG4gICAgY29uc3QgbmF2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmF2Jyk7XG4gICAgY29uc3QgbmF2VG9wID0gTWFpbi5jcmVhdGVUZXh0KCdtZW51JywgWyduYXYtdG9wJ10sICcnKTtcblxuICAgIGNvbnN0IG5hdlRvcExpID0gW1xuICAgICAgY3JlYXRlUHJvamVjdExpKFxuICAgICAgICBbJ25hdi1idXR0b24nLCAncHJvamVjdCcsICdzZWxlY3RlZCddLFxuICAgICAgICBNYWluLmNyZWF0ZUltZyh0b2RheSwgWyduYXYtaWNvbiddLCAnVG9kYXknKSxcbiAgICAgICAgTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgWyduYXYtc3BhbiddLCAnVG9kYXknKSxcbiAgICAgICAgTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgWyd0YXNrLWNvdW50J10sIGdldFRhc2tDb3VudFN0cmluZygnVG9kYXknKSlcbiAgICAgICksXG4gICAgICBjcmVhdGVQcm9qZWN0TGkoXG4gICAgICAgIFsnbmF2LWJ1dHRvbicsICdwcm9qZWN0J10sXG4gICAgICAgIE1haW4uY3JlYXRlSW1nKHdlZWssIFsnbmF2LWljb24nXSwgJ1RoaXMgd2VlaycpLFxuICAgICAgICBNYWluLmNyZWF0ZVRleHQoJ3NwYW4nLCBbJ25hdi1zcGFuJ10sICdUaGlzIHdlZWsnKSxcbiAgICAgICAgTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgWyd0YXNrLWNvdW50J10sIGdldFRhc2tDb3VudFN0cmluZygnVGhpcyB3ZWVrJykpXG4gICAgICApLFxuICAgICAgY3JlYXRlUHJvamVjdExpKFxuICAgICAgICBbJ25hdi1idXR0b24nLCAncHJvamVjdCddLFxuICAgICAgICBNYWluLmNyZWF0ZUltZyhpbXBvcnRhbnQsIFsnbmF2LWljb24nXSwgJ0ltcG9ydGFudCcpLFxuICAgICAgICBNYWluLmNyZWF0ZVRleHQoJ3NwYW4nLCBbJ25hdi1zcGFuJ10sICdJbXBvcnRhbnQnKSxcbiAgICAgICAgTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgWyd0YXNrLWNvdW50J10sIGdldFRhc2tDb3VudFN0cmluZygnSW1wb3J0YW50JykpXG4gICAgICApXG4gICAgXVxuXG4gICAgbmF2VG9wLmFwcGVuZCguLi5uYXZUb3BMaSk7XG5cbiAgICBjb25zdCBkaXYgPSBNYWluLmNyZWF0ZVRleHQoJ2RpdicsIFsnbmF2LWJvdHRvbSddLCAnJyk7XG4gICAgY29uc3QgaDEgPSBNYWluLmNyZWF0ZVRleHQoJ2gxJywgJycsICdQcm9qZWN0cycpO1xuICAgIGNvbnN0IG5hdlByb2plY3RzID0gTWFpbi5jcmVhdGVUZXh0KCdtZW51JywgWyduYXYtcHJvamVjdHMnXSwgJycpO1xuICAgIGNvbnN0IGFsbFByb2plY3RzID0gU3RvcmFnZS5nZXRBbGxQcm9qZWN0cygpLmZpbHRlcihwcm9qZWN0ID0+ICFbJ1RvZGF5JywgJ1RoaXMgd2VlaycsICdJbXBvcnRhbnQnXS5pbmNsdWRlcyhwcm9qZWN0LmdldE5hbWUoKSkpO1xuXG4gICAgY29uc3QgbmF2UHJvamVjdHNMaSA9IGFsbFByb2plY3RzLm1hcChwcm9qZWN0ID0+XG4gICAgICBjcmVhdGVQcm9qZWN0TGkoXG4gICAgICAgIFsnbmF2LWJ1dHRvbicsICdwcm9qZWN0J10sXG4gICAgICAgIE1haW4uY3JlYXRlSW1nKGxpc3QsIFsnbmF2LWljb24nXSwgJ0xpc3QnKSxcbiAgICAgICAgTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgWyduYXYtc3BhbiddLCBwcm9qZWN0LmdldE5hbWUoKSksXG4gICAgICAgIE1haW4uY3JlYXRlVGV4dCgnc3BhbicsIFsndGFzay1jb3VudCddLCBnZXRUYXNrQ291bnRTdHJpbmcocHJvamVjdC5nZXROYW1lKCkpKSxcbiAgICAgICAgY3JlYXRlRGVsZXRlSWNvbigpXG4gICAgICApXG4gICAgKVxuXG4gICAgbmF2UHJvamVjdHMuYXBwZW5kKC4uLm5hdlByb2plY3RzTGksIGNyZWF0ZUFkZFByb2plY3RMaSgpKTtcbiAgICBkaXYuYXBwZW5kKGgxLCBuYXZQcm9qZWN0cyk7XG4gICAgbmF2LmFwcGVuZChuYXZUb3AsIGRpdik7XG5cbiAgICByZXR1cm4gbmF2O1xuICB9XG5cbiAgY29uc3QgY3JlYXRlUHJvamVjdExpID0gKGNsYXNzTmFtZSwgaW1nLCBuYW1lLCB0YXNrQ291bnQgPSBudWxsLCBkZWxldGVJY29uID0gbnVsbCkgPT4ge1xuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBjb25zdCBidXR0b24gPSBNYWluLmNyZWF0ZVRleHQoJ2J1dHRvbicsIGNsYXNzTmFtZSwgJycpO1xuXG4gICAgIWRlbGV0ZUljb24gPyBidXR0b24uYXBwZW5kKGltZywgbmFtZSwgdGFza0NvdW50KSA6IGJ1dHRvbi5hcHBlbmQoaW1nLCBuYW1lLCB0YXNrQ291bnQsIGRlbGV0ZUljb24pO1xuICAgIGxpLmFwcGVuZChidXR0b24pO1xuXG4gICAgYWRkU2VsZWN0UHJvamVjdEhhbmRsZXIobGkpO1xuXG4gICAgcmV0dXJuIGxpO1xuICB9XG5cbiAgY29uc3QgY3JlYXRlQWRkUHJvamVjdExpID0gKCkgPT4ge1xuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICBjb25zdCBidXR0b24gPSBNYWluLmNyZWF0ZVRleHQoJ2J1dHRvbicsIFsnbmF2LWJ1dHRvbicsICdhZGQtcHJvamVjdCddLCAnJyk7XG4gICAgY29uc3QgaW1nID0gTWFpbi5jcmVhdGVJbWcoYWRkLCBbJ25hdi1pY29uJ10sICdBZGQnKTtcbiAgICBjb25zdCBzcGFuID0gTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgWyduYXYtc3BhbiddLCAnQWRkIFByb2plY3QnKTtcblxuICAgIGJ1dHRvbi5hcHBlbmQoaW1nLCBzcGFuKTtcbiAgICBsaS5hcHBlbmQoYnV0dG9uKTtcblxuICAgIGFkZE5ld1Byb2plY3RIYW5kbGVyKGxpKTtcblxuICAgIHJldHVybiBsaTtcbiAgfVxuXG4gIGNvbnN0IGNyZWF0ZURlbGV0ZUljb24gPSAoKSA9PiB7XG4gICAgY29uc3QgaW1nID0gTWFpbi5jcmVhdGVJbWcoY2xvc2UsIFsnbmF2LWljb24nLCAncHJvamVjdC1kZWxldGUnXSwgJ0RlbGV0ZScpO1xuICAgIGFkZERlbGV0ZUhhbmRsZXIoaW1nKTtcblxuICAgIHJldHVybiBpbWc7XG4gIH1cblxuICBjb25zdCBjcmVhdGVJbnB1dFByb2plY3QgPSAoKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gTWFpbi5jcmVhdGVUZXh0KCdkaXYnLCBbJ2NvbnRhaW5lci1hZGQtcHJvamVjdCddLCAnJyk7XG5cbiAgICBjb25zdCBpbnB1dCA9IE1haW4uY3JlYXRlVGV4dCgnaW5wdXQnLCBbJ2lucHV0LXByb2plY3QnXSwgJycpO1xuICAgIGlucHV0LnR5cGUgPSAndGV4dCc7XG5cbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIGNvbnN0IGFkZEJ1dHRvbiA9IE1haW4uY3JlYXRlVGV4dCgnYnV0dG9uJywgWydwcm9qZWN0LWFkZCddLCAnQWRkJyk7XG5cbiAgICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjcmVhdGVOZXdQcm9qZWN0KGlucHV0LnZhbHVlKTtcbiAgICB9KVxuXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGUgPT4ge1xuICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgIGNyZWF0ZU5ld1Byb2plY3QoaW5wdXQudmFsdWUpO1xuICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBjYW5jZWxCdXR0b24gPSBNYWluLmNyZWF0ZVRleHQoJ2J1dHRvbicsIFsncHJvamVjdC1jYW5jZWwnXSwgJ0NhbmNlbCcpO1xuXG4gICAgY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY2FuY2VsTmV3UHJvamVjdCgpO1xuICAgIH0pXG5cbiAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XG4gICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgIGNhbmNlbE5ld1Byb2plY3QoKTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgZGl2LmFwcGVuZChhZGRCdXR0b24sIGNhbmNlbEJ1dHRvbik7XG4gICAgY29udGFpbmVyLmFwcGVuZChpbnB1dCwgZGl2KTtcblxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cblxuICBjb25zdCByZW1vdmVQcm9qZWN0TGkgPSBsaSA9PiB7XG4gICAgbGkucmVtb3ZlKCk7XG4gIH1cblxuICBjb25zdCBhZGRTZWxlY3RQcm9qZWN0SGFuZGxlciA9IGxpID0+IHtcbiAgICBsaS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VsZWN0ZWQnKTtcblxuICAgICAgaWYgKHNlbGVjdGVkQnV0dG9uKSBzZWxlY3RlZEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuXG4gICAgICBjb25zdCBwcm9qZWN0QnV0dG9uID0gZS50YXJnZXQuY2xvc2VzdCgnLm5hdi1idXR0b24nKTtcbiAgICAgIHByb2plY3RCdXR0b24uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcblxuICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBwcm9qZWN0QnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJy5uYXYtc3BhbicpLnRleHRDb250ZW50O1xuXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyLXByb2plY3QnKS5yZXBsYWNlV2l0aChTZWN0aW9uLmNyZWF0ZVNlY3Rpb24ocHJvamVjdE5hbWUpKTtcblxuICAgICAgTWFpbi5jaGFuZ2VEb2N1bWVudFRpdGxlKCk7XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGFkZE5ld1Byb2plY3RIYW5kbGVyID0gbGkgPT4ge1xuICAgIGxpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICBlLnRhcmdldC5wYXJlbnROb2RlLnJlbW92ZSgpO1xuXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2LWJvdHRvbScpLmFwcGVuZChjcmVhdGVJbnB1dFByb2plY3QoKSk7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtcHJvamVjdCcpLmZvY3VzKCk7XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGFkZERlbGV0ZUhhbmRsZXIgPSBpY29uID0+IHtcbiAgICBpY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBjb25zdCBwcm9qZWN0QnV0dG9uID0gZS50YXJnZXQuY2xvc2VzdCgnLnByb2plY3QnKTtcbiAgICAgIGNvbnN0IHByb2plY3ROYW1lID0gcHJvamVjdEJ1dHRvbi5xdWVyeVNlbGVjdG9yKCcubmF2LXNwYW4nKS50ZXh0Q29udGVudDtcblxuICAgICAgRGlhbG9nLnNob3dEZWxldGVNb2RhbChwcm9qZWN0TmFtZSk7XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0IGNyZWF0ZU5ld1Byb2plY3QgPSBwcm9qZWN0TmFtZSA9PiB7XG4gICAgaWYgKHByb2plY3ROYW1lID09PSAnJykge1xuICAgICAgYWxlcnQoJ1Byb2plY3QgbmFtZSBjYW5ub3QgYmUgZW1wdHknKTtcbiAgICB9IGVsc2UgaWYgKFN0b3JhZ2UuY29udGFpbnNQcm9qZWN0KHByb2plY3ROYW1lKSkge1xuICAgICAgYWxlcnQoJ1Byb2plY3QgbmFtZSBhbHJlYWR5IGV4aXN0cycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBTdG9yYWdlLmFkZFByb2plY3QocHJvamVjdE5hbWUpO1xuXG4gICAgICBjb25zdCBsaSA9IGNyZWF0ZVByb2plY3RMaShcbiAgICAgICAgWyduYXYtYnV0dG9uJywgJ3Byb2plY3QnXSxcbiAgICAgICAgTWFpbi5jcmVhdGVJbWcobGlzdCwgWyduYXYtaWNvbiddLCAnTGlzdCcpLFxuICAgICAgICBNYWluLmNyZWF0ZVRleHQoJ3NwYW4nLCBbJ25hdi1zcGFuJ10sIHByb2plY3ROYW1lKSxcbiAgICAgICAgTWFpbi5jcmVhdGVUZXh0KCdzcGFuJywgWyd0YXNrLWNvdW50J10sICcnKSxcbiAgICAgICAgY3JlYXRlRGVsZXRlSWNvbigpXG4gICAgICApXG5cbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXItYWRkLXByb2plY3QnKS5yZW1vdmUoKTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uYXYtcHJvamVjdHMnKS5hcHBlbmQobGksIGNyZWF0ZUFkZFByb2plY3RMaSgpKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjYW5jZWxOZXdQcm9qZWN0ID0gKCkgPT4ge1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXItYWRkLXByb2plY3QnKS5yZW1vdmUoKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2LXByb2plY3RzJykuYXBwZW5kKGNyZWF0ZUFkZFByb2plY3RMaSgpKTtcbiAgfVxuXG4gIGNvbnN0IGdldFRhc2tDb3VudFN0cmluZyA9IHByb2plY3ROYW1lID0+IHtcbiAgICBjb25zdCB0YXNrQ291bnQgPSBTdG9yYWdlLmdldFRhc2tDb3VudChwcm9qZWN0TmFtZSk7XG4gICAgcmV0dXJuIHRhc2tDb3VudCA9PT0gMCA/ICcnIDogdGFza0NvdW50LnRvU3RyaW5nKCk7XG4gIH1cblxuICBjb25zdCB1cGRhdGVUYXNrQ291bnQgPSAoKSA9PiB7XG4gICAgY29uc3QgcHJvamVjdEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdCcpO1xuXG4gICAgcHJvamVjdEJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgY29uc3QgcHJvamVjdE5hbWUgPSBidXR0b24ucXVlcnlTZWxlY3RvcignLm5hdi1zcGFuJykudGV4dENvbnRlbnQ7XG4gICAgICBidXR0b24ucXVlcnlTZWxlY3RvcignLnRhc2stY291bnQnKS50ZXh0Q29udGVudCA9IGdldFRhc2tDb3VudFN0cmluZyhwcm9qZWN0TmFtZSk7XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlTmF2LFxuICAgIHJlbW92ZVByb2plY3RMaSxcbiAgICB1cGRhdGVUYXNrQ291bnRcbiAgfVxufSkoKTtcbiIsImltcG9ydCB7IEhlYWRlciB9IGZyb20gJy4vSGVhZGVyLmpzJztcbmltcG9ydCB7IEZvb3RlciB9IGZyb20gJy4vRm9vdGVyLmpzJztcbmltcG9ydCB7IE5hdiB9IGZyb20gJy4vTmF2LmpzJztcbmltcG9ydCB7IFNlY3Rpb24gfSBmcm9tICcuL1NlY3Rpb24uanMnO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnLi9EaWFsb2cuanMnO1xuaW1wb3J0IFN0b3JhZ2UgZnJvbSAnLi4vY2xhc3Nlcy9TdG9yYWdlLmpzJztcblxuZXhwb3J0IGNvbnN0IE1haW4gPSAoKCkgPT4ge1xuICBjb25zdCBpbml0aWFsaXplID0gKCkgPT4ge1xuICAgIGFkZENTU1RlbXBsYXRlKCk7XG4gICAgU3RvcmFnZS51cGRhdGVBbGxQcm9qZWN0cygpO1xuXG4gICAgY29uc3QgbWFpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ21haW4nKTtcbiAgICBjb25zdCBzaWRlTmF2ID0gTmF2LmNyZWF0ZU5hdigpO1xuICAgIGNvbnN0IHZpZXcgPSBTZWN0aW9uLmNyZWF0ZVNlY3Rpb24oJ1RvZGF5Jyk7XG5cbiAgICBjb25zdCBvdmVybGF5ID0gY3JlYXRlVGV4dCgnZGl2JywgWydvdmVybGF5J10sICcnKTtcbiAgICBEaWFsb2cuYWRkRXhpdEhhbmRsZXIob3ZlcmxheSk7XG5cbiAgICBtYWluLmFwcGVuZChzaWRlTmF2LCB2aWV3LCBvdmVybGF5KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChIZWFkZXIuY3JlYXRlSGVhZGVyKCksIG1haW4sIEZvb3Rlci5jcmVhdGVGb290ZXIoKSk7XG5cbiAgICBjaGFuZ2VEb2N1bWVudFRpdGxlKCk7XG4gIH1cblxuICBjb25zdCBjcmVhdGVUZXh0ID0gKGVsZW1lbnQsIGNsYXNzTmFtZSwgY29udGVudCkgPT4ge1xuICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnQpO1xuICAgIHRleHQuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWUpO1xuICAgIHRleHQudGV4dENvbnRlbnQgPSBjb250ZW50O1xuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBjb25zdCBjcmVhdGVJbWcgPSAoc3JjLCBjbGFzc05hbWUsIGFsdCkgPT4ge1xuICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIGltZy5zcmMgPSBzcmM7XG4gICAgaW1nLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lKTtcbiAgICBpbWcuYWx0ID0gYWx0O1xuXG4gICAgcmV0dXJuIGltZztcbiAgfVxuXG4gIGNvbnN0IGFkZENTU1RlbXBsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gICAgbGluay5ocmVmID0gJ2h0dHBzOi8vY2hpZWZ3b29kcy5naXRodWIuaW8vZm9vdGVyLXRlbXBsYXRlL3RlbXBsYXRlLmNzcyc7XG4gICAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7XG4gICAgbGluay50eXBlID0gJ3RleHQvY3NzJztcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmspO1xuICB9XG5cbiAgY29uc3QgY2hhbmdlRG9jdW1lbnRUaXRsZSA9ICgpID0+IHtcbiAgICBjb25zdCBwcm9qZWN0TmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LW5hbWUnKS50ZXh0Q29udGVudDtcbiAgICBwcm9qZWN0TmFtZSA/IGRvY3VtZW50LnRpdGxlID0gYCR7cHJvamVjdE5hbWV9IC0gVG9kbyBMaXN0YCA6IGRvY3VtZW50LnRpdGxlID0gJ1RvZG8gTGlzdCc7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGluaXRpYWxpemUsXG4gICAgY3JlYXRlVGV4dCxcbiAgICBjcmVhdGVJbWcsXG4gICAgY2hhbmdlRG9jdW1lbnRUaXRsZVxuICB9XG59KSgpO1xuIiwiaW1wb3J0ICcuL3N0eWxlcy5jc3MnO1xuaW1wb3J0IHsgTWFpbiB9IGZyb20gJy4vY29tcG9uZW50cy9NYWluLmpzJztcblxuTWFpbi5pbml0aWFsaXplKCk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwibG9jYWxzIiwiSGVhZGVyIiwiaGVhZGVyIiwiZGl2IiwiTWFpbiIsImNyZWF0ZVRleHQiLCJpbWciLCJjcmVhdGVJbWciLCJzcGFuIiwiYXBwZW5kIiwiRm9vdGVyIiwiZm9vdGVyIiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJUeXBlRXJyb3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ3VtZW50cyIsImFyZ1N0ciIsImdldFRpbWUiLCJjb25zb2xlIiwid2FybiIsInN0YWNrIiwiTmFOIiwidG9JbnRlZ2VyIiwiZGlydHlOdW1iZXIiLCJudW1iZXIiLCJOdW1iZXIiLCJpc05hTiIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJzdGFydE9mVVRDSVNPV2VlayIsImRpcnR5RGF0ZSIsImRhdGUiLCJkYXkiLCJnZXRVVENEYXkiLCJkaWZmIiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwieWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsImRlZmF1bHRPcHRpb25zIiwiZ2V0RGVmYXVsdE9wdGlvbnMiLCJzdGFydE9mVVRDV2VlayIsIl9yZWYiLCJfcmVmMiIsIl9yZWYzIiwiX29wdGlvbnMkd2Vla1N0YXJ0c09uIiwiX29wdGlvbnMkbG9jYWxlIiwiX29wdGlvbnMkbG9jYWxlJG9wdGlvIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsMiIsIndlZWtTdGFydHNPbiIsImxvY2FsZSIsIlJhbmdlRXJyb3IiLCJnZXRVVENXZWVrWWVhciIsIl9vcHRpb25zJGZpcnN0V2Vla0NvbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsIm91dHB1dCIsImFicyIsInRva2VuIiwic2lnbmVkWWVhciIsIm1vbnRoIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwibnVtYmVyT2ZEaWdpdHMiLCJtaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJwb3ciLCJHIiwibG9jYWxpemUiLCJlcmEiLCJ3aWR0aCIsInkiLCJvcmRpbmFsTnVtYmVyIiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicXVhcnRlciIsImNvbnRleHQiLCJxIiwiTSIsIkwiLCJ3Iiwid2VlayIsImZpcnN0V2VlayIsInN0YXJ0T2ZVVENXZWVrWWVhciIsInJvdW5kIiwiZ2V0VVRDV2VlayIsIkkiLCJpc29XZWVrIiwiZm91cnRoT2ZKYW51YXJ5Iiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZ2V0VVRDSVNPV2VlayIsIkQiLCJkYXlPZlllYXIiLCJ0aW1lc3RhbXAiLCJzZXRVVENNb250aCIsImRpZmZlcmVuY2UiLCJnZXRVVENEYXlPZlllYXIiLCJFIiwiZGF5T2ZXZWVrIiwibG9jYWxEYXlPZldlZWsiLCJjIiwiaXNvRGF5T2ZXZWVrIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwiZGF5UGVyaW9kIiwidG9Mb3dlckNhc2UiLCJob3VycyIsIkIiLCJoIiwiSCIsIksiLCJzIiwiUyIsIlgiLCJfbG9jYWxpemUiLCJ0aW1lem9uZU9mZnNldCIsIl9vcmlnaW5hbERhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsImZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyIsImZvcm1hdFRpbWV6b25lIiwieCIsIk8iLCJmb3JtYXRUaW1lem9uZVNob3J0IiwieiIsInQiLCJvcmlnaW5hbERhdGUiLCJUIiwib2Zmc2V0IiwiZGlydHlEZWxpbWl0ZXIiLCJhYnNPZmZzZXQiLCJtaW51dGVzIiwiZGVsaW1pdGVyIiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJwYXR0ZXJuIiwiZm9ybWF0TG9uZyIsInRpbWVMb25nRm9ybWF0dGVyIiwidGltZSIsIlAiLCJkYXRlVGltZUZvcm1hdCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJkYXRlUGF0dGVybiIsInRpbWVQYXR0ZXJuIiwiZGF0ZVRpbWUiLCJwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMiLCJwcm90ZWN0ZWRXZWVrWWVhclRva2VucyIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJmb3JtYXQiLCJpbnB1dCIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJ2YWx1ZXNBcnJheSIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImFyZ3VtZW50Q2FsbGJhY2siLCJfb3B0aW9ucyIsInJlbTEwMCIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwiYnVpbGRNYXRjaEZuIiwic3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwidmFsdWUiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJvYmplY3QiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55IiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwidG9rZW5WYWx1ZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJkaXJ0eUZvcm1hdFN0ciIsIl9yZWY0IiwiX29wdGlvbnMkbG9jYWxlMiIsIl9vcHRpb25zJGxvY2FsZTIkb3B0aSIsIl9yZWY1IiwiX3JlZjYiLCJfcmVmNyIsIl9vcHRpb25zJGxvY2FsZTMiLCJfb3B0aW9ucyRsb2NhbGUzJG9wdGkiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwzIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsNCIsImZvcm1hdFN0ciIsImRlZmF1bHRMb2NhbGUiLCJpc0RhdGUiLCJpc1ZhbGlkIiwidXRjRGF0ZSIsIlVUQyIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwiZGlydHlBbW91bnQiLCJhbW91bnQiLCJhZGRNaWxsaXNlY29uZHMiLCJzdWJNaWxsaXNlY29uZHMiLCJmb3JtYXR0ZXJPcHRpb25zIiwic3Vic3RyaW5nIiwiZmlyc3RDaGFyYWN0ZXIiLCJsb25nRm9ybWF0dGVyIiwibWF0Y2hlZCIsImZvcm1hdHRlciIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsImluZGV4T2YiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwiaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiIsIlRhc2siLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZHVlRGF0ZSIsInByaW9yaXR5IiwiY29tcGxldGVkIiwiZ2V0VGl0bGUiLCJzZXRUaXRsZSIsImdldERlc2NyaXB0aW9uIiwic2V0RGVzY3JpcHRpb24iLCJnZXREdWVEYXRlIiwic2V0RHVlRGF0ZSIsImdldFByaW9yaXR5Iiwic2V0UHJpb3JpdHkiLCJnZXRDb21wbGV0ZWQiLCJ0b2dnbGVDb21wbGV0ZWQiLCJnZXRJbmRleCIsInNldEluZGV4Iiwic3RhcnRPZkRheSIsInNldEhvdXJzIiwic3RhcnRPZldlZWsiLCJnZXREYXkiLCJzZXREYXRlIiwiUHJvamVjdCIsIm5hbWUiLCJ0YXNrcyIsInRhc2tDb3VudCIsImluZGV4Q291bnQiLCJnZXROYW1lIiwiZ2V0VGFza0NvdW50IiwidXBkYXRlVGFza0NvdW50IiwiZ2V0SW5kZXhDb3VudCIsInVwZGF0ZUluZGV4Q291bnQiLCJnZXRBbGxUYXNrcyIsImdldFRhc2siLCJ0YXNrVGl0bGUiLCJmaW5kIiwidGFzayIsInNldFRhc2tzIiwiY29udGFpbnMiLCJzb21lIiwiYWRkVGFzayIsImRlbGV0ZVRhc2siLCJmaWx0ZXIiLCJnZXRUb2RheVRhc2tzIiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwiZGF0ZUxlZnRTdGFydE9mRGF5IiwiZGF0ZVJpZ2h0U3RhcnRPZkRheSIsImlzU2FtZURheSIsIm5vdyIsImlzVG9kYXkiLCJtb250aERheVllYXIiLCJnZXRUaGlzV2Vla1Rhc2tzIiwiZGF0ZUxlZnRTdGFydE9mV2VlayIsImRhdGVSaWdodFN0YXJ0T2ZXZWVrIiwiaXNTYW1lV2VlayIsImlzVGhpc1dlZWsiLCJhZGREYXlzIiwic3ViRGF5cyIsImdldEltcG9ydGFudFRhc2tzIiwic3BsaXQiLCJUb2RvTGlzdCIsInByb2plY3RzIiwiZ2V0QWxsUHJvamVjdHMiLCJnZXRQcm9qZWN0IiwicHJvamVjdE5hbWUiLCJwcm9qZWN0Iiwic2V0UHJvamVjdHMiLCJhZGRQcm9qZWN0IiwiZGVsZXRlUHJvamVjdCIsInVwZGF0ZVRvZGF5UHJvamVjdHMiLCJ1cGRhdGVQcm9qZWN0Iiwic29ydEJ5UHJpb3JpdHkiLCJyZWluZGV4VGFza3MiLCJ1cGRhdGVUaGlzV2Vla1Byb2plY3RzIiwic29ydEJ5RGF0ZSIsInVwZGF0ZUltcG9ydGFudFByb2plY3RzIiwiZm9yRWFjaCIsImluY2x1ZGVzIiwidXBkYXRlQWxsUHJvamVjdHMiLCJzb3J0IiwicHJpb3JpdHlUb1Njb3JlIiwibnVsbERhdGVzIiwibm9uTnVsbERhdGVzIiwic29ydGVkRGF0ZXMiLCJkYXRlTGVmdCIsImRhdGVSaWdodCIsImNvbXBhcmVBc2MiLCJTdG9yYWdlIiwic2V0VG9kb0xpc3QiLCJ0b2RvTGlzdCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRUb2RvTGlzdCIsImFzc2lnbiIsInBhcnNlIiwiZ2V0SXRlbSIsImNvbnRhaW5zUHJvamVjdCIsImlzUHJvamVjdEVtcHR5IiwiY29udGFpbnNUYXNrIiwiZGVzYyIsInVwZGF0ZVRhc2siLCJvbGRUaXRsZSIsIm5ld1RpdGxlIiwibmV3RGVzYyIsIm5ld0R1ZURhdGUiLCJuZXdQcmlvcml0eSIsInRvZ2dsZVRhc2tDb21wbGV0ZWQiLCJnZXRQcm9qZWN0TmFtZSIsIkRpYWxvZyIsImNyZWF0ZUV4aXRJY29uIiwibW9kZSIsImV4aXRJY29uIiwiYWRkRXhpdEhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRGlhbG9nIiwidG9nZ2xlT3ZlcmxheSIsIm92ZXJsYXkiLCJkaXNwbGF5IiwiZ2V0VGFza1Byb3BlcnRpZXMiLCJmb3JtIiwiY2FwaXRhbGl6ZSIsIndvcmQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNob3dEZWxldGVNb2RhbCIsImRpYWxvZyIsIm9wZW4iLCJtb2RhbFRvcCIsImJ1dHRvbiIsIm1vZGFsQm90dG9tIiwic3BhbkNvbmZpcm0iLCJkZWxldGVCdXR0b24iLCJOYXYiLCJjdXJyZW50VmlldyIsInRleHRDb250ZW50IiwiU2VjdGlvbiIsInJlcGxhY2VTZWN0aW9uIiwiYWRkRGVsZXRlVGFza0hhbmRsZXIiLCJpY29uIiwicXVlcnlTZWxlY3RvckFsbCIsInJlbW92ZVByb2plY3RMaSIsImNsb3Nlc3QiLCJjbGFzc0xpc3QiLCJjaGFuZ2VEb2N1bWVudFRpdGxlIiwiYWRkRGVsZXRlUHJvamVjdEhhbmRsZXIiLCJzaG93Vmlld01vZGFsIiwiZGF5TW9udGhZZWFyIiwicHJpb3JpdHlMZXZlbCIsInNob3dDcmVhdGVFZGl0TW9kYWwiLCJtZXRob2QiLCJpbnB1dFRleHQiLCJ0eXBlIiwicGxhY2Vob2xkZXIiLCJ0ZXh0YXJlYSIsImRpdkRhdGUiLCJsYWJlbCIsImh0bWxGb3IiLCJpbnB1dERhdGUiLCJkaXZQcmlvcml0eSIsInNwYW5Qcmlvcml0eSIsImRpdlByaW9yaXR5THZsIiwibGV2ZWwiLCJjaGVja2VkIiwiYWRkRWRpdEJ1dHRvbiIsInByb3BlcnRpZXMiLCJwcmV2ZW50RGVmYXVsdCIsImFkZEVkaXRIYW5kbGVyIiwiYWRkQ3JlYXRlSGFuZGxlciIsImNyZWF0ZVNlY3Rpb24iLCJzZWN0aW9uIiwiaDEiLCJtZW51IiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiY3JlYXRlRW1wdHlUYXNrIiwiYWxsVGFza3MiLCJjcmVhdGVUYXNrTGkiLCJjcmVhdGVBZGRUYXNrTGkiLCJjcmVhdGVFbXB0eVNlY3Rpb24iLCJsaSIsImFkZFZpZXdIYW5kbGVyIiwiYWRkQ2hlY2tIYW5kbGVyIiwiaDIiLCJpc1Rhc2tDb21wbGV0ZWQiLCJpc1Rhc2tFeHBpcmVkIiwiZWRpdEljb24iLCJ0cmFzaEljb24iLCJhZGRUcmFzaEhhbmRsZXIiLCJhZGROZXdUYXNrSGFuZGxlciIsImVsZSIsImNsYXNzTmFtZSIsInRhc2tIZWFkZXIiLCJ0b2dnbGUiLCJzdG9wUHJvcGFnYXRpb24iLCJpc1Bhc3QiLCJyZW1vdmVUYXNrTGkiLCJyZXBsYWNlV2l0aCIsImNyZWF0ZVByb2plY3RMaSIsImRlbGV0ZUljb24iLCJhZGRTZWxlY3RQcm9qZWN0SGFuZGxlciIsImNyZWF0ZUFkZFByb2plY3RMaSIsImFkZE5ld1Byb2plY3RIYW5kbGVyIiwiY3JlYXRlRGVsZXRlSWNvbiIsImFkZERlbGV0ZUhhbmRsZXIiLCJzZWxlY3RlZEJ1dHRvbiIsInByb2plY3RCdXR0b24iLCJhZGQiLCJjb250YWluZXIiLCJhZGRCdXR0b24iLCJjcmVhdGVOZXdQcm9qZWN0IiwiY2FuY2VsQnV0dG9uIiwiY2FuY2VsTmV3UHJvamVjdCIsImNyZWF0ZUlucHV0UHJvamVjdCIsImZvY3VzIiwiYWxlcnQiLCJnZXRUYXNrQ291bnRTdHJpbmciLCJjcmVhdGVOYXYiLCJuYXYiLCJuYXZUb3AiLCJuYXZUb3BMaSIsIm5hdlByb2plY3RzIiwibmF2UHJvamVjdHNMaSIsInRleHQiLCJpbml0aWFsaXplIiwibGluayIsInJlbCIsImFkZENTU1RlbXBsYXRlIiwibWFpbiIsInNpZGVOYXYiLCJ2aWV3IiwiYm9keSIsImFsdCJdLCJzb3VyY2VSb290IjoiIn0=