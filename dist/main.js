(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>m});var o=n(537),r=n.n(o),a=n(645),i=n.n(a),s=n(667),c=n.n(s),d=new URL(n(748),n.b),l=new URL(n(98),n.b),A=i()(r()),u=c()(d),p=c()(l);A.push([e.id,"@font-face {\n  font-family: Pacifico;\n  src: url("+u+") format('truetype');\n}\n\n@font-face {\n  font-family: Heebo;\n  src: url("+p+') format(\'truetype\');\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml {\n  font-size: 62.5%;\n  --github-black: #0D1117;\n  --tailwind-sky-50: #f0f9ff;\n  --tailwind-sky-200: #bae6fd;\n  --tailwind-sky-400: #38bdf8;\n  --tailwind-sky-500: #0ea5e9;\n  --delete-red: #ef4444;\n  --priority-low-green: #4ade80;\n  --priority-medium-yellow: #fde047;\n  --priority-high-red: #ef4444;\n}\n\nbody {\n  display: inline-flex;\n  flex-direction: column;\n  min-height: 100vh;\n  min-width: calc(100vw - (100vw - 100%));\n}\n\n/* Header */\n\nheader {\n  background-color: var(--tailwind-sky-400);\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 7px 20px;\n}\n\n.container-header {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  min-width: max-content;\n}\n\n.logo {\n  height: 52px;\n}\n\n.logo-title {\n  font-family: Pacifico, cursive;\n  font-size: 4.5rem;\n  color: white;\n}\n\nmain {\n  flex: 1;\n  display: flex;\n}\n\n/* Nav */\n\nnav {\n  overflow-y: auto;\n  background-color: var(--tailwind-sky-50);\n  display: flex;\n  flex-direction: column;\n  flex-basis: 300px;\n  padding: 22px;\n  gap: 25px;\n}\n\n.nav-top {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-button {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 6px 14px;\n  gap: 9px;\n  cursor: pointer;\n  height: 40px;\n  border: none;\n  border-radius: 6px;\n  background-color: transparent;\n  min-width: max-content;\n}\n\n.nav-button:hover {\n  background-color: rgb(228, 228, 228);\n}\n\n.selected,\n.selected:hover {\n  background-color: var(--tailwind-sky-200);\n}\n\n.selected > .nav-span {\n  font-weight: 600;\n}\n\n.nav-icon {\n  height: 16px;\n}\n\n.nav-span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 400;\n}\n\n.nav-bottom {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-bottom > h1 {\n  font-family: Heebo, sans-serif;\n  font-size: 2.5rem;\n  font-weight: 500;\n  margin-left: 5px;\n}\n\n.nav-projects {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-button:hover .project-delete{\n  visibility: visible;\n}\n\n.task-count {\n  font-family: Heebo, sans-serif;\n  font-size: 1.2rem;\n  font-weight: 400;\n  color: gray;\n}\n\n.project-delete {\n  margin-left: auto;\n  visibility: hidden;\n}\n\n.project-delete:hover {\n  transform: scale(1.3);\n}\n\n.add-project > .nav-span {\n  font-weight: 500;\n}\n\n.input-project {\n  width: 100%;\n  padding: 6px 12px;\n  height: 40px;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  border: 1px solid black;\n  border-radius: 4px;\n  margin-bottom: 15px;\n}\n\n.container-add-project > div {\n  display: flex;\n  gap: 20px;\n}\n\n.project-add,\n.project-cancel {\n  cursor: pointer;\n  width: 100%;\n  height: 40px;\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 600;\n  border-radius: 6px;\n}\n\n.project-add {\n  border: 3px solid var(--tailwind-sky-400);\n  background-color: var(--tailwind-sky-400);\n  color: white;\n}\n\n.project-add:hover {\n  background-color: white;\n  color: var(--tailwind-sky-400);\n}\n\n.project-cancel {\n  border: 3px solid lightgrey;\n  background-color: transparent;\n  color: lightgrey;\n}\n\n.project-cancel:hover {\n  background-color: lightgrey;\n  color: white;\n}\n\n/* Section */\n\n.container-project {\n  overflow-y: auto;\n  width: 60%;\n  margin: 0 auto;\n  padding: 20px 20px;\n  display: flex;\n  flex-direction: column;\n}\n\n.project-name {\n  font-family: Heebo, sans-serif;\n  font-size: 3.2rem;\n  font-weight: 600;\n  margin-bottom: 20px;\n  align-self: flex-start;\n}\n\n/* Task */\n\n.task-list {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  min-width: max-content;\n}\n\n.task {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 8px 12px;\n  cursor: pointer;\n  background-color: #f3f4f6;\n  border: none;\n  border-radius: 5px 0px 0px 5px;\n}\n\n.task:hover {\n  background-color: #e5e7eb;\n}\n\n.task-high {\n  border-left: 6px solid var(--priority-high-red);\n}\n\n.task-medium {\n  border-left: 6px solid var(--priority-medium-yellow);\n}\n\n.task-low {\n  border-left: 6px solid var(--priority-low-green);\n}\n\n.task-checkbox {\n  display: none;\n}\n\n.checkbox-div {\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--tailwind-sky-500);\n  border-radius: 3px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.checkbox-div::after {\n  content: \'\\2714\';\n  color: #f3f4f6;\n  transform: scale(0);\n  transition: all 0.2s;\n}\n\n.task-checkbox:checked + .checkbox-div {\n  background-color: var(--tailwind-sky-500);\n}\n\n.task-checkbox:checked + .checkbox-div::after {\n  transform: scale(1.25);\n}\n\n.task-title {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  padding: 0px 12px;\n}\n\n.completed {\n  text-decoration: line-through;\n}\n\n.task-date {\n  font-family: Heebo, sans-serif;\n  font-size: 1.5rem;\n  font-weight: 400;\n  margin-left: auto;\n  padding: 0px 15px;\n}\n\n.task-edit-button,\n.task-trash-button {\n  padding: 0px 8px;\n  cursor: pointer;\n  height: 22px;\n}\n\n.task-edit-button:hover,\n.task-trash-button:hover {\n  transform: scale(1.15);\n}\n\n.add-task {\n  padding-left: 16px;\n}\n\n.add-task > img {\n  height: 22px;\n}\n\n.add-task > span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  padding: 0px 12px;\n}\n\n.empty-task {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  margin-bottom: 20px;\n}\n\n/* Overlay */\n\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.25);\n  display: none;\n}\n\n/* Create */\n\n.modal-create,\n.modal-edit,\n.modal-delete,\n.modal-view {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border: 0px;\n  border-radius: 3px;\n  z-index: 10;\n}\n\n.modal-create,\n.modal-edit {\n  width: 40vw;\n  min-width: 400px;\n}\n\n.modal-create::backdrop,\n.modal-edit::backdrop {\n  background: black;\n  opacity: 0.3;\n}\n\n.modal-create-top,\n.modal-edit-top,\n.modal-delete-top,\n.modal-view-top {\n  background-color: var(--tailwind-sky-500);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n}\n\n.modal-create-top > span,\n.modal-edit-top > span,\n.modal-delete-top > span,\n.view-title {\n  font-family: Heebo, sans-serif;\n  font-size: 2.8rem;\n  font-weight: 600;\n  color: white;\n  padding-left: 5px;\n}\n\n.modal-create-top > button,\n.modal-edit-top > button,\n.modal-delete-top > button,\n.modal-view-top > button {\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n}\n\n.exit-button {\n  width: 35px;\n  aspect-ratio: 1 / 1;\n}\n\n.modal-create-bottom,\n.modal-edit-bottom,\n.modal-delete-bottom {\n  display: flex;\n  flex-direction: column;\n  padding: 18px;\n  height: 100%;\n  width: 100%;\n  gap: 15px;\n}\n\n.create-task-title,\n.edit-task-title {\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n}\n\n.create-task-title::placeholder,\n.create-task-desc::placeholder,\n.edit-task-title::placeholder,\n.edit-task-desc::placeholder {\n  font-size: 1.4rem;\n  color: gray;\n}\n\n.create-task-desc,\n.edit-task-desc {\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n  height: 100px;\n  resize: none;\n  background-color: transparent;\n}\n\n.container-date {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n  display: flex;\n  align-items: center;\n}\n\nlabel[for="create-task-date"],\nlabel[for="edit-task-date"] {\n  margin-right: 10px;\n}\n\n#create-task-date,\n#edit-task-date {\n  background-color: var(--tailwind-sky-500);\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n  color: white;\n  padding: 2px 8px;\n  border-radius: 3px;\n}\n\n::-webkit-calendar-picker-indicator {\n  cursor: pointer;\n  filter: invert(1);\n}\n\n.container-priority {\n  display: flex;\n  width: 100%;\n  align-items: center;\n}\n\n.container-priority > span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n  margin-right: 10px;\n}\n\n.container-priority-level > input[type="radio"] {\n  width: 1px;\n  height: 1px;\n}\n\n.container-priority-level > label {\n  cursor: pointer;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 2px 8px;\n  border-radius: 3px;\n  transition: all 0.2s;\n  background-color: white;\n}\n\n.container-priority-level > label:hover,\ninput[name="create-task-priority"]:checked + label,\ninput[name="edit-task-priority"]:checked + label {\n  color: white;\n}\n\n.label-low {\n  border: 3px solid var(--priority-low-green);\n  color: var(--priority-low-green);\n}\n\n.label-low:hover,\ninput[value="low"]:checked + label {\n  background-color: var(--priority-low-green);\n}\n\n.label-medium {\n  border: 3px solid var(--priority-medium-yellow);\n  color: var(--priority-medium-yellow);\n}\n\n.label-medium:hover,\ninput[value="medium"]:checked + label {\n  background-color: var(--priority-medium-yellow);\n}\n\n.label-high {\n  border: 3px solid var(--priority-high-red);\n  color: var(--priority-high-red);\n}\n\n.label-high:hover,\ninput[value="high"]:checked + label {\n  background-color: var(--priority-high-red);\n}\n\n.create-add-button,\n.edit-change-button {\n  margin-left: auto;\n  cursor: pointer;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 3px 12px;\n  border-radius: 3px;\n  border: 3px solid var(--tailwind-sky-500);\n  background-color: var(--tailwind-sky-500);\n  color: white;\n  transition: all 0.2s;\n}\n\n.create-add-button:hover,\n.edit-change-button:hover {\n  background-color: white;\n  color: var(--tailwind-sky-500);\n}\n\n/* Delete */\n\n.modal-delete,\n.modal-view {\n  width: 30vw;\n  min-width: 250px;\n}\n\n.modal-delete::backdrop,\n.modal-view::backdrop {\n  background: black;\n  opacity: 0.3;\n}\n\n.modal-delete-bottom {\n  gap: 35px;\n}\n\n.modal-delete-bottom > span,\n.view-desc,\n.view-project,\n.view-date,\n.view-priority {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n}\n\n.container-confirm {\n  display: flex;\n  justify-content: flex-end;\n  gap: 20px;\n}\n\n.container-confirm > button {\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 3px 12px;\n  border-radius: 3px;\n  color: white;\n  cursor: pointer;\n}\n\n.delete-confirm-button {\n  background-color: var(--delete-red);\n  border: 3px solid var(--delete-red);\n}\n\n.delete-confirm-button:hover {\n  background-color: white;\n  color: var(--delete-red);\n}\n\n/* View */\n\n.modal-view-bottom {\n  display: flex;\n  flex-direction: column;\n  padding: 18px;\n  height: 100%;\n  width: 100%;\n}\n\n.view-desc {\n  margin-bottom: 30px;\n}\n\n.view-low {\n  color: var(--priority-low-green);\n}\n\n.view-medium {\n  color: var(--priority-medium-yellow);\n}\n\n.view-high {\n  color: var(--priority-high-red);\n}\n\n/* Footer */\n\nfooter {\n  display: flex;\n  align-items: center;\n  background-color: var(--github-black);\n  padding: 12px 40px;\n}\n\n.made-by {\n  font-size: 12px;\n  font-family: cursive;\n  color: white;\n  margin: 0 auto;\n}\n\n.github-icon {\n  height: 25px;\n}\n\n@media (max-width: 992px) {\n  html {\n    font-size: 67.5%;\n  }\n}\n\n@media (max-width: 576px) {\n  html {\n    font-size: 72.5%;\n  }\n\n  main {\n    flex-direction: column;\n  }\n\n  nav {\n    flex-basis: 170px;\n  }\n\n  .container-project {\n    margin: 0;\n    padding-inline: 30px;\n    width: 100%;\n  }\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:['@font-face {\n  font-family: Pacifico;\n  src: url(fonts/Pacifico/Pacifico-Regular.ttf) format(\'truetype\');\n}\n\n@font-face {\n  font-family: Heebo;\n  src: url(fonts/Heebo/Heebo-VariableFont_wght.ttf) format(\'truetype\');\n}\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nhtml {\n  font-size: 62.5%;\n  --github-black: #0D1117;\n  --tailwind-sky-50: #f0f9ff;\n  --tailwind-sky-200: #bae6fd;\n  --tailwind-sky-400: #38bdf8;\n  --tailwind-sky-500: #0ea5e9;\n  --delete-red: #ef4444;\n  --priority-low-green: #4ade80;\n  --priority-medium-yellow: #fde047;\n  --priority-high-red: #ef4444;\n}\n\nbody {\n  display: inline-flex;\n  flex-direction: column;\n  min-height: 100vh;\n  min-width: calc(100vw - (100vw - 100%));\n}\n\n/* Header */\n\nheader {\n  background-color: var(--tailwind-sky-400);\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  padding: 7px 20px;\n}\n\n.container-header {\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 5px;\n  min-width: max-content;\n}\n\n.logo {\n  height: 52px;\n}\n\n.logo-title {\n  font-family: Pacifico, cursive;\n  font-size: 4.5rem;\n  color: white;\n}\n\nmain {\n  flex: 1;\n  display: flex;\n}\n\n/* Nav */\n\nnav {\n  overflow-y: auto;\n  background-color: var(--tailwind-sky-50);\n  display: flex;\n  flex-direction: column;\n  flex-basis: 300px;\n  padding: 22px;\n  gap: 25px;\n}\n\n.nav-top {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-button {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 6px 14px;\n  gap: 9px;\n  cursor: pointer;\n  height: 40px;\n  border: none;\n  border-radius: 6px;\n  background-color: transparent;\n  min-width: max-content;\n}\n\n.nav-button:hover {\n  background-color: rgb(228, 228, 228);\n}\n\n.selected,\n.selected:hover {\n  background-color: var(--tailwind-sky-200);\n}\n\n.selected > .nav-span {\n  font-weight: 600;\n}\n\n.nav-icon {\n  height: 16px;\n}\n\n.nav-span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 400;\n}\n\n.nav-bottom {\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-bottom > h1 {\n  font-family: Heebo, sans-serif;\n  font-size: 2.5rem;\n  font-weight: 500;\n  margin-left: 5px;\n}\n\n.nav-projects {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.nav-button:hover .project-delete{\n  visibility: visible;\n}\n\n.task-count {\n  font-family: Heebo, sans-serif;\n  font-size: 1.2rem;\n  font-weight: 400;\n  color: gray;\n}\n\n.project-delete {\n  margin-left: auto;\n  visibility: hidden;\n}\n\n.project-delete:hover {\n  transform: scale(1.3);\n}\n\n.add-project > .nav-span {\n  font-weight: 500;\n}\n\n.input-project {\n  width: 100%;\n  padding: 6px 12px;\n  height: 40px;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  border: 1px solid black;\n  border-radius: 4px;\n  margin-bottom: 15px;\n}\n\n.container-add-project > div {\n  display: flex;\n  gap: 20px;\n}\n\n.project-add,\n.project-cancel {\n  cursor: pointer;\n  width: 100%;\n  height: 40px;\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 600;\n  border-radius: 6px;\n}\n\n.project-add {\n  border: 3px solid var(--tailwind-sky-400);\n  background-color: var(--tailwind-sky-400);\n  color: white;\n}\n\n.project-add:hover {\n  background-color: white;\n  color: var(--tailwind-sky-400);\n}\n\n.project-cancel {\n  border: 3px solid lightgrey;\n  background-color: transparent;\n  color: lightgrey;\n}\n\n.project-cancel:hover {\n  background-color: lightgrey;\n  color: white;\n}\n\n/* Section */\n\n.container-project {\n  overflow-y: auto;\n  width: 60%;\n  margin: 0 auto;\n  padding: 20px 20px;\n  display: flex;\n  flex-direction: column;\n}\n\n.project-name {\n  font-family: Heebo, sans-serif;\n  font-size: 3.2rem;\n  font-weight: 600;\n  margin-bottom: 20px;\n  align-self: flex-start;\n}\n\n/* Task */\n\n.task-list {\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  min-width: max-content;\n}\n\n.task {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 8px 12px;\n  cursor: pointer;\n  background-color: #f3f4f6;\n  border: none;\n  border-radius: 5px 0px 0px 5px;\n}\n\n.task:hover {\n  background-color: #e5e7eb;\n}\n\n.task-high {\n  border-left: 6px solid var(--priority-high-red);\n}\n\n.task-medium {\n  border-left: 6px solid var(--priority-medium-yellow);\n}\n\n.task-low {\n  border-left: 6px solid var(--priority-low-green);\n}\n\n.task-checkbox {\n  display: none;\n}\n\n.checkbox-div {\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--tailwind-sky-500);\n  border-radius: 3px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n}\n\n.checkbox-div::after {\n  content: \'\\2714\';\n  color: #f3f4f6;\n  transform: scale(0);\n  transition: all 0.2s;\n}\n\n.task-checkbox:checked + .checkbox-div {\n  background-color: var(--tailwind-sky-500);\n}\n\n.task-checkbox:checked + .checkbox-div::after {\n  transform: scale(1.25);\n}\n\n.task-title {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  padding: 0px 12px;\n}\n\n.completed {\n  text-decoration: line-through;\n}\n\n.task-date {\n  font-family: Heebo, sans-serif;\n  font-size: 1.5rem;\n  font-weight: 400;\n  margin-left: auto;\n  padding: 0px 15px;\n}\n\n.task-edit-button,\n.task-trash-button {\n  padding: 0px 8px;\n  cursor: pointer;\n  height: 22px;\n}\n\n.task-edit-button:hover,\n.task-trash-button:hover {\n  transform: scale(1.15);\n}\n\n.add-task {\n  padding-left: 16px;\n}\n\n.add-task > img {\n  height: 22px;\n}\n\n.add-task > span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  padding: 0px 12px;\n}\n\n.empty-task {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 400;\n  margin-bottom: 20px;\n}\n\n/* Overlay */\n\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 5;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.25);\n  display: none;\n}\n\n/* Create */\n\n.modal-create,\n.modal-edit,\n.modal-delete,\n.modal-view {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border: 0px;\n  border-radius: 3px;\n  z-index: 10;\n}\n\n.modal-create,\n.modal-edit {\n  width: 40vw;\n  min-width: 400px;\n}\n\n.modal-create::backdrop,\n.modal-edit::backdrop {\n  background: black;\n  opacity: 0.3;\n}\n\n.modal-create-top,\n.modal-edit-top,\n.modal-delete-top,\n.modal-view-top {\n  background-color: var(--tailwind-sky-500);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n}\n\n.modal-create-top > span,\n.modal-edit-top > span,\n.modal-delete-top > span,\n.view-title {\n  font-family: Heebo, sans-serif;\n  font-size: 2.8rem;\n  font-weight: 600;\n  color: white;\n  padding-left: 5px;\n}\n\n.modal-create-top > button,\n.modal-edit-top > button,\n.modal-delete-top > button,\n.modal-view-top > button {\n  cursor: pointer;\n  background-color: transparent;\n  border: none;\n}\n\n.exit-button {\n  width: 35px;\n  aspect-ratio: 1 / 1;\n}\n\n.modal-create-bottom,\n.modal-edit-bottom,\n.modal-delete-bottom {\n  display: flex;\n  flex-direction: column;\n  padding: 18px;\n  height: 100%;\n  width: 100%;\n  gap: 15px;\n}\n\n.create-task-title,\n.edit-task-title {\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n}\n\n.create-task-title::placeholder,\n.create-task-desc::placeholder,\n.edit-task-title::placeholder,\n.edit-task-desc::placeholder {\n  font-size: 1.4rem;\n  color: gray;\n}\n\n.create-task-desc,\n.edit-task-desc {\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n  height: 100px;\n  resize: none;\n  background-color: transparent;\n}\n\n.container-date {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n  display: flex;\n  align-items: center;\n}\n\nlabel[for="create-task-date"],\nlabel[for="edit-task-date"] {\n  margin-right: 10px;\n}\n\n#create-task-date,\n#edit-task-date {\n  background-color: var(--tailwind-sky-500);\n  border: none;\n  outline: none;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 500;\n  color: white;\n  padding: 2px 8px;\n  border-radius: 3px;\n}\n\n::-webkit-calendar-picker-indicator {\n  cursor: pointer;\n  filter: invert(1);\n}\n\n.container-priority {\n  display: flex;\n  width: 100%;\n  align-items: center;\n}\n\n.container-priority > span {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n  margin-right: 10px;\n}\n\n.container-priority-level > input[type="radio"] {\n  width: 1px;\n  height: 1px;\n}\n\n.container-priority-level > label {\n  cursor: pointer;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 2px 8px;\n  border-radius: 3px;\n  transition: all 0.2s;\n  background-color: white;\n}\n\n.container-priority-level > label:hover,\ninput[name="create-task-priority"]:checked + label,\ninput[name="edit-task-priority"]:checked + label {\n  color: white;\n}\n\n.label-low {\n  border: 3px solid var(--priority-low-green);\n  color: var(--priority-low-green);\n}\n\n.label-low:hover,\ninput[value="low"]:checked + label {\n  background-color: var(--priority-low-green);\n}\n\n.label-medium {\n  border: 3px solid var(--priority-medium-yellow);\n  color: var(--priority-medium-yellow);\n}\n\n.label-medium:hover,\ninput[value="medium"]:checked + label {\n  background-color: var(--priority-medium-yellow);\n}\n\n.label-high {\n  border: 3px solid var(--priority-high-red);\n  color: var(--priority-high-red);\n}\n\n.label-high:hover,\ninput[value="high"]:checked + label {\n  background-color: var(--priority-high-red);\n}\n\n.create-add-button,\n.edit-change-button {\n  margin-left: auto;\n  cursor: pointer;\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 3px 12px;\n  border-radius: 3px;\n  border: 3px solid var(--tailwind-sky-500);\n  background-color: var(--tailwind-sky-500);\n  color: white;\n  transition: all 0.2s;\n}\n\n.create-add-button:hover,\n.edit-change-button:hover {\n  background-color: white;\n  color: var(--tailwind-sky-500);\n}\n\n/* Delete */\n\n.modal-delete,\n.modal-view {\n  width: 30vw;\n  min-width: 250px;\n}\n\n.modal-delete::backdrop,\n.modal-view::backdrop {\n  background: black;\n  opacity: 0.3;\n}\n\n.modal-delete-bottom {\n  gap: 35px;\n}\n\n.modal-delete-bottom > span,\n.view-desc,\n.view-project,\n.view-date,\n.view-priority {\n  font-family: Heebo, sans-serif;\n  font-size: 1.8rem;\n  font-weight: 500;\n  color: var(--tailwind-sky-500);\n}\n\n.container-confirm {\n  display: flex;\n  justify-content: flex-end;\n  gap: 20px;\n}\n\n.container-confirm > button {\n  font-family: Heebo, sans-serif;\n  font-size: 1.6rem;\n  font-weight: 600;\n  padding: 3px 12px;\n  border-radius: 3px;\n  color: white;\n  cursor: pointer;\n}\n\n.delete-confirm-button {\n  background-color: var(--delete-red);\n  border: 3px solid var(--delete-red);\n}\n\n.delete-confirm-button:hover {\n  background-color: white;\n  color: var(--delete-red);\n}\n\n/* View */\n\n.modal-view-bottom {\n  display: flex;\n  flex-direction: column;\n  padding: 18px;\n  height: 100%;\n  width: 100%;\n}\n\n.view-desc {\n  margin-bottom: 30px;\n}\n\n.view-low {\n  color: var(--priority-low-green);\n}\n\n.view-medium {\n  color: var(--priority-medium-yellow);\n}\n\n.view-high {\n  color: var(--priority-high-red);\n}\n\n/* Footer */\n\nfooter {\n  display: flex;\n  align-items: center;\n  background-color: var(--github-black);\n  padding: 12px 40px;\n}\n\n.made-by {\n  font-size: 12px;\n  font-family: cursive;\n  color: white;\n  margin: 0 auto;\n}\n\n.github-icon {\n  height: 25px;\n}\n\n@media (max-width: 992px) {\n  html {\n    font-size: 67.5%;\n  }\n}\n\n@media (max-width: 576px) {\n  html {\n    font-size: 72.5%;\n  }\n\n  main {\n    flex-direction: column;\n  }\n\n  nav {\n    flex-basis: 170px;\n  }\n\n  .container-project {\n    margin: 0;\n    padding-inline: 30px;\n    width: 100%;\n  }\n}'],sourceRoot:""}]);const m=A},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],d=o.base?c[0]+o.base:c[0],l=a[d]||0,A="".concat(d," ").concat(l);a[d]=l+1;var u=n(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var m=r(p,o);o.byIndex=s,t.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);t[s].references--}for(var c=o(e,r),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},98:(e,t,n)=>{e.exports=n.p+"fonts/Heebo/Heebo-VariableFont_wght.ttf"},748:(e,t,n)=>{e.exports=n.p+"fonts/Pacifico/Pacifico-Regular.ttf"}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");o.length&&(e=o[o.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),a=n(569),i=n.n(a),s=n(565),c=n.n(s),d=n(216),l=n.n(d),A=n(589),u=n.n(A),p=n(28),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),t()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const g=n.p+"icons/clipboard-check-outline.svg",h=()=>{const e=document.createElement("header"),t=Pe.createText("div",["container-header"],""),n=Pe.createImg(g,["logo"],"Logo"),o=Pe.createText("span",["logo-title"],"Todo List");return t.append(n,o),e.append(t),e},f=n.p+"icons/github.svg",C=()=>{const e=document.createElement("footer"),t=Pe.createText("span",["made-by"],`Copyright @ ${(new Date).getFullYear()} ChiefWoods`),n=Pe.createText("a",["github-link"],"");n.href="https://github.com/ChiefWoods/todo-list",n.target="_blank";const o=Pe.createImg(f,["github-icon"],"GitHub");return n.append(o),e.append(t,n),e};function E(e){return E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},E(e)}function v(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function b(e){v(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===E(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function y(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function B(e){v(1,arguments);var t=b(e),n=t.getUTCDay(),o=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function w(e){v(1,arguments);var t=b(e),n=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var r=B(o),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=B(a);return t.getTime()>=r.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}var x={};function k(){return x}function T(e,t){var n,o,r,a,i,s,c,d;v(1,arguments);var l=k(),A=y(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:l.weekStartsOn)&&void 0!==o?o:null===(c=l.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==n?n:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=b(e),p=u.getUTCDay(),m=(p<A?7:0)+p-A;return u.setUTCDate(u.getUTCDate()-m),u.setUTCHours(0,0,0,0),u}function j(e,t){var n,o,r,a,i,s,c,d;v(1,arguments);var l=b(e),A=l.getUTCFullYear(),u=k(),p=y(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:u.firstWeekContainsDate)&&void 0!==o?o:null===(c=u.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(A+1,0,p),m.setUTCHours(0,0,0,0);var g=T(m,t),h=new Date(0);h.setUTCFullYear(A,0,p),h.setUTCHours(0,0,0,0);var f=T(h,t);return l.getTime()>=g.getTime()?A+1:l.getTime()>=f.getTime()?A:A-1}function P(e,t){for(var n=e<0?"-":"",o=Math.abs(e).toString();o.length<t;)o="0"+o;return n+o}const D=function(e,t){var n=e.getUTCFullYear(),o=n>0?n:1-n;return P("yy"===t?o%100:o,t.length)},S=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):P(n+1,2)},Y=function(e,t){return P(e.getUTCDate(),t.length)},M=function(e,t){return P(e.getUTCHours()%12||12,t.length)},W=function(e,t){return P(e.getUTCHours(),t.length)},z=function(e,t){return P(e.getUTCMinutes(),t.length)},q=function(e,t){return P(e.getUTCSeconds(),t.length)},L=function(e,t){var n=t.length,o=e.getUTCMilliseconds();return P(Math.floor(o*Math.pow(10,n-3)),t.length)};var H={G:function(e,t,n){var o=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var o=e.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return D(e,t)},Y:function(e,t,n,o){var r=j(e,o),a=r>0?r:1-r;return"YY"===t?P(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):P(a,t.length)},R:function(e,t){return P(w(e),t.length)},u:function(e,t){return P(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(o);case"QQ":return P(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(o);case"qq":return P(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,t,n){var o=e.getUTCMonth();switch(t){case"M":case"MM":return S(e,t);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(e,t,n){var o=e.getUTCMonth();switch(t){case"L":return String(o+1);case"LL":return P(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(e,t,n,o){var r=function(e,t){v(1,arguments);var n=b(e),o=T(n,t).getTime()-function(e,t){var n,o,r,a,i,s,c,d;v(1,arguments);var l=k(),A=y(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==r?r:l.firstWeekContainsDate)&&void 0!==o?o:null===(c=l.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==n?n:1),u=j(e,t),p=new Date(0);return p.setUTCFullYear(u,0,A),p.setUTCHours(0,0,0,0),T(p,t)}(n,t).getTime();return Math.round(o/6048e5)+1}(e,o);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):P(r,t.length)},I:function(e,t,n){var o=function(e){v(1,arguments);var t=b(e),n=B(t).getTime()-function(e){v(1,arguments);var t=w(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),B(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(o,{unit:"week"}):P(o,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):Y(e,t)},D:function(e,t,n){var o=function(e){v(1,arguments);var t=b(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=n-t.getTime();return Math.floor(o/864e5)+1}(e);return"Do"===t?n.ordinalNumber(o,{unit:"dayOfYear"}):P(o,t.length)},E:function(e,t,n){var o=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return P(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return P(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var o=e.getUTCDay(),r=0===o?7:o;switch(t){case"i":return String(r);case"ii":return P(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(e,t,n){var o=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,t,n){var o,r=e.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){var o,r=e.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var o=e.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return M(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):W(e,t)},K:function(e,t,n){var o=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(o,{unit:"hour"}):P(o,t.length)},k:function(e,t,n){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===t?n.ordinalNumber(o,{unit:"hour"}):P(o,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):z(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):q(e,t)},S:function(e,t){return L(e,t)},X:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return I(r);case"XXXX":case"XX":return N(r);default:return N(r,":")}},x:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"x":return I(r);case"xxxx":case"xx":return N(r);default:return N(r,":")}},O:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+U(r,":");default:return"GMT"+N(r,":")}},z:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+U(r,":");default:return"GMT"+N(r,":")}},t:function(e,t,n,o){var r=o._originalDate||e;return P(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,o){return P((o._originalDate||e).getTime(),t.length)}};function U(e,t){var n=e>0?"-":"+",o=Math.abs(e),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=t||"";return n+String(r)+i+P(a,2)}function I(e,t){return e%60==0?(e>0?"-":"+")+P(Math.abs(e)/60,2):N(e,t)}function N(e,t){var n=t||"",o=e>0?"-":"+",r=Math.abs(e);return o+P(Math.floor(r/60),2)+n+P(r%60,2)}const O=H;var F=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},$=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const X={p:$,P:function(e,t){var n,o=e.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return F(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",F(r,t)).replace("{{time}}",$(a,t))}};var Q=["D","DD"],R=["YY","YYYY"];function Z(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var G={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function V(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const _={date:V({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:V({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:V({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var J={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function K(e){return function(t,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,a=null!=n&&n.width?String(n.width):r;o=e.formattingValues[a]||e.formattingValues[r]}else{var i=e.defaultWidth,s=null!=n&&n.width?String(n.width):e.defaultWidth;o=e.values[s]||e.values[i]}return o[e.argumentCallback?e.argumentCallback(t):t]}}const ee={ordinalNumber:function(e,t){var n=Number(e),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:K({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:K({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:K({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:K({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:K({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function te(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],a=t.match(r);if(!a)return null;var i,s=a[0],c=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(s))return n}(c):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(s))return n}(c);return i=e.valueCallback?e.valueCallback(d):d,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(s.length)}}}var ne,oe={ordinalNumber:(ne={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(ne.matchPattern);if(!n)return null;var o=n[0],r=e.match(ne.parsePattern);if(!r)return null;var a=ne.valueCallback?ne.valueCallback(r[0]):r[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:e.slice(o.length)}}),era:te({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:te({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:te({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:te({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:te({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const re={code:"en-US",formatDistance:function(e,t,n){var o,r=G[e];return o="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:_,formatRelative:function(e,t,n,o){return J[e]},localize:ee,match:oe,options:{weekStartsOn:0,firstWeekContainsDate:1}};var ae=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ie=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,se=/^'([^]*?)'?$/,ce=/''/g,de=/[a-zA-Z]/;function le(e,t,n){var o,r,a,i,s,c,d,l,A,u,p,m,g,h,f,C,B,w;v(2,arguments);var x=String(t),T=k(),j=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:T.locale)&&void 0!==o?o:re,P=y(null!==(a=null!==(i=null!==(s=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(d=n.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==s?s:T.firstWeekContainsDate)&&void 0!==i?i:null===(A=T.locale)||void 0===A||null===(u=A.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:1);if(!(P>=1&&P<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=y(null!==(p=null!==(m=null!==(g=null!==(h=null==n?void 0:n.weekStartsOn)&&void 0!==h?h:null==n||null===(f=n.locale)||void 0===f||null===(C=f.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==g?g:T.weekStartsOn)&&void 0!==m?m:null===(B=T.locale)||void 0===B||null===(w=B.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==p?p:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!j.localize)throw new RangeError("locale must contain localize property");if(!j.formatLong)throw new RangeError("locale must contain formatLong property");var S=b(e);if(!function(e){if(v(1,arguments),!function(e){return v(1,arguments),e instanceof Date||"object"===E(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=b(e);return!isNaN(Number(t))}(S))throw new RangeError("Invalid time value");var Y=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(S),M=function(e,t){return v(2,arguments),function(e,t){v(2,arguments);var n=b(e).getTime(),o=y(t);return new Date(n+o)}(e,-y(t))}(S,Y),W={firstWeekContainsDate:P,weekStartsOn:D,locale:j,_originalDate:S};return x.match(ie).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,X[t])(e,j.formatLong):e})).join("").match(ae).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(se))?a[1].replace(ce,"'"):r;var s,c=O[i];if(c)return null!=n&&n.useAdditionalWeekYearTokens||(s=o,-1===R.indexOf(s))||Z(o,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==Q.indexOf(e)}(o)||Z(o,t,String(e)),c(M,o,j.localize,W);if(i.match(de))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}class Ae{constructor(e,t,n,o,r,a){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.completed=r,this.index=a}getTitle(){return this.title}setTitle(e){this.title=e}getDescription(){return this.description}setDescription(e){this.description=e}getDueDate(){return this.dueDate}setDueDate(e){this.dueDate=e}getPriority(){return this.priority}setPriority(e){this.priority=e}getCompleted(){return this.completed}toggleCompleted(){this.completed=!this.completed}getIndex(){return this.index}setIndex(e){this.index=e}}function ue(e){v(1,arguments);var t=b(e);return t.setHours(0,0,0,0),t}function pe(e,t){var n,o,r,a,i,s,c,d;v(1,arguments);var l=k(),A=y(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(s=i.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:l.weekStartsOn)&&void 0!==o?o:null===(c=l.locale)||void 0===c||null===(d=c.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==n?n:0);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=b(e),p=u.getDay(),m=(p<A?7:0)+p-A;return u.setDate(u.getDate()-m),u.setHours(0,0,0,0),u}class me{constructor(e){this.name=e,this.tasks=[],this.taskCount=0,this.indexCount=0}getName(){return this.name}getTaskCount(){return this.taskCount}updateTaskCount(){this.taskCount=this.tasks.length}getIndexCount(){return this.indexCount}updateIndexCount(){this.indexCount=this.tasks.length}getAllTasks(){return this.tasks}getTask(e){return this.tasks.find((t=>t.getTitle()===e))}setTasks(e){this.tasks=e}contains(e){return this.tasks.some((t=>t.getTitle()===e))}addTask(e){this.tasks.push(e),this.taskCount++,this.indexCount++}deleteTask(e){this.tasks=this.tasks.filter((t=>t.getTitle()!==e)),this.taskCount--}getTodayTasks(){return this.tasks.filter((e=>function(e){return v(1,arguments),function(e,t){v(2,arguments);var n=ue(e),o=ue(t);return n.getTime()===o.getTime()}(e,Date.now())}(new Date(this.monthDayYear(e.getDueDate())))))}getThisWeekTasks(){return this.tasks.filter((e=>function(e,t){return v(1,arguments),function(e,t,n){v(2,arguments);var o=pe(e,n),r=pe(t,n);return o.getTime()===r.getTime()}(e,Date.now(),t)}(function(e,t){return v(2,arguments),function(e,t){v(2,arguments);var n=b(e),o=y(t);return isNaN(o)?new Date(NaN):o?(n.setDate(n.getDate()+o),n):n}(e,-y(t))}(new Date(this.monthDayYear(e.getDueDate())),1))))}getImportantTasks(){return this.tasks.filter((e=>"high"===e.getPriority()))}monthDayYear(e){if(e){const t=e.split("-")[2];return`${e.split("-")[1]}/${t}/${e.split("-")[0]}`}return null}}class ge{constructor(){this.projects=[new me("Today"),new me("This week"),new me("Important")]}getAllProjects(){return this.projects}getProject(e){return this.projects.find((t=>t.getName()===e))}setProjects(e){this.projects=e}contains(e){return this.projects.some((t=>t.getName()===e))}addProject(e){this.projects.push(e)}deleteProject(e){this.projects=this.projects.filter((t=>t.getName()!==e))}updateTodayProjects(){this.updateProject("Today").tasks=this.sortByPriority(this.getProject("Today").getAllTasks()),this.reindexTasks(this.getProject("Today").getAllTasks()),this.getProject("Today").updateTaskCount(),this.getProject("Today").updateIndexCount()}updateThisWeekProjects(){this.updateProject("This week").tasks=this.sortByDate(this.getProject("This week").getAllTasks()),this.reindexTasks(this.getProject("This week").getAllTasks()),this.getProject("This week").updateTaskCount(),this.getProject("This week").updateIndexCount()}updateImportantProjects(){this.updateProject("Important").tasks=this.sortByDate(this.getProject("Important").getAllTasks()),this.reindexTasks(this.getProject("This week").getAllTasks()),this.getProject("This week").updateTaskCount(),this.getProject("This week").updateIndexCount()}updateProject(e){return this.getProject(e).tasks=[],this.getProject(e).taskCount=0,this.getProject(e).indexCount=0,this.projects.forEach((t=>{["Today","This week","Important"].includes(t.getName())||("Today"===e?t.getTodayTasks():"This week"===e?t.getThisWeekTasks():t.getImportantTasks()).forEach(((t,n)=>{this.getProject(e).addTask(new Ae(t.getTitle(),t.getDescription(),t.getDueDate(),t.getPriority(),t.getCompleted(),n))}))})),this.getProject(e)}updateAllProjects(){this.updateTodayProjects(),this.updateThisWeekProjects(),this.updateImportantProjects()}reindexTasks(e){e.forEach(((e,t)=>e.setIndex(t)))}sortByPriority(e){return e.sort(((e,t)=>this.priorityToScore(e)-this.priorityToScore(t)))}priorityToScore(e){return"high"===e.getPriority()?-3:"medium"===e.getPriority()?-2:-1}sortByDate(e){const t=[],n=[];e.forEach((e=>null===e.getDueDate()?t.push(e):n.push(e)));const o=n.sort(((e,t)=>function(e,t){v(2,arguments);var n=b(e),o=b(t),r=n.getTime()-o.getTime();return r<0?-1:r>0?1:r}(new Date(e.getDueDate()),new Date(t.getDueDate()))));return[...o,...t]}}class he{static setTodoList(e){localStorage.setItem("todoList",JSON.stringify(e))}static getTodoList(){const e=Object.assign(new ge,JSON.parse(localStorage.getItem("todoList")));return e.setProjects(e.getAllProjects().map((e=>Object.assign(new me,e)))),e.getAllProjects().forEach((e=>e.setTasks(e.getAllTasks().map((e=>Object.assign(new Ae,e)))))),e}static updateAllProjects(){const e=he.getTodoList();e.updateAllProjects(),he.setTodoList(e)}static getAllProjects(){return he.getTodoList().getAllProjects()}static containsProject(e){return he.getTodoList().contains(e)}static addProject(e){const t=he.getTodoList();t.addProject(new me(e)),he.setTodoList(t)}static deleteProject(e){const t=he.getTodoList();t.deleteProject(e),t.updateAllProjects(),he.setTodoList(t)}static getTaskCount(e){return he.getTodoList().getProject(e).getTaskCount()}static getIndexCount(e){return he.getTodoList().getProject(e).getIndexCount()}static getAllTasks(e){return he.getTodoList().getProject(e).getAllTasks()}static getTask(e,t){return he.getTodoList().getProject(e).getTask(t)}static isProjectEmpty(e){return 0===he.getTodoList().getProject(e).getTaskCount()}static containsTask(e,t){return he.getTodoList().getProject(e).contains(t)}static addTask(e,t,n,o,r){const a=he.getTodoList();a.getProject(e).addTask(new Ae(t,n,o,r,!1,a.getProject(e).getIndexCount())),a.updateAllProjects(),he.setTodoList(a)}static deleteTask(e,t){const n=he.getTodoList();n.getProject(e).deleteTask(t),n.updateAllProjects(),he.setTodoList(n)}static updateTask(e,t,n,o,r,a){const i=he.getTodoList();i.getProject(e).getTask(t).setTitle(n),i.getProject(e).getTask(n).setDescription(o),i.getProject(e).getTask(n).setDueDate(r),i.getProject(e).getTask(n).setPriority(a),i.updateAllProjects(),he.setTodoList(i)}static toggleTaskCompleted(e,t){const n=he.getTodoList();n.getProject(e).getTask(t).toggleCompleted(),n.updateAllProjects(),he.setTodoList(n)}static getProjectName(e){const t=he.getTodoList();for(const n of t.getAllProjects().filter((e=>!["Today","This week","Important"].includes(e.getName()))))if(n.contains(e))return n.getName()}}const fe=n.p+"icons/close-white.svg",Ce=(()=>{const e=e=>{const n=Pe.createImg(fe,[`${e}-exit`,"exit-button"],"Exit");return t(n),n},t=e=>{e.addEventListener("click",n)},n=()=>{document.querySelector("dialog").remove(),o()},o=()=>{const e=document.querySelector(".overlay");e.style.display="block"===e.style.display?"none":"block"},r=(e,t)=>({title:e.querySelector(`.${t}-task-title`).value,desc:e.querySelector(`.${t}-task-desc`).value,date:e.querySelector(`#${t}-task-date`).value||null,priority:e.querySelector(`input[name="${t}-task-priority"]:checked`).value}),a=e=>e.charAt(0).toUpperCase()+e.slice(1);return{showDeleteModal:(t,r=null)=>{const a=Pe.createText("dialog",["modal-delete"],"");a.open=!0;const i=Pe.createText("div",["modal-delete-top"],""),s=Pe.createText("span","","Confirm Delete"),c=document.createElement("button"),d=e("delete");c.append(d),i.append(s,c);const l=Pe.createText("div",["modal-delete-bottom"],"");let A=null;A=r?Pe.createText("span","","Are you sure you want to delete this task?"):Pe.createText("span","",`Are you sure you want to delete project ${t}? Warning: this is irreversible!`);const u=Pe.createText("div",["container-confirm"],""),p=Pe.createText("button",["delete-confirm-button"],"Delete");r?((e,t,o)=>{e.addEventListener("click",(()=>{n(),he.deleteTask(t,o),je.updateTaskCount();const e=document.querySelector(".project-name").textContent;ye.replaceSection(e)}))})(p,t,r):((e,t)=>{e.addEventListener("click",(()=>{n(),he.deleteProject(t);for(const e of document.querySelectorAll(".nav-span"))if(e.textContent===t){je.removeProjectLi(e.closest("li")),je.updateTaskCount(),e.closest(".project").classList.contains("selected")&&(ye.replaceSection(),Pe.changeDocumentTitle());break}}))})(p,t),u.append(p),l.append(A,u),a.append(i,l),document.querySelector("main").append(a),o()},showViewModal:(t,n)=>{const r=Pe.createText("dialog",["modal-view"],"");r.open=!0;const i=Pe.createText("div",["modal-view-top"],""),s=Pe.createText("h1",["view-title"],n.getTitle()),c=document.createElement("button"),d=e("view");c.append(d),i.append(s,c);const l=Pe.createText("div",["modal-view-bottom"],""),A=Pe.createText("p",["view-desc"],n.getDescription()),u=Pe.createText("p",["view-project"],`Project: ${t}`),p=Pe.createText("p",["view-date"],`Due Date: ${n.getDueDate()?(e=>e?le(new Date(e),"dd/MM/yyyy"):"")(n.getDueDate()):"-"}`),m=Pe.createText("p",["view-priority"],"Priority: "),g=Pe.createText("span",["view-priority-level",`view-${n.getPriority()}`],a(n.getPriority()));m.append(g),l.append(A,u,p,m),r.append(i,l),document.querySelector("main").append(r),o()},showCreateEditModal:(t,i,s)=>{const c=Pe.createText("dialog",[`modal-${s}`],"");c.open=!0;const d=Pe.createText("div",[`modal-${s}-top`],""),l=Pe.createText("span","",`${a(s)} Task`),A=document.createElement("button"),u=e(s);A.append(u),d.append(l,A);const p=Pe.createText("form",[`modal-${s}-bottom`],"");p.method="dialog";const m=Pe.createText("input",[`${s}-task-title`],"");m.type="text",m.placeholder="Title",m.required=!0,i&&(m.value=i.getTitle());const g=Pe.createText("textarea",[`${s}-task-desc`],"");g.placeholder="Description",g.required=!0,i&&(g.textContent=i.getDescription());const h=Pe.createText("div",["container-date"],""),f=Pe.createText("label","","Due Date :");f.htmlFor=`${s}-task-date`;const C=document.createElement("input");C.type="date",C.id=`${s}-task-date`,i&&(C.value=i.getDueDate()),h.append(f,C);const E=Pe.createText("div",["container-priority"],""),v=Pe.createText("span","","Priority :");E.append(v);const b=Pe.createText("div",["container-priority-level"],"");["low","medium","high"].forEach((e=>{const t=document.createElement("input");t.type="radio",t.name=`${s}-task-priority`,t.id=`${s}-${e}`,t.value=e,(i&&i.getPriority()===e||!i&&"low"===e)&&(t.checked=!0);const n=Pe.createText("label",[`label-${e}`],a(e));n.htmlFor=`${s}-${e}`,b.append(t,n)})),b.querySelector('input[value="low"]').required=!0;const y=Pe.createText("button",i?["edit-change-button"]:["create-add-button"],i?"Edit":"Add");y.type="submit",i?((e,t,o)=>{e.addEventListener("submit",(a=>{const i=r(e,"edit");a.preventDefault(),n();const s=o.getTitle();he.updateTask(t,s,...Object.values(i)),je.updateTaskCount();const c=document.querySelector(".project-name").textContent;ye.replaceSection(c)}))})(p,t,i):((e,t)=>{e.addEventListener("submit",(o=>{const a=r(e,"create");o.preventDefault(),n(),he.addTask(t,...Object.values(a),he.getIndexCount(t)),je.updateTaskCount();const i=document.querySelector(".project-name").textContent;ye.replaceSection(i)}))})(p,t),E.append(b,y),p.append(m,g,h,E),c.append(d,p),document.querySelector("main").append(c),o()},addExitHandler:t}})(),Ee=n.p+"icons/square-edit-outline.svg",ve=n.p+"icons/delete.svg",be=n.p+"icons/plus.svg",ye=(()=>{const e=e=>{const t=Pe.createText("section",["container-project"],""),a=Pe.createText("h1",["project-name"],e),i=Pe.createText("menu",["task-list"],"");if(t.append(a,i),he.isProjectEmpty(e))a.insertAdjacentElement("afterend",n());else{const t=he.getAllTasks(e);i.append(...t.map((e=>o(e))))}return["Today","This week","Important"].includes(e)||i.append(r()),t},t=()=>{const e=Pe.createText("section",["container-project"],""),t=Pe.createText("h1",["project-name"],"Select a project");return e.append(t),e},n=()=>Pe.createText("h2",["empty-task"],"It's quite empty here..."),o=e=>{const t=document.createElement("li"),n=Pe.createText("button",["task",`task-${e.getPriority()}`],"");i(n);const o=document.createElement("label");o.htmlFor=`checkbox${e.getIndex()}`;const r=Pe.createText("input",["task-checkbox"],"");r.type="checkbox",r.id=`checkbox${e.getIndex()}`,r.checked=e.getCompleted(),s(r);const a=Pe.createText("div",["checkbox-div"],"");o.append(r,a);const u=Pe.createText("h2",A(e.getCompleted()),e.getTitle()),p=Pe.createText("span",["task-date"],l(e.getDueDate())),m=Pe.createImg(Ee,["task-icon","task-edit-button"],"Edit");c(m);const g=Pe.createImg(ve,["task-icon","task-trash-button"],"Trash");return d(g),n.append(o,u,p,m,g),t.append(n),t},r=()=>{const e=document.createElement("li"),t=Pe.createText("button",["task","add-task"],""),n=Pe.createImg(be,"","Add"),o=Pe.createText("span","","Add Task");return t.append(n,o),e.append(t),a(e),e},a=e=>{e.addEventListener("click",(()=>{const e=document.querySelector(".project-name").textContent;Ce.showCreateEditModal(e,null,"create")}))},i=e=>{e.addEventListener("click",(e=>{if(["task-checkbox","checkbox-div"].includes(e.target.className))return;const t=e.target.closest(".task").querySelector(".task-title").textContent,n=he.getProjectName(t);Ce.showViewModal(n,he.getTask(n,t))}))},s=e=>{e.addEventListener("click",(e=>{const t=e.target.closest(".task").querySelector(".task-title"),n=he.getProjectName(t.textContent);t.classList.toggle("completed"),he.toggleTaskCompleted(n,t.textContent)}))},c=e=>{e.addEventListener("click",(e=>{e.stopPropagation();const t=e.target.closest(".task").querySelector(".task-title").textContent,n=he.getProjectName(t);Ce.showCreateEditModal(n,he.getTask(n,t),"edit")}))},d=e=>{e.addEventListener("click",(e=>{e.stopPropagation();const t=e.target.closest(".task").querySelector(".task-title").textContent,n=he.getProjectName(t);Ce.showDeleteModal(n,t)}))},l=e=>e?le(new Date(e),"dd/MM/yyyy"):"-",A=e=>e?["task-title","completed"]:["task-title"];return{createSection:e,createEmptySection:t,removeTaskLi:e=>{e.remove();const t=document.querySelector(".project-name");he.isProjectEmpty(t.textContent)&&t.insertAdjacentElement("afterend",n())},replaceSection:n=>{n?document.querySelector(".container-project").replaceWith(e(n)):document.querySelector(".container-project").replaceWith(t())}}})(),Be=n.p+"icons/calendar-today.svg",we=n.p+"icons/calendar-week.svg",xe=n.p+"icons/calendar-alert.svg",ke=n.p+"icons/format-list-bulleted.svg",Te=n.p+"icons/close.svg",je=(()=>{const e=(e,t,n,r=null,a=null)=>{const i=document.createElement("li"),s=Pe.createText("button",e,"");return a?s.append(t,n,r,a):s.append(t,n,r),i.append(s),o(i),i},t=()=>{const e=document.createElement("li"),t=Pe.createText("button",["nav-button","add-project"],""),n=Pe.createImg(be,["nav-icon"],"Add"),o=Pe.createText("span",["nav-span"],"Add Project");return t.append(n,o),e.append(t),r(e),e},n=()=>{const e=Pe.createImg(Te,["nav-icon","project-delete"],"Delete");return a(e),e},o=e=>{e.addEventListener("click",(e=>{const t=document.querySelector(".selected");t&&t.classList.remove("selected");const n=e.target.closest(".nav-button");n.classList.add("selected");const o=n.querySelector(".nav-span").textContent;document.querySelector(".container-project").replaceWith(ye.createSection(o)),Pe.changeDocumentTitle()}))},r=o=>{o.addEventListener("click",(o=>{o.target.parentNode.remove(),document.querySelector(".nav-bottom").append((()=>{const o=Pe.createText("div",["container-add-project"],""),r=Pe.createText("input",["input-project"],"");r.type="text";const a=document.createElement("div"),i=Pe.createText("button",["project-add"],"Add");i.addEventListener("click",(()=>{const a=r.value;if(""===a)alert("Project name cannot be empty");else if(he.containsProject(a))alert("Project name already exists");else{he.addProject(a);const r=e(["nav-button","project"],Pe.createImg(ke,["nav-icon"],"List"),Pe.createText("span",["nav-span"],a),Pe.createText("span",["task-count"],""),n());o.remove(),document.querySelector(".nav-projects").append(r,t())}}));const s=Pe.createText("button",["project-cancel"],"Cancel");return s.addEventListener("click",(()=>{o.remove(),document.querySelector(".nav-projects").append(t())})),a.append(i,s),o.append(r,a),o})())}))},a=e=>{e.addEventListener("click",(e=>{e.stopPropagation();const t=e.target.closest(".project").querySelector(".nav-span").textContent;Ce.showDeleteModal(t)}))},i=e=>{const t=he.getTaskCount(e);return 0===t?"":t.toString()};return{createNav:()=>{const o=document.createElement("nav"),r=Pe.createText("menu",["nav-top"],""),a=[e(["nav-button","project","selected"],Pe.createImg(Be,["nav-icon"],"Today"),Pe.createText("span",["nav-span"],"Today"),Pe.createText("span",["task-count"],i("Today"))),e(["nav-button","project"],Pe.createImg(we,["nav-icon"],"This week"),Pe.createText("span",["nav-span"],"This week"),Pe.createText("span",["task-count"],i("This week"))),e(["nav-button","project"],Pe.createImg(xe,["nav-icon"],"Important"),Pe.createText("span",["nav-span"],"Important"),Pe.createText("span",["task-count"],i("Important")))];r.append(...a);const s=Pe.createText("div",["nav-bottom"],""),c=Pe.createText("h1","","Projects"),d=Pe.createText("menu",["nav-projects"],""),l=he.getAllProjects().filter((e=>!["Today","This week","Important"].includes(e.getName()))).map((t=>e(["nav-button","project"],Pe.createImg(ke,["nav-icon"],"List"),Pe.createText("span",["nav-span"],t.getName()),Pe.createText("span",["task-count"],i(t.getName())),n())));return d.append(...l,t()),s.append(c,d),o.append(r,s),o},removeProjectLi:e=>{e.remove()},updateTaskCount:()=>{document.querySelectorAll(".project").forEach((e=>{const t=e.querySelector(".nav-span").textContent;e.querySelector(".task-count").textContent=i(t)}))}}})(),Pe=(()=>{const e=(e,t,n)=>{const o=document.createElement(e);return o.classList.add(...t),o.textContent=n,o},t=()=>{const e=document.querySelector(".project-name").textContent;document.title=e?`${e} - Todo List`:"Todo List"};return{initialize:()=>{he.updateAllProjects();const n=document.createElement("main"),o=je.createNav(),r=ye.createSection("Today"),a=e("div",["overlay"],"");Ce.addExitHandler(a),n.append(o,r,a),document.body.append(h(),n,C()),t()},createText:e,createImg:(e,t,n)=>{const o=document.createElement("img");return o.src=e,o.classList.add(...t),o.alt=n,o},changeDocumentTitle:t}})();Pe.initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,